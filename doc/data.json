{
    "project": {
        "name": "metaScore",
        "description": "metaScore",
        "version": "0.9.1",
        "url": "",
        "logo": "assets/img/logo.png"
    },
    "files": {
        "src\\js\\core\\overlay\\metaScore.overlay.Alert.js": {
            "name": "src\\js\\core\\overlay\\metaScore.overlay.Alert.js",
            "modules": {},
            "classes": {
                "overlay.Alert": 1
            },
            "fors": {},
            "namespaces": {
                "overlay": 1
            }
        },
        "src\\js\\core\\overlay\\metaScore.overlay.LoadMask.js": {
            "name": "src\\js\\core\\overlay\\metaScore.overlay.LoadMask.js",
            "modules": {},
            "classes": {
                "overlay.LoadMask": 1
            },
            "fors": {},
            "namespaces": {
                "overlay": 1
            }
        },
        "src\\js\\core\\overlay\\metaScore.overlay.Toolbar.js": {
            "name": "src\\js\\core\\overlay\\metaScore.overlay.Toolbar.js",
            "modules": {},
            "classes": {
                "overlay.Toolbar": 1
            },
            "fors": {},
            "namespaces": {
                "overlay": 1
            }
        },
        "src\\js\\core\\overlay\\metaScore.overlay.iFrame.js": {
            "name": "src\\js\\core\\overlay\\metaScore.overlay.iFrame.js",
            "modules": {},
            "classes": {
                "overlay.iFrame": 1
            },
            "fors": {},
            "namespaces": {
                "overlay": 1
            }
        },
        "src\\js\\core\\metaScore.Ajax.js": {
            "name": "src\\js\\core\\metaScore.Ajax.js",
            "modules": {},
            "classes": {
                "Ajax": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\js\\core\\metaScore.Array.js": {
            "name": "src\\js\\core\\metaScore.Array.js",
            "modules": {},
            "classes": {
                "Array": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\js\\core\\metaScore.Button.js": {
            "name": "src\\js\\core\\metaScore.Button.js",
            "modules": {},
            "classes": {
                "Button": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\js\\core\\metaScore.Clipboard.js": {
            "name": "src\\js\\core\\metaScore.Clipboard.js",
            "modules": {},
            "classes": {
                "Clipboard": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\js\\core\\metaScore.Color.js": {
            "name": "src\\js\\core\\metaScore.Color.js",
            "modules": {},
            "classes": {
                "Color": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\js\\core\\metaScore.ContextMenu.js": {
            "name": "src\\js\\core\\metaScore.ContextMenu.js",
            "modules": {},
            "classes": {
                "ContextMenu": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\js\\core\\metaScore.Dom.js": {
            "name": "src\\js\\core\\metaScore.Dom.js",
            "modules": {},
            "classes": {
                "Dom": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\js\\core\\metaScore.Draggable.js": {
            "name": "src\\js\\core\\metaScore.Draggable.js",
            "modules": {},
            "classes": {
                "Draggable": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\js\\core\\metaScore.Function.js": {
            "name": "src\\js\\core\\metaScore.Function.js",
            "modules": {},
            "classes": {
                "Function": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\js\\core\\metaScore.Locale.js": {
            "name": "src\\js\\core\\metaScore.Locale.js",
            "modules": {},
            "classes": {
                "Locale": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\js\\core\\metaScore.Number.js": {
            "name": "src\\js\\core\\metaScore.Number.js",
            "modules": {},
            "classes": {
                "Number": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\js\\core\\metaScore.Object.js": {
            "name": "src\\js\\core\\metaScore.Object.js",
            "modules": {},
            "classes": {
                "Object": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\js\\core\\metaScore.Overlay.js": {
            "name": "src\\js\\core\\metaScore.Overlay.js",
            "modules": {},
            "classes": {
                "Overlay": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\js\\core\\metaScore.Resizable.js": {
            "name": "src\\js\\core\\metaScore.Resizable.js",
            "modules": {},
            "classes": {
                "Resizable": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\js\\core\\metaScore.String.js": {
            "name": "src\\js\\core\\metaScore.String.js",
            "modules": {},
            "classes": {
                "String": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\js\\core\\metaScore.StyleSheet.js": {
            "name": "src\\js\\core\\metaScore.StyleSheet.js",
            "modules": {},
            "classes": {
                "StyleSheet": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\js\\core\\metaScore.Var.js": {
            "name": "src\\js\\core\\metaScore.Var.js",
            "modules": {},
            "classes": {
                "Var": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\js\\editor\\field\\metaScore.editor.field.BorderRadius.js": {
            "name": "src\\js\\editor\\field\\metaScore.editor.field.BorderRadius.js",
            "modules": {},
            "classes": {
                "editor.field.BorderRadius": 1
            },
            "fors": {},
            "namespaces": {
                "editor.field": 1
            }
        },
        "src\\js\\editor\\field\\metaScore.editor.field.Buttons.js": {
            "name": "src\\js\\editor\\field\\metaScore.editor.field.Buttons.js",
            "modules": {},
            "classes": {
                "editor.field.ButtonsField": 1
            },
            "fors": {},
            "namespaces": {
                "editor.field": 1
            }
        },
        "src\\js\\editor\\field\\metaScore.editor.field.Checkbox.js": {
            "name": "src\\js\\editor\\field\\metaScore.editor.field.Checkbox.js",
            "modules": {},
            "classes": {
                "editor.field.Checkbox": 1
            },
            "fors": {},
            "namespaces": {
                "editor.field": 1
            }
        },
        "src\\js\\editor\\field\\metaScore.editor.field.Checkboxes.js": {
            "name": "src\\js\\editor\\field\\metaScore.editor.field.Checkboxes.js",
            "modules": {},
            "classes": {
                "editor.field.CheckboxesField": 1
            },
            "fors": {},
            "namespaces": {
                "editor.field": 1
            }
        },
        "src\\js\\editor\\field\\metaScore.editor.field.Color.js": {
            "name": "src\\js\\editor\\field\\metaScore.editor.field.Color.js",
            "modules": {},
            "classes": {
                "editor.field.ColorField": 1
            },
            "fors": {},
            "namespaces": {
                "editor.field": 1
            }
        },
        "src\\js\\editor\\field\\metaScore.editor.field.File.js": {
            "name": "src\\js\\editor\\field\\metaScore.editor.field.File.js",
            "modules": {},
            "classes": {
                "editor.field.FileField": 1
            },
            "fors": {},
            "namespaces": {
                "editor.field": 1
            }
        },
        "src\\js\\editor\\field\\metaScore.editor.field.Image.js": {
            "name": "src\\js\\editor\\field\\metaScore.editor.field.Image.js",
            "modules": {},
            "classes": {
                "editor.field.ImageField": 1
            },
            "fors": {},
            "namespaces": {
                "editor.field": 1
            }
        },
        "src\\js\\editor\\field\\metaScore.editor.field.Number.js": {
            "name": "src\\js\\editor\\field\\metaScore.editor.field.Number.js",
            "modules": {},
            "classes": {
                "editor.field.NumberField": 1
            },
            "fors": {},
            "namespaces": {
                "editor.field": 1
            }
        },
        "src\\js\\editor\\field\\metaScore.editor.field.Select.js": {
            "name": "src\\js\\editor\\field\\metaScore.editor.field.Select.js",
            "modules": {},
            "classes": {
                "editor.field.SelectField": 1
            },
            "fors": {},
            "namespaces": {
                "editor.field": 1
            }
        },
        "src\\js\\editor\\field\\metaScore.editor.field.Text.js": {
            "name": "src\\js\\editor\\field\\metaScore.editor.field.Text.js",
            "modules": {},
            "classes": {
                "editor.field.TextField": 1
            },
            "fors": {},
            "namespaces": {
                "editor.field": 1
            }
        },
        "src\\js\\editor\\field\\metaScore.editor.field.Textarea.js": {
            "name": "src\\js\\editor\\field\\metaScore.editor.field.Textarea.js",
            "modules": {},
            "classes": {
                "editor.field.TextareaField": 1
            },
            "fors": {},
            "namespaces": {
                "editor.field": 1
            }
        },
        "src\\js\\editor\\field\\metaScore.editor.field.Time.js": {
            "name": "src\\js\\editor\\field\\metaScore.editor.field.Time.js",
            "modules": {},
            "classes": {
                "editor.field.TimeField": 1
            },
            "fors": {},
            "namespaces": {
                "editor.field": 1
            }
        },
        "src\\js\\editor\\overlay\\metaScore.editor.overlay.BorderRadius.js": {
            "name": "src\\js\\editor\\overlay\\metaScore.editor.overlay.BorderRadius.js",
            "modules": {},
            "classes": {
                "editor.overlay.BorderRadius": 1
            },
            "fors": {},
            "namespaces": {
                "editor.overlay": 1
            }
        },
        "src\\js\\editor\\overlay\\metaScore.editor.overlay.ColorSelector.js": {
            "name": "src\\js\\editor\\overlay\\metaScore.editor.overlay.ColorSelector.js",
            "modules": {},
            "classes": {
                "editor.overlay.ColorSelector": 1
            },
            "fors": {},
            "namespaces": {
                "editor.overlay": 1
            }
        },
        "src\\js\\editor\\overlay\\metaScore.editor.overlay.GuideDetails.js": {
            "name": "src\\js\\editor\\overlay\\metaScore.editor.overlay.GuideDetails.js",
            "modules": {},
            "classes": {
                "editor.overlay.GuideDetails": 1
            },
            "fors": {},
            "namespaces": {
                "editor.overlay": 1
            }
        },
        "src\\js\\editor\\overlay\\metaScore.editor.overlay.GuideSelector.js": {
            "name": "src\\js\\editor\\overlay\\metaScore.editor.overlay.GuideSelector.js",
            "modules": {},
            "classes": {
                "editor.overlay.GuideSelector": 1
            },
            "fors": {},
            "namespaces": {
                "editor.overlay": 1
            }
        },
        "src\\js\\editor\\overlay\\metaScore.editor.overlay.Share.js": {
            "name": "src\\js\\editor\\overlay\\metaScore.editor.overlay.Share.js",
            "modules": {},
            "classes": {
                "editor.overlay.Share": 1
            },
            "fors": {},
            "namespaces": {
                "editor.overlay": 1
            }
        },
        "src\\js\\editor\\panel\\metaScore.editor.panel.Block.js": {
            "name": "src\\js\\editor\\panel\\metaScore.editor.panel.Block.js",
            "modules": {},
            "classes": {
                "editor.panel.Block": 1
            },
            "fors": {},
            "namespaces": {
                "editor.panel": 1
            }
        },
        "src\\js\\editor\\panel\\metaScore.editor.panel.Element.js": {
            "name": "src\\js\\editor\\panel\\metaScore.editor.panel.Element.js",
            "modules": {},
            "classes": {
                "editor.panel.Element": 1
            },
            "fors": {},
            "namespaces": {
                "editor.panel": 1
            }
        },
        "src\\js\\editor\\panel\\metaScore.editor.panel.Page.js": {
            "name": "src\\js\\editor\\panel\\metaScore.editor.panel.Page.js",
            "modules": {},
            "classes": {
                "editor.panel.Page": 1
            },
            "fors": {},
            "namespaces": {
                "editor.panel": 1
            }
        },
        "src\\js\\editor\\panel\\metaScore.editor.panel.Toolbar.js": {
            "name": "src\\js\\editor\\panel\\metaScore.editor.panel.Toolbar.js",
            "modules": {},
            "classes": {
                "editor.panel.Toolbar": 1
            },
            "fors": {},
            "namespaces": {
                "editor.panel": 1
            }
        },
        "src\\js\\editor\\metaScore.editor.DropDownMenu.js": {
            "name": "src\\js\\editor\\metaScore.editor.DropDownMenu.js",
            "modules": {},
            "classes": {
                "editor.DropDownMenu": 1
            },
            "fors": {},
            "namespaces": {
                "editor": 1
            }
        },
        "src\\js\\editor\\metaScore.editor.Field.js": {
            "name": "src\\js\\editor\\metaScore.editor.Field.js",
            "modules": {},
            "classes": {
                "editor.Field": 1
            },
            "fors": {},
            "namespaces": {
                "editor": 1
            }
        },
        "src\\js\\editor\\metaScore.editor.Fieldset.js": {
            "name": "src\\js\\editor\\metaScore.editor.Fieldset.js",
            "modules": {},
            "classes": {
                "editor.Fieldset": 1
            },
            "fors": {},
            "namespaces": {
                "editor": 1
            }
        },
        "src\\js\\editor\\metaScore.editor.History.js": {
            "name": "src\\js\\editor\\metaScore.editor.History.js",
            "modules": {},
            "classes": {
                "editor.History": 1
            },
            "fors": {},
            "namespaces": {
                "editor": 1
            }
        },
        "src\\js\\editor\\metaScore.editor.MainMenu.js": {
            "name": "src\\js\\editor\\metaScore.editor.MainMenu.js",
            "modules": {},
            "classes": {
                "editor.MainMenu": 1
            },
            "fors": {},
            "namespaces": {
                "editor": 1
            }
        },
        "src\\js\\editor\\metaScore.editor.Panel.js": {
            "name": "src\\js\\editor\\metaScore.editor.Panel.js",
            "modules": {},
            "classes": {
                "editor.Panel": 1
            },
            "fors": {},
            "namespaces": {
                "editor": 1
            }
        },
        "src\\js\\player\\component\\element\\metaScore.player.component.element.Cursor.js": {
            "name": "src\\js\\player\\component\\element\\metaScore.player.component.element.Cursor.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "player.component.element": 1
            }
        },
        "src\\js\\player\\component\\element\\metaScore.player.component.element.Image.js": {
            "name": "src\\js\\player\\component\\element\\metaScore.player.component.element.Image.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "player.component.element": 1
            }
        },
        "src\\js\\player\\component\\element\\metaScore.player.component.element.Text.js": {
            "name": "src\\js\\player\\component\\element\\metaScore.player.component.element.Text.js",
            "modules": {},
            "classes": {
                "player.component.element.Cursor": 1
            },
            "fors": {},
            "namespaces": {
                "player.component.element": 1
            }
        },
        "src\\js\\player\\component\\metaScore.player.component.Block.js": {
            "name": "src\\js\\player\\component\\metaScore.player.component.Block.js",
            "modules": {},
            "classes": {
                "player.component.Block": 1
            },
            "fors": {},
            "namespaces": {
                "player.component": 1
            }
        },
        "src\\js\\player\\component\\metaScore.player.component.Controller.js": {
            "name": "src\\js\\player\\component\\metaScore.player.component.Controller.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "player.component": 1
            }
        },
        "src\\js\\player\\component\\metaScore.player.component.Element.js": {
            "name": "src\\js\\player\\component\\metaScore.player.component.Element.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "player.component": 1
            }
        },
        "src\\js\\player\\component\\metaScore.player.component.Media.js": {
            "name": "src\\js\\player\\component\\metaScore.player.component.Media.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "player.component": 1
            }
        },
        "src\\js\\player\\component\\metaScore.player.component.Page.js": {
            "name": "src\\js\\player\\component\\metaScore.player.component.Page.js",
            "modules": {},
            "classes": {
                "player.component.Controller": 1
            },
            "fors": {},
            "namespaces": {
                "player.component": 1
            }
        },
        "src\\js\\player\\metaScore.player.Component.js": {
            "name": "src\\js\\player\\metaScore.player.Component.js",
            "modules": {},
            "classes": {
                "player.Component": 1
            },
            "fors": {},
            "namespaces": {
                "player": 1
            }
        },
        "src\\js\\player\\metaScore.player.CuePoint.js": {
            "name": "src\\js\\player\\metaScore.player.CuePoint.js",
            "modules": {},
            "classes": {
                "CuePoint": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\js\\player\\metaScore.player.Pager.js": {
            "name": "src\\js\\player\\metaScore.player.Pager.js",
            "modules": {},
            "classes": {
                "player.Pager": 1
            },
            "fors": {},
            "namespaces": {
                "player": 1
            }
        },
        "src\\js\\metaScore.API.js": {
            "name": "src\\js\\metaScore.API.js",
            "modules": {},
            "classes": {
                "API": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\js\\metaScore.Class.js": {
            "name": "src\\js\\metaScore.Class.js",
            "modules": {},
            "classes": {
                "Class": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\js\\metaScore.Editor.js": {
            "name": "src\\js\\metaScore.Editor.js",
            "modules": {
                "Editor": 1
            },
            "classes": {
                "Editor": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\js\\metaScore.Evented.js": {
            "name": "src\\js\\metaScore.Evented.js",
            "modules": {},
            "classes": {
                "Evented": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\js\\metaScore.Player.js": {
            "name": "src\\js\\metaScore.Player.js",
            "modules": {
                "Player": 1
            },
            "classes": {
                "Player": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\js\\metaScore.core.js": {
            "name": "src\\js\\metaScore.core.js",
            "modules": {
                "Core": 1
            },
            "classes": {
                "metaScore": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\js\\metaScore.polyfill.js": {
            "name": "src\\js\\metaScore.polyfill.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "Core": {
            "name": "Core",
            "submodules": {},
            "classes": {
                "overlay.Alert": 1,
                "overlay.LoadMask": 1,
                "overlay.Toolbar": 1,
                "overlay.iFrame": 1,
                "Ajax": 1,
                "Array": 1,
                "Button": 1,
                "Clipboard": 1,
                "Color": 1,
                "ContextMenu": 1,
                "Dom": 1,
                "Draggable": 1,
                "Function": 1,
                "Locale": 1,
                "Number": 1,
                "Object": 1,
                "Overlay": 1,
                "Resizable": 1,
                "String": 1,
                "StyleSheet": 1,
                "Var": 1,
                "Class": 1,
                "Evented": 1,
                "metaScore": 1
            },
            "fors": {},
            "namespaces": {
                "overlay": 1
            },
            "tag": "module",
            "file": "src\\js\\metaScore.core.js",
            "line": 8,
            "description": "The Core module defines shared classes used in other modules",
            "itemtype": "main"
        },
        "Editor": {
            "name": "Editor",
            "submodules": {},
            "classes": {
                "editor.field.BorderRadius": 1,
                "editor.field.ButtonsField": 1,
                "editor.field.Checkbox": 1,
                "editor.field.CheckboxesField": 1,
                "editor.field.ColorField": 1,
                "editor.field.FileField": 1,
                "editor.field.ImageField": 1,
                "editor.field.NumberField": 1,
                "editor.field.SelectField": 1,
                "editor.field.TextField": 1,
                "editor.field.TextareaField": 1,
                "editor.field.TimeField": 1,
                "editor.overlay.BorderRadius": 1,
                "editor.overlay.ColorSelector": 1,
                "editor.overlay.GuideDetails": 1,
                "editor.overlay.GuideSelector": 1,
                "editor.overlay.Share": 1,
                "editor.panel.Block": 1,
                "editor.panel.Element": 1,
                "editor.panel.Page": 1,
                "editor.panel.Toolbar": 1,
                "editor.DropDownMenu": 1,
                "editor.Field": 1,
                "editor.Fieldset": 1,
                "editor.History": 1,
                "editor.MainMenu": 1,
                "editor.Panel": 1,
                "Editor": 1
            },
            "fors": {},
            "namespaces": {
                "editor.field": 1,
                "editor.overlay": 1,
                "editor.panel": 1,
                "editor": 1
            },
            "tag": "module",
            "file": "src\\js\\metaScore.Editor.js",
            "line": 10,
            "description": "The Editor module defines classes used in editor",
            "itemtype": "main"
        },
        "Player": {
            "name": "Player",
            "submodules": {},
            "classes": {
                "player.component.element.Cursor": 1,
                "player.component.Block": 1,
                "player.component.Controller": 1,
                "player.Component": 1,
                "CuePoint": 1,
                "player.Pager": 1,
                "API": 1,
                "Player": 1
            },
            "fors": {},
            "namespaces": {
                "player.component.element": 1,
                "player.component": 1,
                "player": 1
            },
            "tag": "module",
            "file": "src\\js\\metaScore.Player.js",
            "line": 81,
            "description": "The Player module defines classes used in player",
            "itemtype": "main"
        }
    },
    "classes": {
        "overlay.Alert": {
            "name": "overlay.Alert",
            "shortname": "overlay.Alert",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "overlay",
            "file": "src\\js\\core\\overlay\\metaScore.overlay.Alert.js",
            "line": 16,
            "description": "An alert overlay to show a simple message with buttons",
            "extends": "Overlay",
            "is_constructor": 1,
            "params": [
                {
                    "name": "configs",
                    "description": "Custom configs to override defaults",
                    "type": "Object",
                    "props": [
                        {
                            "name": "text",
                            "description": "The message's text",
                            "type": "String",
                            "optional": true,
                            "optdefault": "''"
                        },
                        {
                            "name": "buttons",
                            "description": "The list of buttons as action/label pairs",
                            "type": "Array",
                            "optional": true,
                            "optdefault": "{}"
                        }
                    ]
                }
            ]
        },
        "overlay.LoadMask": {
            "name": "overlay.LoadMask",
            "shortname": "overlay.LoadMask",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "overlay",
            "file": "src\\js\\core\\overlay\\metaScore.overlay.LoadMask.js",
            "line": 7,
            "description": "A loading mask",
            "extends": "Overlay",
            "is_constructor": 1,
            "params": [
                {
                    "name": "configs",
                    "description": "Custom configs to override defaults",
                    "type": "Object",
                    "props": [
                        {
                            "name": "text",
                            "description": "The text to display",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'Loading...'"
                        }
                    ]
                }
            ]
        },
        "overlay.Toolbar": {
            "name": "overlay.Toolbar",
            "shortname": "overlay.Toolbar",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "overlay",
            "file": "src\\js\\core\\overlay\\metaScore.overlay.Toolbar.js",
            "line": 7,
            "description": "A title toolbar for overlay's",
            "extends": "Dom",
            "is_constructor": 1,
            "params": [
                {
                    "name": "configs",
                    "description": "Custom configs to override defaults",
                    "type": "Object",
                    "props": [
                        {
                            "name": "title",
                            "description": "The text to display as a title",
                            "type": "String",
                            "optional": true,
                            "optdefault": "null"
                        }
                    ]
                }
            ]
        },
        "overlay.iFrame": {
            "name": "overlay.iFrame",
            "shortname": "overlay.iFrame",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "overlay",
            "file": "src\\js\\core\\overlay\\metaScore.overlay.iFrame.js",
            "line": 8,
            "description": "An iframe overlay",
            "extends": "Overlay",
            "is_constructor": 1,
            "params": [
                {
                    "name": "configs",
                    "description": "Custom configs to override defaults",
                    "type": "Object",
                    "props": [
                        {
                            "name": "toolbar",
                            "description": "Whether to show a toolbar with a title and close button",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "url",
                            "description": "The iframe's url",
                            "type": "String",
                            "optional": true,
                            "optdefault": "null"
                        }
                    ]
                }
            ]
        },
        "Ajax": {
            "name": "Ajax",
            "shortname": "Ajax",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "",
            "file": "src\\js\\core\\metaScore.Ajax.js",
            "line": 7,
            "description": "A class to handle AJAX requests",
            "is_constructor": 1
        },
        "Array": {
            "name": "Array",
            "shortname": "Array",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "",
            "file": "src\\js\\core\\metaScore.Array.js",
            "line": 7,
            "description": "A class for array helper functions",
            "is_constructor": 1
        },
        "Button": {
            "name": "Button",
            "shortname": "Button",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "",
            "file": "src\\js\\core\\metaScore.Button.js",
            "line": 7,
            "description": "A simple button based on an HTML button element",
            "extends": "Dom",
            "is_constructor": 1,
            "params": [
                {
                    "name": "configs",
                    "description": "Custom configs to override defaults",
                    "type": "Object",
                    "props": [
                        {
                            "name": "label",
                            "description": "A text to add as a label",
                            "type": "String",
                            "optional": true,
                            "optdefault": "null"
                        }
                    ]
                }
            ]
        },
        "Clipboard": {
            "name": "Clipboard",
            "shortname": "Clipboard",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "",
            "file": "src\\js\\core\\metaScore.Clipboard.js",
            "line": 7,
            "description": "A class to handle clipboard data",
            "extends": "Evented",
            "is_constructor": 1
        },
        "Color": {
            "name": "Color",
            "shortname": "Color",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "",
            "file": "src\\js\\core\\metaScore.Color.js",
            "line": 7,
            "description": "A class for color helper functions",
            "is_constructor": 1
        },
        "ContextMenu": {
            "name": "ContextMenu",
            "shortname": "ContextMenu",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "",
            "file": "src\\js\\core\\metaScore.ContextMenu.js",
            "line": 24,
            "description": "A class for creating context menus",
            "extends": "Dom",
            "is_constructor": 1,
            "params": [
                {
                    "name": "configs",
                    "description": "Custom configs to override defaults",
                    "type": "Object",
                    "props": [
                        {
                            "name": "target",
                            "description": "The HTMLElement, Dom instance, or CSS selector to which the context menu is attached",
                            "type": "Mixed",
                            "optional": true,
                            "optdefault": "'body'"
                        },
                        {
                            "name": "items",
                            "description": "The list of items and subitems",
                            "type": "Mixed",
                            "optional": true,
                            "optdefault": "{}"
                        }
                    ]
                }
            ]
        },
        "Dom": {
            "name": "Dom",
            "shortname": "Dom",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "",
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 22,
            "description": "A class for Dom manipulation",
            "extends": "Class",
            "is_constructor": 1,
            "params": [
                {
                    "name": "args",
                    "description": "An HTML string and an optional list of attributes to apply, or a CSS selector with an optional parent and an optional list of attributes to apply",
                    "type": "Mixed",
                    "optional": true,
                    "multiple": true
                }
            ],
            "example": [
                "\n    var div = new metaScore.Dom('<div/>', {'class': 'my-class'});\n    var body = new metaScore.Dom('body');"
            ]
        },
        "Draggable": {
            "name": "Draggable",
            "shortname": "Draggable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "",
            "file": "src\\js\\core\\metaScore.Draggable.js",
            "line": 36,
            "description": "A class for adding draggable behaviors",
            "extends": "Class",
            "is_constructor": 1,
            "params": [
                {
                    "name": "configs",
                    "description": "Custom configs to override defaults",
                    "type": "Object",
                    "props": [
                        {
                            "name": "target",
                            "description": "The Dom object to add the behavior to",
                            "type": "Dom"
                        },
                        {
                            "name": "handle",
                            "description": "The Dom object to use as a dragging handle",
                            "type": "Dom"
                        },
                        {
                            "name": "limits",
                            "description": "The limits of the dragging",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "{'top': null, 'left': null}"
                        }
                    ]
                }
            ]
        },
        "Function": {
            "name": "Function",
            "shortname": "Function",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "",
            "file": "src\\js\\core\\metaScore.Function.js",
            "line": 7,
            "description": "A class for function helper functions",
            "is_constructor": 1
        },
        "Locale": {
            "name": "Locale",
            "shortname": "Locale",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "",
            "file": "src\\js\\core\\metaScore.Locale.js",
            "line": 7,
            "description": "The i18n handling class",
            "is_constructor": 1
        },
        "Number": {
            "name": "Number",
            "shortname": "Number",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "",
            "file": "src\\js\\core\\metaScore.Number.js",
            "line": 7,
            "description": "A class for number helper functions",
            "is_constructor": 1
        },
        "Object": {
            "name": "Object",
            "shortname": "Object",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "",
            "file": "src\\js\\core\\metaScore.Object.js",
            "line": 7,
            "description": "A class for object helper functions",
            "is_constructor": 1
        },
        "Overlay": {
            "name": "Overlay",
            "shortname": "Overlay",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "",
            "file": "src\\js\\core\\metaScore.Overlay.js",
            "line": 23,
            "description": "A generic overlay class",
            "extends": "Dom",
            "is_constructor": 1,
            "params": [
                {
                    "name": "configs",
                    "description": "Custom configs to override defaults",
                    "type": "Object",
                    "props": [
                        {
                            "name": "parent",
                            "description": "The parent element in which the overlay will be appended",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'body'"
                        },
                        {
                            "name": "modal",
                            "description": "Whether to create a mask underneath that covers its parent and does not allow the user to interact with any other Components until this is dismissed",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "autoShow",
                            "description": "Whether to show the overlay automatically",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "toolbar",
                            "description": "Whether to add a toolbar with title and close button",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "title",
                            "description": "The overlay's title",
                            "type": "String",
                            "optional": true,
                            "optdefault": "''"
                        }
                    ]
                }
            ]
        },
        "Resizable": {
            "name": "Resizable",
            "shortname": "Resizable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "",
            "file": "src\\js\\core\\metaScore.Resizable.js",
            "line": 28,
            "description": "A class for adding resizable behaviors",
            "extends": "Class",
            "is_constructor": 1,
            "params": [
                {
                    "name": "configs",
                    "description": "Custom configs to override defaults",
                    "type": "Object",
                    "props": [
                        {
                            "name": "target",
                            "description": "The Dom object to add the behavior to",
                            "type": "Dom"
                        },
                        {
                            "name": "directions",
                            "description": "The directions at which a resize is allowed",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "{'top', 'right', 'bottom', 'left', 'top-left', 'top-right', 'bottom-left', 'bottom-right'}"
                        }
                    ]
                }
            ]
        },
        "String": {
            "name": "String",
            "shortname": "String",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "",
            "file": "src\\js\\core\\metaScore.String.js",
            "line": 7,
            "description": "A class for string helper functions",
            "is_constructor": 1
        },
        "StyleSheet": {
            "name": "StyleSheet",
            "shortname": "StyleSheet",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "",
            "file": "src\\js\\core\\metaScore.StyleSheet.js",
            "line": 7,
            "description": "A class for CSS style sheet manipulation",
            "extends": "Dom",
            "is_constructor": 1
        },
        "Var": {
            "name": "Var",
            "shortname": "Var",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "",
            "file": "src\\js\\core\\metaScore.Var.js",
            "line": 7,
            "description": "A class for variable helper functions",
            "is_constructor": 1
        },
        "editor.field.BorderRadius": {
            "name": "editor.field.BorderRadius",
            "shortname": "editor.field.BorderRadius",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Editor",
            "namespace": "editor.field",
            "file": "src\\js\\editor\\field\\metaScore.editor.field.BorderRadius.js",
            "line": 7,
            "description": "A complex field for defining CSS border radius values",
            "extends": "editor.Field",
            "is_constructor": 1,
            "params": [
                {
                    "name": "configs",
                    "description": "Custom configs to override defaults",
                    "type": "Object"
                }
            ]
        },
        "editor.field.ButtonsField": {
            "name": "editor.field.ButtonsField",
            "shortname": "editor.field.ButtonsField",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Editor",
            "namespace": "editor.field",
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Buttons.js",
            "line": 16,
            "description": "A simple buttons field based on HTML button elements",
            "extends": "editor.Field",
            "is_constructor": 1,
            "params": [
                {
                    "name": "configs",
                    "description": "Custom configs to override defaults",
                    "type": "Object",
                    "props": [
                        {
                            "name": "buttons",
                            "description": "The list of buttons as name/attributes pairs",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "{}}"
                        }
                    ]
                }
            ]
        },
        "editor.field.Checkbox": {
            "name": "editor.field.Checkbox",
            "shortname": "editor.field.Checkbox",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Editor",
            "namespace": "editor.field",
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Checkbox.js",
            "line": 16,
            "description": "A checkbox field based on an HTML input[type=checkbox] element",
            "extends": "editor.Field",
            "is_constructor": 1,
            "params": [
                {
                    "name": "configs",
                    "description": "Custom configs to override defaults",
                    "type": "Object",
                    "props": [
                        {
                            "name": "checked",
                            "description": "Whether the field is checked by default",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "checked_value",
                            "description": "The value when checked",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "unchecked_value",
                            "description": "The value when unchecked",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ]
        },
        "editor.field.CheckboxesField": {
            "name": "editor.field.CheckboxesField",
            "shortname": "editor.field.CheckboxesField",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Editor",
            "namespace": "editor.field",
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Checkboxes.js",
            "line": 16,
            "description": "A select list field based on an HTML select element",
            "extends": "editor.Field",
            "is_constructor": 1,
            "params": [
                {
                    "name": "configs",
                    "description": "Custom configs to override defaults",
                    "type": "Object",
                    "props": [
                        {
                            "name": "options",
                            "description": "A list of select options as objects with 'value' and 'text' keys",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "[]"
                        }
                    ]
                }
            ]
        },
        "editor.field.ColorField": {
            "name": "editor.field.ColorField",
            "shortname": "editor.field.ColorField",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Editor",
            "namespace": "editor.field",
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Color.js",
            "line": 16,
            "description": "A color selection field",
            "extends": "editor.Field",
            "is_constructor": 1,
            "params": [
                {
                    "name": "configs",
                    "description": "Custom configs to override defaults",
                    "type": "Object",
                    "props": [
                        {
                            "name": "value",
                            "description": "The default value (see {{#crossLink \"Color/parse:method\"}}Color.parse{{/crossLink}} for valid values)",
                            "type": "Mixed",
                            "optional": true,
                            "optdefault": "{r:255, g:255, b:255, a:1}}"
                        }
                    ]
                }
            ]
        },
        "editor.field.FileField": {
            "name": "editor.field.FileField",
            "shortname": "editor.field.FileField",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Editor",
            "namespace": "editor.field",
            "file": "src\\js\\editor\\field\\metaScore.editor.field.File.js",
            "line": 7,
            "description": "A file field based on an HTML input[type=file] element",
            "extends": "editor.Field",
            "is_constructor": 1,
            "params": [
                {
                    "name": "configs",
                    "description": "Custom configs to override defaults",
                    "type": "Object",
                    "props": [
                        {
                            "name": "accept",
                            "description": "The list of accepted file types (see {{#crossLink \"editor.field.FileField/setAcceptedTypes:method\"}}{{/crossLink}})",
                            "type": "String",
                            "optional": true,
                            "optdefault": "null"
                        }
                    ]
                }
            ]
        },
        "editor.field.ImageField": {
            "name": "editor.field.ImageField",
            "shortname": "editor.field.ImageField",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Editor",
            "namespace": "editor.field",
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Image.js",
            "line": 24,
            "description": "An image field wich depends on an external file browser to function",
            "extends": "editor.Field",
            "is_constructor": 1,
            "params": [
                {
                    "name": "configs",
                    "description": "Custom configs to override defaults",
                    "type": "Object",
                    "props": [
                        {
                            "name": "placeholder",
                            "description": "A placeholder text",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"Browse...\""
                        },
                        {
                            "name": "resizeButton",
                            "description": "Whether to show the resize button",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ]
        },
        "editor.field.NumberField": {
            "name": "editor.field.NumberField",
            "shortname": "editor.field.NumberField",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Editor",
            "namespace": "editor.field",
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Number.js",
            "line": 16,
            "description": "A number field based on an HTML input[type=number] element",
            "extends": "editor.Field",
            "is_constructor": 1,
            "params": [
                {
                    "name": "configs",
                    "description": "Custom configs to override defaults",
                    "type": "Object",
                    "props": [
                        {
                            "name": "value",
                            "description": "The default value",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "min",
                            "description": "The minimum allowed value",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "max",
                            "description": "The maximum allowed value",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "step",
                            "description": "The spin up/down step amount",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "spinButtons",
                            "description": "Whether to show the spin buttons",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "spinInterval",
                            "description": "The speed of the spin buttons",
                            "type": "Integer",
                            "optional": true,
                            "optdefault": "200"
                        },
                        {
                            "name": "spinDirection",
                            "description": "The direction of the spin buttons",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'horizontal'"
                        },
                        {
                            "name": "flipSpinButtons",
                            "description": "Whether to flip the spin buttons",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ]
        },
        "editor.field.SelectField": {
            "name": "editor.field.SelectField",
            "shortname": "editor.field.SelectField",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Editor",
            "namespace": "editor.field",
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Select.js",
            "line": 16,
            "description": "A select list field based on an HTML select element",
            "extends": "editor.Field",
            "is_constructor": 1,
            "params": [
                {
                    "name": "configs",
                    "description": "Custom configs to override defaults",
                    "type": "Object",
                    "props": [
                        {
                            "name": "options",
                            "description": "A list of select options as objects with 'value' and 'text' keys",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "[]"
                        },
                        {
                            "name": "multiple",
                            "description": "Whether multiple options can be selected at once",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ]
        },
        "editor.field.TextField": {
            "name": "editor.field.TextField",
            "shortname": "editor.field.TextField",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Editor",
            "namespace": "editor.field",
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Text.js",
            "line": 7,
            "description": "A single-line text field based on an HTML input[type=text] element",
            "extends": "editor.Field",
            "is_constructor": 1,
            "params": [
                {
                    "name": "configs",
                    "description": "Custom configs to override defaults",
                    "type": "Object",
                    "props": [
                        {
                            "name": "value",
                            "description": "The default value",
                            "type": "String",
                            "optional": true,
                            "optdefault": "''"
                        }
                    ]
                }
            ]
        },
        "editor.field.TextareaField": {
            "name": "editor.field.TextareaField",
            "shortname": "editor.field.TextareaField",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Editor",
            "namespace": "editor.field",
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Textarea.js",
            "line": 7,
            "description": "A multi-line text field based on an HTML textarea element",
            "extends": "editor.Field",
            "is_constructor": 1,
            "params": [
                {
                    "name": "configs",
                    "description": "Custom configs to override defaults",
                    "type": "Object",
                    "props": [
                        {
                            "name": "value",
                            "description": "The default value",
                            "type": "String",
                            "optional": true,
                            "optdefault": "''"
                        }
                    ]
                }
            ]
        },
        "editor.field.TimeField": {
            "name": "editor.field.TimeField",
            "shortname": "editor.field.TimeField",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Editor",
            "namespace": "editor.field",
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Time.js",
            "line": 37,
            "description": "A time field for entering time values in hours:minutes:seconds:centiseconds format with optional in/out buttons",
            "extends": "editor.Field",
            "is_constructor": 1,
            "params": [
                {
                    "name": "configs",
                    "description": "Custom configs to override defaults",
                    "type": "Object",
                    "props": [
                        {
                            "name": "value",
                            "description": "The default value",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "min",
                            "description": "The minimum allowed value",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "max",
                            "description": "The maximum allowed value",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "checkbox",
                            "description": "Whether to show the enable/disable checkbox",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "inButton",
                            "description": "Whether to show the in button",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "outButton",
                            "description": "Whether to show the out button",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ]
        },
        "editor.overlay.BorderRadius": {
            "name": "editor.overlay.BorderRadius",
            "shortname": "editor.overlay.BorderRadius",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Editor",
            "namespace": "editor.overlay",
            "file": "src\\js\\editor\\overlay\\metaScore.editor.overlay.BorderRadius.js",
            "line": 16,
            "description": "An overlay that simplifies the creation of a CSS border-radius value",
            "extends": "Overlay",
            "is_constructor": 1,
            "params": [
                {
                    "name": "configs",
                    "description": "Custom configs to override defaults",
                    "type": "Object",
                    "props": [
                        {
                            "name": "parent",
                            "description": "The parent element in which the overlay will be appended",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'.metaScore-editor'"
                        },
                        {
                            "name": "toolbar",
                            "description": "Whether to show a toolbar with a title and close button",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "title",
                            "description": "The overlay's title",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'Border Radius'"
                        }
                    ]
                }
            ]
        },
        "editor.overlay.ColorSelector": {
            "name": "editor.overlay.ColorSelector",
            "shortname": "editor.overlay.ColorSelector",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Editor",
            "namespace": "editor.overlay",
            "file": "src\\js\\editor\\overlay\\metaScore.editor.overlay.ColorSelector.js",
            "line": 16,
            "description": "An overlay to select an RGBA color",
            "extends": "Overlay",
            "is_constructor": 1,
            "params": [
                {
                    "name": "configs",
                    "description": "Custom configs to override defaults",
                    "type": "Object",
                    "props": [
                        {
                            "name": "parent",
                            "description": "The parent element in which the overlay will be appended",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'.metaScore-editor'"
                        }
                    ]
                }
            ]
        },
        "editor.overlay.GuideDetails": {
            "name": "editor.overlay.GuideDetails",
            "shortname": "editor.overlay.GuideDetails",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Editor",
            "namespace": "editor.overlay",
            "file": "src\\js\\editor\\overlay\\metaScore.editor.overlay.GuideDetails.js",
            "line": 16,
            "description": "An overlay to update a guide's details (title, description, thumbnail, etc)",
            "extends": "Overlay",
            "is_constructor": 1,
            "params": [
                {
                    "name": "configs",
                    "description": "Custom configs to override defaults",
                    "type": "Object",
                    "props": [
                        {
                            "name": "parent",
                            "description": "The parent element in which the overlay will be appended",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'.metaScore-editor'"
                        },
                        {
                            "name": "toolbar",
                            "description": "Whether to show a toolbar with a title and close button",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "title",
                            "description": "The overlay's title",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'Guide Info'"
                        },
                        {
                            "name": "groups",
                            "description": "The groups the user belongs to",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "{}"
                        },
                        {
                            "name": "submit_text",
                            "description": "The overlay's submit button label",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'Save'"
                        }
                    ]
                }
            ]
        },
        "editor.overlay.GuideSelector": {
            "name": "editor.overlay.GuideSelector",
            "shortname": "editor.overlay.GuideSelector",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Editor",
            "namespace": "editor.overlay",
            "file": "src\\js\\editor\\overlay\\metaScore.editor.overlay.GuideSelector.js",
            "line": 17,
            "description": "A guide selector overlay",
            "extends": "Overlay",
            "is_constructor": 1,
            "params": [
                {
                    "name": "configs",
                    "description": "Custom configs to override defaults",
                    "type": "Object",
                    "props": [
                        {
                            "name": "parent",
                            "description": "The parent element in which the overlay will be appended",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'.metaScore-editor'"
                        },
                        {
                            "name": "toolbar",
                            "description": "Whether to show a toolbar with a title and close button",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "title",
                            "description": "The overlay's title",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'Select a guide'"
                        },
                        {
                            "name": "empty_text",
                            "description": "A text to show when no guides are available",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'No guides available'"
                        },
                        {
                            "name": "url",
                            "description": "The url from which to retreive the list of guides",
                            "type": "String",
                            "optional": true,
                            "optdefault": "''"
                        }
                    ]
                }
            ]
        },
        "editor.overlay.Share": {
            "name": "editor.overlay.Share",
            "shortname": "editor.overlay.Share",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Editor",
            "namespace": "editor.overlay",
            "file": "src\\js\\editor\\overlay\\metaScore.editor.overlay.Share.js",
            "line": 7,
            "description": "An overlay to share a guide",
            "extends": "Overlay",
            "is_constructor": 1,
            "params": [
                {
                    "name": "configs",
                    "description": "Custom configs to override defaults",
                    "type": "Object",
                    "props": [
                        {
                            "name": "parent",
                            "description": "The parent element in which the overlay will be appended",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'.metaScore-editor'"
                        },
                        {
                            "name": "toolbar",
                            "description": "Whether to show a toolbar with a title and close button",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "title",
                            "description": "The overlay's title",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'Guide Info'"
                        },
                        {
                            "name": "url",
                            "description": "The player's url",
                            "type": "String",
                            "optional": true,
                            "optdefault": "''"
                        },
                        {
                            "name": "api_help_url",
                            "description": "The player's api help url",
                            "type": "String",
                            "optional": true,
                            "optdefault": "''"
                        }
                    ]
                }
            ]
        },
        "editor.panel.Block": {
            "name": "editor.panel.Block",
            "shortname": "editor.panel.Block",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Editor",
            "namespace": "editor.panel",
            "file": "src\\js\\editor\\panel\\metaScore.editor.panel.Block.js",
            "line": 7,
            "description": "A panel for {{#crossLink \"player.component.Block\"}}{{/crossLink}} components",
            "extends": "editor.Panel",
            "is_constructor": 1,
            "params": [
                {
                    "name": "configs",
                    "description": "Custom configs to override defaults",
                    "type": "Object",
                    "props": [
                        {
                            "name": "toolbarConfigs",
                            "description": "Configs to pass to the toolbar (see {{#crossLink \"editor.panel.Toolbar\"}}{{/crossLink}})",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "{'title':'Block', 'menuItems': {...}}"
                        }
                    ]
                }
            ]
        },
        "editor.panel.Element": {
            "name": "editor.panel.Element",
            "shortname": "editor.panel.Element",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Editor",
            "namespace": "editor.panel",
            "file": "src\\js\\editor\\panel\\metaScore.editor.panel.Element.js",
            "line": 23,
            "description": "A panel for {{#crossLink \"player.component.Element\"}}{{/crossLink}} components",
            "extends": "editor.Panel",
            "is_constructor": 1,
            "params": [
                {
                    "name": "configs",
                    "description": "Custom configs to override defaults",
                    "type": "Object",
                    "props": [
                        {
                            "name": "toolbarConfigs",
                            "description": "Configs to pass to the toolbar (see {{#crossLink \"editor.panel.Toolbar\"}}{{/crossLink}})",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "{'title':'Element', 'menuItems': {...}}"
                        }
                    ]
                }
            ]
        },
        "editor.panel.Page": {
            "name": "editor.panel.Page",
            "shortname": "editor.panel.Page",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Editor",
            "namespace": "editor.panel",
            "file": "src\\js\\editor\\panel\\metaScore.editor.panel.Page.js",
            "line": 7,
            "description": "A panel for {{#crossLink \"player.component.Page\"}}{{/crossLink}} components",
            "extends": "editor.Panel",
            "is_constructor": 1,
            "params": [
                {
                    "name": "configs",
                    "description": "Custom configs to override defaults",
                    "type": "Object",
                    "props": [
                        {
                            "name": "toolbarConfigs",
                            "description": "Configs to pass to the toolbar (see {{#crossLink \"editor.panel.Toolbar\"}}{{/crossLink}})",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "{'title':'Page', 'menuItems': {...}}"
                        }
                    ]
                }
            ]
        },
        "editor.panel.Toolbar": {
            "name": "editor.panel.Toolbar",
            "shortname": "editor.panel.Toolbar",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Editor",
            "namespace": "editor.panel",
            "file": "src\\js\\editor\\panel\\metaScore.editor.panel.Toolbar.js",
            "line": 7,
            "description": "A title toolbar for panel's",
            "extends": "Dom",
            "is_constructor": 1,
            "params": [
                {
                    "name": "configs",
                    "description": "Custom configs to override defaults",
                    "type": "Object",
                    "props": [
                        {
                            "name": "title",
                            "description": "The text to display as a title",
                            "type": "String",
                            "optional": true,
                            "optdefault": "''"
                        },
                        {
                            "name": "buttons",
                            "description": "The buttons to display",
                            "type": "Array",
                            "optional": true,
                            "optdefault": "['previous', 'next']"
                        },
                        {
                            "name": "selector",
                            "description": "Whether to display a selector",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "menuItems",
                            "description": "A list of dropdown menu items to display",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "{}}"
                        }
                    ]
                }
            ]
        },
        "editor.DropDownMenu": {
            "name": "editor.DropDownMenu",
            "shortname": "editor.DropDownMenu",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Editor",
            "namespace": "editor",
            "file": "src\\js\\editor\\metaScore.editor.DropDownMenu.js",
            "line": 7,
            "description": "A dropdown menu based on an HTML ul element",
            "extends": "Dom",
            "is_constructor": 1
        },
        "editor.Field": {
            "name": "editor.Field",
            "shortname": "editor.Field",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Editor",
            "namespace": "editor",
            "file": "src\\js\\editor\\metaScore.editor.Field.js",
            "line": 24,
            "description": "A generic field based on an HTML input element",
            "extends": "Dom",
            "is_constructor": 1,
            "params": [
                {
                    "name": "configs",
                    "description": "Custom configs to override defaults",
                    "type": "Object",
                    "props": [
                        {
                            "name": "value",
                            "description": "The default value",
                            "type": "Mixed",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "required",
                            "description": "Whether the field is required",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "disabled",
                            "description": "Whether the field is disabled by default",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "readonly",
                            "description": "Whether the field is readonly by default",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "description",
                            "description": "A description to add to the field",
                            "type": "String",
                            "optional": true,
                            "optdefault": "''"
                        }
                    ]
                }
            ]
        },
        "editor.Fieldset": {
            "name": "editor.Fieldset",
            "shortname": "editor.Fieldset",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Editor",
            "namespace": "editor",
            "file": "src\\js\\editor\\metaScore.editor.Fieldset.js",
            "line": 7,
            "description": "A collapsible fieldset",
            "todo": [
                "replace with the HTML5 details tag when support reaches IE"
            ],
            "extends": "Dom",
            "is_constructor": 1,
            "params": [
                {
                    "name": "configs",
                    "description": "Custom configs to override defaults",
                    "type": "Object",
                    "props": [
                        {
                            "name": "legend_text",
                            "description": "The text to use for the fieldset's legend",
                            "type": "String",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "collapsible",
                            "description": "Whether or not the fieldset can be collapsed",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "collapsed",
                            "description": "Whether or not the fieldset is collapsed by default",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ]
        },
        "editor.History": {
            "name": "editor.History",
            "shortname": "editor.History",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Editor",
            "namespace": "editor",
            "file": "src\\js\\editor\\metaScore.editor.History.js",
            "line": 38,
            "description": "An undo/redo manager",
            "extends": "Evented",
            "is_constructor": 1,
            "params": [
                {
                    "name": "configs",
                    "description": "Custom configs to override defaults",
                    "type": "Object",
                    "props": [
                        {
                            "name": "max_commands",
                            "description": "The max number of commands to store",
                            "type": "Integer",
                            "optional": true,
                            "optdefault": "30"
                        }
                    ]
                }
            ]
        },
        "editor.MainMenu": {
            "name": "editor.MainMenu",
            "shortname": "editor.MainMenu",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Editor",
            "namespace": "editor",
            "file": "src\\js\\editor\\metaScore.editor.MainMenu.js",
            "line": 7,
            "description": "The editor's main menu",
            "extends": "Dom",
            "is_constructor": 1
        },
        "editor.Panel": {
            "name": "editor.Panel",
            "shortname": "editor.Panel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Editor",
            "namespace": "editor",
            "file": "src\\js\\editor\\metaScore.editor.Panel.js",
            "line": 49,
            "description": "A generic panel class",
            "extends": "Dom",
            "is_constructor": 1,
            "params": [
                {
                    "name": "configs",
                    "description": "Custom configs to override defaults",
                    "type": "Object",
                    "props": [
                        {
                            "name": "toolbarConfigs",
                            "description": "Configs to pass to the toolbar (see {{#crossLink \"editor.panel.Toolbar\"}}{{/crossLink}})",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "{}"
                        }
                    ]
                }
            ]
        },
        "player.component.element.Cursor": {
            "name": "player.component.element.Cursor",
            "shortname": "player.component.element.Cursor",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Player",
            "namespace": "player.component.element",
            "file": "src\\js\\player\\component\\element\\metaScore.player.component.element.Text.js",
            "line": 28,
            "description": "A text element",
            "extends": "player.component.Element",
            "is_constructor": 1,
            "params": [
                {
                    "name": "configs",
                    "description": "Custom configs to override defaults",
                    "type": "Object"
                },
                {
                    "name": "[configs.properties={...}}",
                    "description": "A list of the component properties as name/descriptor pairs",
                    "type": "Object"
                }
            ]
        },
        "player.component.Block": {
            "name": "player.component.Block",
            "shortname": "player.component.Block",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Player",
            "namespace": "player.component",
            "file": "src\\js\\player\\component\\metaScore.player.component.Block.js",
            "line": 35,
            "description": "A block component",
            "extends": "player.Component",
            "is_constructor": 1,
            "params": [
                {
                    "name": "configs",
                    "description": "Custom configs to override defaults",
                    "type": "Object"
                },
                {
                    "name": "[configs.properties={...}}",
                    "description": "A list of the component properties as name/descriptor pairs",
                    "type": "Object"
                }
            ]
        },
        "player.component.Controller": {
            "name": "player.component.Controller",
            "shortname": "player.component.Controller",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Player",
            "namespace": "player.component",
            "file": "src\\js\\player\\component\\metaScore.player.component.Page.js",
            "line": 30,
            "description": "A page component",
            "extends": "player.Component",
            "is_constructor": 1,
            "params": [
                {
                    "name": "configs",
                    "description": "Custom configs to override defaults",
                    "type": "Object"
                },
                {
                    "name": "[configs.properties={...}}",
                    "description": "A list of the component properties as name/descriptor pairs",
                    "type": "Object"
                }
            ]
        },
        "player.Component": {
            "name": "player.Component",
            "shortname": "player.Component",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Player",
            "namespace": "player",
            "file": "src\\js\\player\\metaScore.player.Component.js",
            "line": 17,
            "description": "A generic component class",
            "extends": "Dom",
            "is_constructor": 1,
            "params": [
                {
                    "name": "configs",
                    "description": "Custom configs to override defaults",
                    "type": "Object"
                },
                {
                    "name": "[configs.container=null",
                    "description": "The Dom instance to which the component should be appended",
                    "type": "String"
                },
                {
                    "name": "[configs.index=null",
                    "description": "The index position at which the component should be appended",
                    "type": "Integer"
                },
                {
                    "name": "[configs.properties={}}",
                    "description": "A list of the component properties as name/descriptor pairs",
                    "type": "Object"
                }
            ]
        },
        "CuePoint": {
            "name": "CuePoint",
            "shortname": "CuePoint",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Player",
            "namespace": "",
            "file": "src\\js\\player\\metaScore.player.CuePoint.js",
            "line": 35,
            "description": "A class for managing media cuepoints to execute actions at specific media times",
            "namepsace": "player",
            "extends": "Evented",
            "is_constructor": 1,
            "params": [
                {
                    "name": "configs",
                    "description": "Custom configs to override defaults",
                    "type": "Object",
                    "props": [
                        {
                            "name": "media",
                            "description": "The media component to which the cuepoint is attached",
                            "type": "player.component.Media"
                        },
                        {
                            "name": "inTime",
                            "description": "The time at which the cuepoint starts",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "outTime",
                            "description": "The time at which the cuepoint stops",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "considerError",
                            "description": "Whether to estimate and use the error margin in timed events",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "player.Pager": {
            "name": "player.Pager",
            "shortname": "player.Pager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Player",
            "namespace": "player",
            "file": "src\\js\\player\\metaScore.player.Pager.js",
            "line": 7,
            "description": "A pager for block components",
            "extends": "Dom",
            "is_constructor": 1
        },
        "API": {
            "name": "API",
            "shortname": "API",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Player",
            "namespace": "",
            "file": "src\\js\\metaScore.API.js",
            "line": 16,
            "description": "The player API class <br/>\n<b>A signleton is made available in the global context under metaScoreAPI</b> <br/>\nHTML links that follow the following format are automatically parsed:\n\n        <a href=\"#{action(s)}\" rel=\"metascore\" data-guide=\"{player's iframe id}\">{link text}</a>\n\nAn action can take arguments in the form of action=arg1,arg2,.. <br/>\nMultiple actions can be specified seperated by &\n\nExamples:\n\n        <a href=\"#play\" rel=\"metascore\" data-guide=\"guide-93\">PLAY</a>\n        <a href=\"#play=20,500,2\" rel=\"metascore\" data-guide=\"guide-93\">PLAY EXTRACT</a>\n        <a href=\"#pause\" rel=\"metascore\" data-guide=\"guide-93\">PAUSE</a>\n        <a href=\"#seek=500\" rel=\"metascore\" data-guide=\"guide-93\">SEEL TO 500 SECONDS</a>\n        <a href=\"#page=permanentText,3\" rel=\"metascore\" data-guide=\"guide-93\">GOT TO PAGE 3 OF THE PERMANENTTEXT BLOCK</a>\n        <a href=\"#rindex=2\" rel=\"metascore\" data-guide=\"guide-93\">SET THE READING INDEX TO 2</a>\n        <a href=\"#page=permanentText,3&rindex=2&seek=500\" rel=\"metascore\" data-guide=\"guide-93\">GOT TO PAGE 3 OF THE PERMANENTTEXT BLOCK AND SET THE READING INDEX TO 2 AND SEEK TO 500 SECONDS</a>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "target",
                    "description": "The player's iframe to control",
                    "type": "HTMLIFrameElement"
                },
                {
                    "name": "callback",
                    "description": "A callback called once the API is ready",
                    "type": "Function",
                    "props": [
                        {
                            "name": "api",
                            "description": "The API instance",
                            "type": "API"
                        }
                    ]
                }
            ]
        },
        "Class": {
            "name": "Class",
            "shortname": "Class",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "",
            "file": "src\\js\\metaScore.Class.js",
            "line": 7,
            "description": "The base class <br/>\nImplements a class extension mechanism and defines shared methods",
            "is_constructor": 1
        },
        "Editor": {
            "name": "Editor",
            "shortname": "Editor",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Editor",
            "namespace": "",
            "file": "src\\js\\metaScore.Editor.js",
            "line": 10,
            "description": "Provides the main Editor class",
            "extends": "Dom",
            "is_constructor": 1,
            "params": [
                {
                    "name": "configs",
                    "description": "Custom configs to override defaults",
                    "type": "Object",
                    "props": [
                        {
                            "name": "container",
                            "description": "The HTMLElement, Dom instance, or CSS selector to which the editor should be appended",
                            "type": "Mixed",
                            "optional": true,
                            "optdefault": "'body'"
                        },
                        {
                            "name": "player_url",
                            "description": "The base URL of players",
                            "type": "String",
                            "optional": true,
                            "optdefault": "''"
                        },
                        {
                            "name": "api_url",
                            "description": "The base URL of the RESTful API",
                            "type": "String",
                            "optional": true,
                            "optdefault": "''"
                        },
                        {
                            "name": "help_url",
                            "description": "The base URL of the RESTful API",
                            "type": "String",
                            "optional": true,
                            "optdefault": "''"
                        },
                        {
                            "name": "player_api_help_url",
                            "description": "The URL of the player API help page",
                            "type": "String",
                            "optional": true,
                            "optdefault": "''"
                        },
                        {
                            "name": "account_url",
                            "description": "The URL of the user account page",
                            "type": "String",
                            "optional": true,
                            "optdefault": "''"
                        },
                        {
                            "name": "logout_url",
                            "description": "The URL of the user logout page",
                            "type": "String",
                            "optional": true,
                            "optdefault": "''"
                        },
                        {
                            "name": "user_groups",
                            "description": "The groups the user belongs to",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "{}"
                        },
                        {
                            "name": "ajax",
                            "description": "Custom options to send with each AJAX request. See {{#crossLink \"Ajax/send:method\"}}Ajax.send{{/crossLink}} for available options",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "{}"
                        }
                    ]
                }
            ]
        },
        "Evented": {
            "name": "Evented",
            "shortname": "Evented",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "",
            "file": "src\\js\\metaScore.Evented.js",
            "line": 7,
            "description": "A base class for event handling",
            "extends": "Class",
            "is_constructor": 1
        },
        "Player": {
            "name": "Player",
            "shortname": "Player",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Player",
            "namespace": "",
            "file": "src\\js\\metaScore.Player.js",
            "line": 81,
            "description": "Provides the main Player class",
            "extends": "Dom",
            "is_constructor": 1,
            "params": [
                {
                    "name": "configs",
                    "description": "Custom configs to override defaults",
                    "type": "Object",
                    "props": [
                        {
                            "name": "url",
                            "description": "The URL of the guide's JSON data to load",
                            "type": "String",
                            "optional": true,
                            "optdefault": "''"
                        },
                        {
                            "name": "container",
                            "description": "The HTMLElement, Dom instance, or CSS selector to which the player should be appended",
                            "type": "Mixed",
                            "optional": true,
                            "optdefault": "'body'"
                        },
                        {
                            "name": "ajax",
                            "description": "Custom options to send with each AJAX request. See {{#crossLink \"Ajax/send:method\"}}Ajax.send{{/crossLink}} for available options",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "{}"
                        },
                        {
                            "name": "keyboard",
                            "description": "Whether to activate keyboard shortcuts or not",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "api",
                            "description": "Whether to allow API access or not",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ]
        },
        "metaScore": {
            "name": "metaScore",
            "shortname": "metaScore",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "",
            "file": "src\\js\\metaScore.core.js",
            "line": 8,
            "description": "The core global object to which all internal classes are attached<br/>",
            "static": 1
        }
    },
    "classitems": [
        {
            "file": "src\\js\\core\\overlay\\metaScore.overlay.Alert.js",
            "line": 7,
            "description": "Fired when a button is clicked",
            "itemtype": "event",
            "name": "buttonclick",
            "params": [
                {
                    "name": "alert",
                    "description": "The alert instance",
                    "type": "Object"
                },
                {
                    "name": "action",
                    "description": "The buttons's action",
                    "type": "String"
                }
            ],
            "class": "overlay.Alert",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\overlay\\metaScore.overlay.Alert.js",
            "line": 43,
            "description": "Setup the overlay's UI",
            "itemtype": "method",
            "name": "setupUI",
            "access": "private",
            "tagname": "",
            "class": "overlay.Alert",
            "module": "Core",
            "namespace": "overlay"
        },
        {
            "file": "src\\js\\core\\overlay\\metaScore.overlay.Alert.js",
            "line": 72,
            "description": "Set the message's text",
            "itemtype": "method",
            "name": "setText",
            "params": [
                {
                    "name": "str",
                    "description": "The message's text",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "overlay.Alert",
            "module": "Core",
            "namespace": "overlay"
        },
        {
            "file": "src\\js\\core\\overlay\\metaScore.overlay.Alert.js",
            "line": 85,
            "description": "Add a button",
            "itemtype": "method",
            "name": "addButton",
            "params": [
                {
                    "name": "action",
                    "description": "The button's associated action",
                    "type": "String"
                },
                {
                    "name": "label",
                    "description": "The button's text label",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The button object",
                "type": "Button"
            },
            "class": "overlay.Alert",
            "module": "Core",
            "namespace": "overlay"
        },
        {
            "file": "src\\js\\core\\overlay\\metaScore.overlay.Alert.js",
            "line": 102,
            "description": "The button click event handler",
            "itemtype": "method",
            "name": "onButtonClick",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "overlay.Alert",
            "module": "Core",
            "namespace": "overlay"
        },
        {
            "file": "src\\js\\core\\overlay\\metaScore.overlay.Toolbar.js",
            "line": 40,
            "description": "Get the title's Dom",
            "itemtype": "method",
            "name": "getTitle",
            "return": {
                "description": "The Dom object",
                "type": "Dom"
            },
            "class": "overlay.Toolbar",
            "module": "Core",
            "namespace": "overlay"
        },
        {
            "file": "src\\js\\core\\overlay\\metaScore.overlay.Toolbar.js",
            "line": 50,
            "description": "Add a button",
            "itemtype": "method",
            "name": "addButton",
            "params": [
                {
                    "name": "action",
                    "description": "The action associated with the button",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The created button",
                "type": "Button"
            },
            "class": "overlay.Toolbar",
            "module": "Core",
            "namespace": "overlay"
        },
        {
            "file": "src\\js\\core\\overlay\\metaScore.overlay.Toolbar.js",
            "line": 64,
            "description": "Get a button by associated action",
            "itemtype": "method",
            "name": "getButton",
            "params": [
                {
                    "name": "action",
                    "description": "The action associated with the button",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The button",
                "type": "Dom"
            },
            "class": "overlay.Toolbar",
            "module": "Core",
            "namespace": "overlay"
        },
        {
            "file": "src\\js\\core\\overlay\\metaScore.overlay.iFrame.js",
            "line": 35,
            "description": "Setup the overlay's UI",
            "itemtype": "method",
            "name": "setupUI",
            "access": "private",
            "tagname": "",
            "class": "overlay.iFrame",
            "module": "Core",
            "namespace": "overlay"
        },
        {
            "file": "src\\js\\core\\metaScore.Ajax.js",
            "line": 16,
            "description": "Send an XMLHttp request",
            "itemtype": "method",
            "name": "send",
            "static": 1,
            "params": [
                {
                    "name": "url",
                    "description": "The URL to which the request is sent",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "to set for the request",
                    "type": "Object",
                    "props": [
                        {
                            "name": "method",
                            "description": "The method used for the request (GET, POST, or PUT)",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'GET'"
                        },
                        {
                            "name": "headers",
                            "description": "An object of additional header key/value pairs to send along with requests",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "{}"
                        },
                        {
                            "name": "async",
                            "description": "Whether the request is asynchronous or not",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "data",
                            "description": "Data to be send along with the request",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "dataType",
                            "description": "The type of data expected back from the server",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'json'"
                        },
                        {
                            "name": "complete",
                            "description": "A function to be called when the request finishes",
                            "type": "Funtion",
                            "optional": true
                        },
                        {
                            "name": "success",
                            "description": "A function to be called if the request succeeds",
                            "type": "Funtion",
                            "optional": true
                        },
                        {
                            "name": "error",
                            "description": "A function to be called if the request fails",
                            "type": "Funtion",
                            "optional": true
                        },
                        {
                            "name": "scope",
                            "description": "The object to which the scope of the above functions should be set",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "this"
                        }
                    ]
                }
            ],
            "return": {
                "description": "The XHR request",
                "type": "XMLHttpRequest"
            },
            "class": "Ajax",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Ajax.js",
            "line": 93,
            "description": "Send an XMLHttp GET request",
            "itemtype": "method",
            "name": "get",
            "static": 1,
            "params": [
                {
                    "name": "url",
                    "description": "The URL to which the request is sent",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "to set for the request. See {{#crossLink \"Ajax/send:method\"}}send{{/crossLink}} for available options",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The XHR request",
                "type": "XMLHttpRequest"
            },
            "class": "Ajax",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Ajax.js",
            "line": 110,
            "description": "Send an XMLHttp POST request",
            "itemtype": "method",
            "name": "post",
            "static": 1,
            "params": [
                {
                    "name": "url",
                    "description": "The URL to which the request is sent",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "to set for the request. See {{#crossLink \"Ajax/send:method\"}}send{{/crossLink}} for available options",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The XHR request",
                "type": "XMLHttpRequest"
            },
            "class": "Ajax",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Ajax.js",
            "line": 127,
            "description": "Send an XMLHttp PUT request",
            "itemtype": "method",
            "name": "put",
            "static": 1,
            "params": [
                {
                    "name": "url",
                    "description": "The URL to which the request is sent",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "to set for the request. See {{#crossLink \"Ajax/send:method\"}}send{{/crossLink}} for available options",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The XHR request",
                "type": "XMLHttpRequest"
            },
            "class": "Ajax",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Array.js",
            "line": 16,
            "description": "Check if a value is in an array",
            "itemtype": "method",
            "name": "inArray",
            "static": 1,
            "params": [
                {
                    "name": "needle",
                    "description": "The value to search",
                    "type": "Mixed"
                },
                {
                    "name": "haystack",
                    "description": "The array",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The index of the first match, -1 if none",
                "type": "Integer"
            },
            "class": "Array",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Array.js",
            "line": 46,
            "description": "Copy an array",
            "itemtype": "method",
            "name": "copy",
            "static": 1,
            "params": [
                {
                    "name": "arr",
                    "description": "The original array",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The copy",
                "type": "Array"
            },
            "class": "Array",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Array.js",
            "line": 58,
            "description": "Shuffle array elements",
            "itemtype": "method",
            "name": "shuffle",
            "static": 1,
            "params": [
                {
                    "name": "arr",
                    "description": "The array to shuffle",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The shuffled copy of the array",
                "type": "Array"
            },
            "class": "Array",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Array.js",
            "line": 76,
            "description": "Remove duplicate values from an array",
            "itemtype": "method",
            "name": "unique",
            "static": 1,
            "params": [
                {
                    "name": "arr",
                    "description": "The array to remove duplicates from",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "A copy of the array with no duplicates",
                "type": "Array"
            },
            "class": "Array",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Array.js",
            "line": 101,
            "description": "Iterate over an array with a callback function",
            "itemtype": "method",
            "name": "each",
            "static": 1,
            "params": [
                {
                    "name": "arr",
                    "description": "The array to iterate over",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "The function that will be executed on every element. The iteration is stopped if the callback return false",
                    "type": "Function",
                    "props": [
                        {
                            "name": "index",
                            "description": "The index of the current element being processed in the array",
                            "type": "Integer"
                        },
                        {
                            "name": "value",
                            "description": "The element that is currently being processed in the array",
                            "type": "Mixed"
                        }
                    ]
                },
                {
                    "name": "scope",
                    "description": "The value to use as this when executing the callback",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "The array",
                "type": "Array"
            },
            "class": "Array",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Array.js",
            "line": 130,
            "description": "Remove a elements from an array by value",
            "itemtype": "method",
            "name": "remove",
            "static": 1,
            "params": [
                {
                    "name": "arr",
                    "description": "The array to remove the elements from",
                    "type": "Array"
                },
                {
                    "name": "value",
                    "description": "The value to search for",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "The array",
                "type": "Array"
            },
            "class": "Array",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Array.js",
            "line": 150,
            "description": "A natural sort function generator",
            "itemtype": "method",
            "name": "naturalSort",
            "author": "Jim Palmer (http://www.overset.com/2008/09/01/javascript-natural-sort-algorithm-with-unicode-support/) - version 0.7",
            "static": 1,
            "params": [
                {
                    "name": "insensitive",
                    "description": "Whether the sort should not be case-sensitive",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "The sorting function",
                "type": "Function"
            },
            "example": [
                "\n    var arr = [\"c\", \"A2\", \"a1\", \"d\", \"b\"];\n    arr.sort(metaScore.Array.naturalSort(true));\n    // [\"a1\", \"A2\", \"b\", \"c\", \"d\"]",
                "\n    var arr = [\"c\", \"A2\", \"a1\", \"d\", \"b\"];\n    arr.sort(metaScore.Array.naturalSort(false));\n    // [\"A2\", \"a1\", \"b\", \"c\", \"d\"]"
            ],
            "class": "Array",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Array.js",
            "line": 211,
            "description": "A natural case-insentive sorting function to use with Array.sort",
            "itemtype": "method",
            "name": "naturalSortInsensitive",
            "static": 1,
            "params": [
                {
                    "name": "a",
                    "description": "The first string to compare",
                    "type": "String"
                },
                {
                    "name": "b",
                    "description": "The second string to compare",
                    "type": "String"
                }
            ],
            "return": {
                "description": "See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort",
                "type": "Integer"
            },
            "class": "Array",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Array.js",
            "line": 223,
            "description": "A natural case-sentive sorting function to use with Array.sort",
            "itemtype": "method",
            "name": "naturalSortInsensitive",
            "static": 1,
            "params": [
                {
                    "name": "a",
                    "description": "The first string to compare",
                    "type": "String"
                },
                {
                    "name": "b",
                    "description": "The second string to compare",
                    "type": "String"
                }
            ],
            "return": {
                "description": "See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort",
                "type": "Integer"
            },
            "class": "Array",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Button.js",
            "line": 37,
            "description": "The click event handler",
            "itemtype": "method",
            "name": "onClick",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "Button",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Button.js",
            "line": 50,
            "description": "Set the button's text",
            "itemtype": "method",
            "name": "setLabel",
            "params": [
                {
                    "name": "text",
                    "description": "The text to use as the label",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Button",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Button.js",
            "line": 68,
            "description": "Disable the button",
            "itemtype": "method",
            "name": "disable",
            "chainable": 1,
            "class": "Button",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Button.js",
            "line": 82,
            "description": "Enable the button",
            "itemtype": "method",
            "name": "enable",
            "chainable": 1,
            "class": "Button",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Clipboard.js",
            "line": 23,
            "description": "Set the stored data",
            "itemtype": "method",
            "name": "setData",
            "params": [
                {
                    "name": "type",
                    "description": "The data type",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "The data",
                    "type": "Mixed"
                }
            ],
            "chainable": 1,
            "class": "Clipboard",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Clipboard.js",
            "line": 40,
            "description": "Get the stored data",
            "itemtype": "method",
            "name": "getData",
            "return": {
                "description": "The data",
                "type": "Mixed"
            },
            "class": "Clipboard",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Clipboard.js",
            "line": 50,
            "description": "Get the stored data type",
            "itemtype": "method",
            "name": "getData",
            "return": {
                "description": "The data type",
                "type": "String"
            },
            "class": "Clipboard",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Clipboard.js",
            "line": 60,
            "description": "Clear the stored data",
            "itemtype": "method",
            "name": "clearData",
            "chainable": 1,
            "class": "Clipboard",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Color.js",
            "line": 16,
            "description": "Convert an RGB value to HSV",
            "itemtype": "method",
            "name": "rgb2hsv",
            "static": 1,
            "params": [
                {
                    "name": "rgb",
                    "description": "The rgb value as an object with 'r', 'g', and 'b' keys",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The hsv value as an object with 'h', 's', and 'v' keys",
                "type": "Object"
            },
            "class": "Color",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Color.js",
            "line": 62,
            "description": "Parse a CSS color value into an object with 'r', 'g', 'b', and 'a' keys",
            "itemtype": "method",
            "name": "parse",
            "static": 1,
            "params": [
                {
                    "name": "color",
                    "description": "The CSS value to parse",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "The color object with 'r', 'g', 'b', and 'a' keys",
                "type": "Object"
            },
            "class": "Color",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.ContextMenu.js",
            "line": 7,
            "description": "Fired before the menu is shows",
            "itemtype": "event",
            "name": "beforeshow",
            "params": [
                {
                    "name": "original_event",
                    "description": "The original contextmenu event",
                    "type": "Object"
                }
            ],
            "class": "ContextMenu",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.ContextMenu.js",
            "line": 15,
            "description": "Fired when a task is clicked",
            "itemtype": "event",
            "name": "taskclick",
            "params": [
                {
                    "name": "action",
                    "description": "The task's action",
                    "type": "Object"
                },
                {
                    "name": "context",
                    "description": "The task's context",
                    "type": "Object"
                }
            ],
            "class": "ContextMenu",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.ContextMenu.js",
            "line": 76,
            "description": "Mousedown event handler",
            "itemtype": "method",
            "name": "onMousedown",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "ContextMenu",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.ContextMenu.js",
            "line": 92,
            "description": "Mousedown event handler",
            "itemtype": "method",
            "name": "onMousedown",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "ContextMenu",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.ContextMenu.js",
            "line": 103,
            "description": "Task mouseover event handler",
            "itemtype": "method",
            "name": "onItemMouseover",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "ContextMenu",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.ContextMenu.js",
            "line": 129,
            "description": "Target's contextmenu event handler",
            "itemtype": "method",
            "name": "onTargetContextmenu",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "ContextMenu",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.ContextMenu.js",
            "line": 165,
            "description": "Target's mousedown event handler",
            "itemtype": "method",
            "name": "onTargetMousedown",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "ContextMenu",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.ContextMenu.js",
            "line": 176,
            "description": "Task's click event handler",
            "itemtype": "method",
            "name": "onTaskClick",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "ContextMenu",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.ContextMenu.js",
            "line": 198,
            "description": "Sets the target element",
            "itemtype": "method",
            "name": "setTarget",
            "params": [
                {
                    "name": "target",
                    "description": "The HTMLElement, Dom instance, or CSS selector to which the context menu is attached",
                    "type": "Mixed"
                }
            ],
            "chainable": 1,
            "class": "ContextMenu",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.ContextMenu.js",
            "line": 217,
            "description": "Add a task",
            "itemtype": "method",
            "name": "addTask",
            "params": [
                {
                    "name": "action",
                    "description": "The task's associated action",
                    "type": "String"
                },
                {
                    "name": "configs",
                    "description": "The task's configs",
                    "type": "Object",
                    "props": [
                        {
                            "name": "text",
                            "description": "The task's text",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "toggler",
                            "description": "A boolean or a callback function used to determine if the task is active",
                            "type": "Mixed",
                            "optional": true,
                            "optdefault": "true"
                        }
                    ]
                },
                {
                    "name": "parent",
                    "description": "The parent element to append the task to",
                    "type": "Mixed",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "ContextMenu",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.ContextMenu.js",
            "line": 267,
            "description": "Add a separator",
            "itemtype": "method",
            "name": "addSeparator",
            "chainable": 1,
            "class": "ContextMenu",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.ContextMenu.js",
            "line": 280,
            "description": "Show the menu",
            "itemtype": "method",
            "name": "show",
            "params": [
                {
                    "name": "el",
                    "description": "The element on which the contextmenu event was triggered",
                    "type": "HTMLElement"
                },
                {
                    "name": "x",
                    "description": "The horizontal position at which the menu should be shown",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The vertical position at which the menu should be shown",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "ContextMenu",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.ContextMenu.js",
            "line": 333,
            "description": "Hide the menu",
            "itemtype": "method",
            "name": "hide",
            "chainable": 1,
            "class": "ContextMenu",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.ContextMenu.js",
            "line": 352,
            "description": "Enable the menu",
            "itemtype": "method",
            "name": "enable",
            "chainable": 1,
            "class": "ContextMenu",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.ContextMenu.js",
            "line": 368,
            "description": "Disable the menu",
            "itemtype": "method",
            "name": "disable",
            "chainable": 1,
            "class": "ContextMenu",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 7,
            "description": "Fired before an element is removed",
            "itemtype": "event",
            "name": "beforeremove",
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 14,
            "description": "Fired when a child element is removed",
            "itemtype": "event",
            "name": "childremove",
            "params": [
                {
                    "name": "child",
                    "description": "The removed child",
                    "type": "Object"
                }
            ],
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 59,
            "description": "Regular expression that matches dashed string for camelizing",
            "itemtype": "property",
            "name": "camelRe",
            "access": "private",
            "tagname": "",
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 67,
            "description": "List of common events that should generaly bubble up",
            "itemtype": "property",
            "name": "bubbleEvents",
            "static": 1,
            "access": "private",
            "tagname": "",
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 85,
            "description": "Helper function used by the camel function",
            "itemtype": "method",
            "name": "camelReplaceFn",
            "static": 1,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "match",
                    "description": "",
                    "type": "The matched substring"
                },
                {
                    "name": "letter",
                    "description": "",
                    "type": "The submatched letter"
                }
            ],
            "return": {
                "description": "The uppercased letter",
                "type": "String"
            },
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 99,
            "description": "Normalize a string to Camel Case",
            "itemtype": "method",
            "name": "camel",
            "static": 1,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "str",
                    "description": "The string to normalize",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The normalized string",
                "type": "String"
            },
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 112,
            "description": "Select a single element by CSS selecor and optional parent",
            "itemtype": "method",
            "name": "selectElement",
            "static": 1,
            "params": [
                {
                    "name": "The",
                    "description": "CSS selector",
                    "type": "String"
                },
                {
                    "name": "parent",
                    "description": "The HTML Element in which to search",
                    "type": "HTMLElement",
                    "optional": true,
                    "optdefault": "document"
                }
            ],
            "return": {
                "description": "The found element if any",
                "type": "HTMLElement"
            },
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 141,
            "description": "Select multiple elements by CSS selecor and optional parent",
            "itemtype": "method",
            "name": "selectElements",
            "static": 1,
            "params": [
                {
                    "name": "The",
                    "description": "CSS selector",
                    "type": "String"
                },
                {
                    "name": "parent",
                    "description": "The HTML Element in which to search",
                    "type": "HTMLElement",
                    "optional": true,
                    "optdefault": "document"
                }
            ],
            "return": {
                "description": "An HTML NodeList or an array of found elements if any",
                "type": "Mixed"
            },
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 175,
            "description": "Creates elements from an HTML string (see http://krasimirtsonev.com/blog/article/Revealing-the-magic-how-to-properly-convert-HTML-string-to-a-DOM-element)",
            "itemtype": "method",
            "name": "elementsFromString",
            "static": 1,
            "params": [
                {
                    "name": "html",
                    "description": "The HTML string",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A NodeList of the created elements, or null on error",
                "type": "HTML NodeList"
            },
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 224,
            "description": "Get the window containing an element",
            "itemtype": "method",
            "name": "getElementWindow",
            "static": 1,
            "params": [
                {
                    "name": "element",
                    "description": "The element",
                    "type": "HTMLElement"
                }
            ],
            "return": {
                "description": "The window",
                "type": "HTML Window"
            },
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 238,
            "description": "Check if an element has a given CSS lass",
            "itemtype": "method",
            "name": "hasClass",
            "static": 1,
            "params": [
                {
                    "name": "element",
                    "description": "The element",
                    "type": "HTMLElement"
                },
                {
                    "name": "className",
                    "description": "The CSS class",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Whether the element has the specified CSS class",
                "type": "Boolean"
            },
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 251,
            "description": "Add a CSS class to an element",
            "itemtype": "method",
            "name": "addClass",
            "static": 1,
            "params": [
                {
                    "name": "element",
                    "description": "The element",
                    "type": "HTMLElement"
                },
                {
                    "name": "className",
                    "description": "The CSS class",
                    "type": "String"
                }
            ],
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 268,
            "description": "Remove a CSS class from an element",
            "itemtype": "method",
            "name": "removeClass",
            "static": 1,
            "params": [
                {
                    "name": "element",
                    "description": "The element",
                    "type": "HTMLElement"
                },
                {
                    "name": "className",
                    "description": "The CSS class",
                    "type": "String"
                }
            ],
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 285,
            "description": "Toggle a CSS class on an element",
            "itemtype": "method",
            "name": "toggleClass",
            "static": 1,
            "params": [
                {
                    "name": "element",
                    "description": "The element",
                    "type": "HTMLElement"
                },
                {
                    "name": "className",
                    "description": "The CSS class",
                    "type": "String"
                },
                {
                    "name": "force",
                    "description": "Whether to add or remove the class. The class is toggled if not specified",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 312,
            "description": "Add an event listener on an element",
            "itemtype": "method",
            "name": "addListener",
            "static": 1,
            "params": [
                {
                    "name": "element",
                    "description": "The element",
                    "type": "HTMLElement"
                },
                {
                    "name": "type",
                    "description": "The event type",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback function to call when the event is captured",
                    "type": "Function",
                    "props": [
                        {
                            "name": "event",
                            "description": "The event",
                            "type": "Event"
                        }
                    ]
                },
                {
                    "name": "useCapture",
                    "description": "Whether the event should be executed in the capturing or in the bubbling phase",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "The element",
                "type": "HTMLElement"
            },
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 334,
            "description": "Remove an event listener from an element",
            "itemtype": "method",
            "name": "removeListener",
            "static": 1,
            "params": [
                {
                    "name": "element",
                    "description": "The element",
                    "type": "HTMLElement"
                },
                {
                    "name": "type",
                    "description": "The event type",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback function to call when the event is captured",
                    "type": "Function",
                    "props": [
                        {
                            "name": "event",
                            "description": "The event",
                            "type": "Event"
                        }
                    ]
                },
                {
                    "name": "useCapture",
                    "description": "Whether the event should be executed in the capturing or in the bubbling phase",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "The element",
                "type": "HTMLElement"
            },
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 356,
            "description": "Trigger an event from an element",
            "itemtype": "method",
            "name": "triggerEvent",
            "static": 1,
            "params": [
                {
                    "name": "element",
                    "description": "The element",
                    "type": "HTMLElement"
                },
                {
                    "name": "type",
                    "description": "The event type",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Custom data to send with the event. The data is accessible through the event.detail property",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "bubbles",
                    "description": "Whether the event bubbles up through the DOM or not",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "cancelable",
                    "description": "Whether the event is cancelable",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "Whether the event was not cancelled",
                "type": "Boolean"
            },
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 380,
            "description": "Set or get the innerHTML of an element",
            "itemtype": "method",
            "name": "text",
            "static": 1,
            "params": [
                {
                    "name": "element",
                    "description": "The element",
                    "type": "HTMLElement"
                },
                {
                    "name": "html",
                    "description": "The value to set",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "The innerHTML of the element",
                "type": "String"
            },
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 397,
            "description": "Set or get the value of an element",
            "itemtype": "method",
            "name": "val",
            "static": 1,
            "params": [
                {
                    "name": "element",
                    "description": "The element",
                    "type": "HTMLElement"
                },
                {
                    "name": "value",
                    "description": "The value to set",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "The value of the element",
                "type": "String"
            },
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 440,
            "description": "Set or get an attribute on an element",
            "itemtype": "method",
            "name": "attr",
            "static": 1,
            "params": [
                {
                    "name": "element",
                    "description": "The element",
                    "type": "HTMLElement"
                },
                {
                    "name": "name",
                    "description": "The attribute's name, or a list of name/value pairs",
                    "type": "Mixed"
                },
                {
                    "name": "value",
                    "description": "The attribute's value",
                    "type": "Mixed",
                    "optional": true
                }
            ],
            "return": {
                "description": "The attribute's value, nothing is returned for 'special' attributes such as \"class\" or \"text\"",
                "type": "Mixed"
            },
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 482,
            "description": "Set or get a property on an element",
            "itemtype": "method",
            "name": "prop",
            "static": 1,
            "params": [
                {
                    "name": "element",
                    "description": "The element",
                    "type": "HTMLElement"
                },
                {
                    "name": "name",
                    "description": "The attribute's name, or a list of name/value pairs",
                    "type": "Mixed"
                },
                {
                    "name": "value",
                    "description": "The attribute's value",
                    "type": "Mixed",
                    "optional": true
                }
            ],
            "return": {
                "description": "The attribute's value, nothing is returned for 'special' attributes such as \"class\" or \"text\"",
                "type": "Mixed"
            },
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 516,
            "description": "Set or get a CSS style property of an element",
            "itemtype": "method",
            "name": "css",
            "static": 1,
            "params": [
                {
                    "name": "element",
                    "description": "The element",
                    "type": "HTMLElement"
                },
                {
                    "name": "name",
                    "description": "The CSS property's name",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The CSS property's value",
                    "type": "String"
                },
                {
                    "name": "inline",
                    "description": "Whether to return the inline or computed style value",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "The CSS style value of the property",
                "type": "String"
            },
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 543,
            "description": "Set or get a custom data attribute of an element",
            "itemtype": "method",
            "name": "data",
            "static": 1,
            "params": [
                {
                    "name": "element",
                    "description": "The element",
                    "type": "HTMLElement"
                },
                {
                    "name": "name",
                    "description": "The name of the data attribute",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value of the data attribute",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The value of the data attribute",
                "type": "String"
            },
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 568,
            "description": "Append children to an element",
            "itemtype": "method",
            "name": "append",
            "static": 1,
            "params": [
                {
                    "name": "element",
                    "description": "The element",
                    "type": "HTMLElement"
                },
                {
                    "name": "children",
                    "description": "An array of elemets or a single element to append",
                    "type": "Mixed"
                }
            ],
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 586,
            "description": "Insert siblings before an element",
            "itemtype": "method",
            "name": "before",
            "static": 1,
            "params": [
                {
                    "name": "element",
                    "description": "The element",
                    "type": "HTMLElement"
                },
                {
                    "name": "siblings",
                    "description": "An array of elemets or a single element to insert",
                    "type": "Mixed"
                }
            ],
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 604,
            "description": "Insert siblings after an element",
            "itemtype": "method",
            "name": "after",
            "static": 1,
            "params": [
                {
                    "name": "element",
                    "description": "The element",
                    "type": "HTMLElement"
                },
                {
                    "name": "siblings",
                    "description": "An array of elemets or a single element to insert",
                    "type": "Mixed"
                }
            ],
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 621,
            "description": "Remove all element children",
            "itemtype": "method",
            "name": "empty",
            "static": 1,
            "params": [
                {
                    "name": "element",
                    "description": "The element",
                    "type": "HTMLElement"
                }
            ],
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 634,
            "description": "Remove an element from the DOM",
            "itemtype": "method",
            "name": "remove",
            "static": 1,
            "params": [
                {
                    "name": "element",
                    "description": "The element",
                    "type": "HTMLElement"
                }
            ],
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 647,
            "description": "Check if an element matches a CSS selector",
            "itemtype": "method",
            "name": "is",
            "static": 1,
            "params": [
                {
                    "name": "element",
                    "description": "The element",
                    "type": "HTMLElement"
                },
                {
                    "name": "selector",
                    "description": "The CSS selector",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Whether the element matches the CSS selector",
                "type": "Boolean"
            },
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 668,
            "description": "Get the closest ancestor of an element which matches a given CSS selector",
            "itemtype": "method",
            "name": "closest",
            "static": 1,
            "params": [
                {
                    "name": "element",
                    "description": "The element",
                    "type": "HTMLElement"
                },
                {
                    "name": "selector",
                    "description": "The CSS selector",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The matched element",
                "type": "Element"
            },
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 695,
            "description": "Get the top and left offset of an element",
            "itemtype": "method",
            "name": "offset",
            "static": 1,
            "params": [
                {
                    "name": "element",
                    "description": "The element",
                    "type": "HTMLElement"
                }
            ],
            "return": {
                "description": "The top and left offset",
                "type": "Object"
            },
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 717,
            "description": "Add an element to the set of elements managed by the Dom object",
            "itemtype": "method",
            "name": "add",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "elements",
                    "description": "An array of elements or a single element to add",
                    "type": "Mixed"
                }
            ],
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 735,
            "description": "Get the number of elements managed by the Dom object",
            "itemtype": "method",
            "name": "count",
            "return": {
                "description": "The number of elements",
                "type": "Integer"
            },
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 745,
            "description": "Get an element by index from the set of elements managed by the Dom object",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "index",
                    "description": "The index of the elements to retreive",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "The element",
                "type": "Element"
            },
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 756,
            "description": "Return a new Dom object with the elements filtered by a CSS selector",
            "itemtype": "method",
            "name": "filter",
            "params": [
                {
                    "name": "selector",
                    "description": "The CSS selector",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The new Dom object",
                "type": "Dom"
            },
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 775,
            "description": "Get the index of the first element that matched the given CSS selector",
            "itemtype": "method",
            "name": "index",
            "params": [
                {
                    "name": "selector",
                    "description": "The CSS selector",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The index of the first matched element, or -1 if none",
                "type": "Integer"
            },
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 795,
            "description": "Find all descendents that match a given CSS selector",
            "itemtype": "method",
            "name": "find",
            "params": [
                {
                    "name": "selector",
                    "description": "The CSS selector",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A Dom object of all matched descendents",
                "type": "Dom"
            },
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 812,
            "description": "Get all children, optionally filtered by a given CSS selector",
            "itemtype": "method",
            "name": "children",
            "params": [
                {
                    "name": "selector",
                    "description": "The CSS selector",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "A Dom object of all matched children",
                "type": "Dom"
            },
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 833,
            "description": "Get the first child , optionally filtered by a given CSS selector",
            "itemtype": "method",
            "name": "child",
            "params": [
                {
                    "name": "selector",
                    "description": "The CSS selector",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "A Dom object of the matched child",
                "type": "Dom"
            },
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 844,
            "description": "Get all parents, optionally filtered by a given CSS selector",
            "itemtype": "method",
            "name": "parents",
            "params": [
                {
                    "name": "selector",
                    "description": "The CSS selector",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "A Dom object of all matched parents",
                "type": "Dom"
            },
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 865,
            "description": "Interate over all the elements managed by the Dom object",
            "itemtype": "method",
            "name": "each",
            "params": [
                {
                    "name": "callback",
                    "description": "The function that will be executed on every element. The iteration is stopped if the callback return false",
                    "type": "Function",
                    "props": [
                        {
                            "name": "index",
                            "description": "The index of the current element being processed",
                            "type": "Integer"
                        },
                        {
                            "name": "element",
                            "description": "The element that is currently being processed",
                            "type": "Element"
                        }
                    ]
                },
                {
                    "name": "scope",
                    "description": "The value to use as this when executing the callback function",
                    "type": "Mixed"
                }
            ],
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 880,
            "description": "Check if an element in the set of elements managed by the Dom object has a given CSS class",
            "itemtype": "method",
            "name": "hasClass",
            "params": [
                {
                    "name": "className",
                    "description": "The CSS class",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Whether a match was found",
                "type": "Boolean"
            },
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 898,
            "description": "Add a CSS class to all the elements managed by the Dom object",
            "itemtype": "method",
            "name": "addClass",
            "params": [
                {
                    "name": "className",
                    "description": "The CSS class",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 913,
            "description": "Remove a CSS class from all the elements managed by the Dom object",
            "itemtype": "method",
            "name": "removeClass",
            "params": [
                {
                    "name": "className",
                    "description": "The CSS class",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 928,
            "description": "Toggle a CSS class for all the elements managed by the Dom object",
            "itemtype": "method",
            "name": "toggleClass",
            "params": [
                {
                    "name": "className",
                    "description": "The CSS class",
                    "type": "String"
                },
                {
                    "name": "force",
                    "description": "Whether to add or remove the class. The class is toggled if not specified",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 944,
            "description": "Add an event listener on all the elements managed by the Dom object",
            "itemtype": "method",
            "name": "addListener",
            "static": 1,
            "params": [
                {
                    "name": "type",
                    "description": "The event type",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback function to call when the event is captured",
                    "type": "Function",
                    "props": [
                        {
                            "name": "event",
                            "description": "The event",
                            "type": "Event"
                        }
                    ]
                },
                {
                    "name": "useCapture",
                    "description": "Whether the event should be executed in the capturing or in the bubbling phase",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 963,
            "description": "Add an event listener for descendents all the elements managed by the Dom object that match a given selector",
            "itemtype": "method",
            "name": "addDelegate",
            "params": [
                {
                    "name": "selector",
                    "description": "The CSS selector to filter descendents by",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "The event type",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback function to call when the event is captured",
                    "type": "Function",
                    "props": [
                        {
                            "name": "event",
                            "description": "The original event",
                            "type": "Event"
                        },
                        {
                            "name": "match",
                            "description": "The first matched descendent",
                            "type": "Element"
                        }
                    ]
                },
                {
                    "name": "scope",
                    "description": "The value to use as this when executing the callback function",
                    "type": "Mixed",
                    "optional": true
                },
                {
                    "name": "useCapture",
                    "description": "Whether the event should be executed in the capturing or in the bubbling phase",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 1000,
            "description": "Remove an event listener from all the elements managed by the Dom object",
            "itemtype": "method",
            "name": "removeListener",
            "static": 1,
            "params": [
                {
                    "name": "type",
                    "description": "The event type",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback function to call when the event is captured",
                    "type": "Function",
                    "props": [
                        {
                            "name": "event",
                            "description": "The event",
                            "type": "Event"
                        }
                    ]
                },
                {
                    "name": "useCapture",
                    "description": "Whether the event should be executed in the capturing or in the bubbling phase",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 1019,
            "description": "Trigger an event from all the elements managed by the Dom object",
            "itemtype": "method",
            "name": "triggerEvent",
            "params": [
                {
                    "name": "type",
                    "description": "The event type",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Custom data to send with the event. The data is accessible through the event.detail property",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "bubbles",
                    "description": "Whether the event bubbles up through the DOM or not",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "cancelable",
                    "description": "Whether the event is cancelable",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "Whether no event was cancelled",
                "type": "Boolean"
            },
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 1039,
            "description": "Set the innerHTML of all the elements managed by the Dom object, or get the innerHTML of the first element",
            "itemtype": "method",
            "name": "text",
            "params": [
                {
                    "name": "html",
                    "description": "The value to set",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "The Dom object if used as a setter, the innerHTML of the first element if used as a getter",
                "type": "Mixed"
            },
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 1057,
            "description": "Set the value of all the elements managed by the Dom object, or get the value of the first element",
            "itemtype": "method",
            "name": "val",
            "params": [
                {
                    "name": "value",
                    "description": "The value to set",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "The Dom object if used as a setter, the value of the first element if used as a getter",
                "type": "Mixed"
            },
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 1076,
            "description": "Set an attribute of all the elements managed by the Dom object, or get the value of an attribute of the first element",
            "itemtype": "method",
            "name": "attr",
            "params": [
                {
                    "name": "element",
                    "description": "The element",
                    "type": "HTMLElement"
                },
                {
                    "name": "value",
                    "description": "The value to set",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "The Dom object if used as a setter, the value of the first element if used as a getter",
                "type": "Mixed"
            },
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 1096,
            "description": "Set a property of all the elements managed by the Dom object, or get the value of a property of the first element",
            "itemtype": "method",
            "name": "prop",
            "params": [
                {
                    "name": "element",
                    "description": "The element",
                    "type": "HTMLElement"
                },
                {
                    "name": "value",
                    "description": "The value to set",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "The Dom object if used as a setter, the value of the first element if used as a getter",
                "type": "Mixed"
            },
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 1116,
            "description": "Set CSS style property of all the elements managed by the Dom object, or get the value of a CSS style property of the first element",
            "itemtype": "method",
            "name": "css",
            "params": [
                {
                    "name": "name",
                    "description": "The CSS property's name",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The CSS property's value",
                    "type": "String"
                },
                {
                    "name": "inline",
                    "description": "Whether to return the inline or computed style value",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "The Dom object if used as a setter, the CSS style value of the property of the first element if used as a getter",
                "type": "Mixed"
            },
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 1137,
            "description": "Set a custom data attribute on all the elements managed by the Dom object, or get the value of a custom data attribute of the first element",
            "itemtype": "method",
            "name": "data",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the data attribute",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value of the data attribute",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The Dom object if used as a setter, the value of the data attribute of the first element if used as a getter",
                "type": "Mixed"
            },
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 1157,
            "description": "Append children to the first element managed by the Dom object",
            "itemtype": "method",
            "name": "append",
            "params": [
                {
                    "name": "children",
                    "description": "An array of elemets or a single element to append",
                    "type": "Mixed"
                }
            ],
            "chainable": 1,
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 1174,
            "description": "Append each of the elements managed by the Dom object into a given element",
            "itemtype": "method",
            "name": "appendTo",
            "params": [
                {
                    "name": "parent",
                    "description": "A Dom object or an Element to append the elements to",
                    "type": "Mixed"
                }
            ],
            "chainable": 1,
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 1195,
            "description": "Append each of the elements managed by the Dom object into a given element at a given position",
            "itemtype": "method",
            "name": "insertAt",
            "params": [
                {
                    "name": "parent",
                    "description": "A Dom object or an Element to append the elements to",
                    "type": "Mixed"
                },
                {
                    "name": "index",
                    "description": "The index position to append at",
                    "type": "Integer"
                }
            ],
            "chainable": 1,
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 1222,
            "description": "Remove all children of each element managed by the Dom object",
            "itemtype": "method",
            "name": "empty",
            "chainable": 1,
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 1236,
            "description": "Make all the elements managed by the Dom object visible",
            "itemtype": "method",
            "name": "show",
            "chainable": 1,
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 1248,
            "description": "Make all the elements managed by the Dom object invisible",
            "itemtype": "method",
            "name": "hide",
            "chainable": 1,
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 1260,
            "description": "Set focus on the first element managed by the Dom object",
            "itemtype": "method",
            "name": "focus",
            "chainable": 1,
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 1272,
            "description": "Remove focus from the first element managed by the Dom object",
            "itemtype": "method",
            "name": "blur",
            "chainable": 1,
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 1284,
            "description": "Get the top and left offset of the first element managed by the Dom object",
            "itemtype": "method",
            "name": "offset",
            "return": {
                "description": "offset The top and left offset",
                "type": "Object"
            },
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 1294,
            "description": "Remove all the elements managed by the Dom object from the DOM",
            "itemtype": "method",
            "name": "remove",
            "chainable": 1,
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 1312,
            "description": "Check if an element from the elements managed by the Dom object matches a CSS selector",
            "itemtype": "method",
            "name": "is",
            "params": [
                {
                    "name": "selector",
                    "description": "The CSS selector",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Whether an element matches the CSS selector",
                "type": "Boolean"
            },
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Dom.js",
            "line": 1330,
            "description": "Get the first closest ancestor of the elements managed by the Dom object which matches a given CSS selector",
            "itemtype": "method",
            "name": "closest",
            "params": [
                {
                    "name": "selector",
                    "description": "The CSS selector",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The matched element",
                "type": "Element"
            },
            "class": "Dom",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Draggable.js",
            "line": 7,
            "description": "Fired before the dragging starts\nThe dragging can be canceled by invoking preventDefault on the event",
            "itemtype": "event",
            "name": "beforedrag",
            "class": "Draggable",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Draggable.js",
            "line": 15,
            "description": "Fired when the dragging started",
            "itemtype": "event",
            "name": "dragstart",
            "class": "Draggable",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Draggable.js",
            "line": 22,
            "description": "Fired when a drag occured",
            "itemtype": "event",
            "name": "drag",
            "class": "Draggable",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Draggable.js",
            "line": 29,
            "description": "Fired when the dragging ended",
            "itemtype": "event",
            "name": "dragend",
            "class": "Draggable",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Draggable.js",
            "line": 73,
            "description": "The mousedown event handler",
            "itemtype": "method",
            "name": "onMouseDown",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "Draggable",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Draggable.js",
            "line": 105,
            "description": "The mousemove event handler",
            "itemtype": "method",
            "name": "onMouseMove",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "Draggable",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Draggable.js",
            "line": 132,
            "description": "The mouseup event handler",
            "itemtype": "method",
            "name": "onMouseUp",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "Draggable",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Draggable.js",
            "line": 151,
            "description": "Enable the behavior",
            "itemtype": "method",
            "name": "enable",
            "chainable": 1,
            "class": "Draggable",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Draggable.js",
            "line": 167,
            "description": "Disable the behavior",
            "itemtype": "method",
            "name": "disable",
            "chainable": 1,
            "class": "Draggable",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Draggable.js",
            "line": 183,
            "description": "Destroy the behavior",
            "itemtype": "method",
            "name": "destroy",
            "chainable": 1,
            "class": "Draggable",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Function.js",
            "line": 16,
            "description": "Create a proxy of a function",
            "itemtype": "method",
            "name": "proxy",
            "static": 1,
            "params": [
                {
                    "name": "fn",
                    "description": "The function to proxy",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "The value to use as this when executing the proxy function",
                    "type": "Mixed"
                },
                {
                    "name": "args",
                    "description": "Extra arguments to preppend to the passed arguments when the proxy function is called",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The proxy function",
                "type": "Function"
            },
            "class": "Function",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Locale.js",
            "line": 16,
            "description": "Translate a string",
            "itemtype": "method",
            "name": "t",
            "static": 1,
            "params": [
                {
                    "name": "key",
                    "description": "The string identifier",
                    "type": "String"
                },
                {
                    "name": "str",
                    "description": "The default string to use if no translation is found",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "An object of replacements to make after translation",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The translated string",
                "type": "String"
            },
            "class": "Locale",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Locale.js",
            "line": 34,
            "description": "Replace placeholders with sanitized values in a string",
            "itemtype": "method",
            "name": "formatString",
            "static": 1,
            "params": [
                {
                    "name": "str",
                    "description": "The string to process",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "An object of replacements with placeholders as keys",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The translated string",
                "type": "String"
            },
            "class": "Locale",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Number.js",
            "line": 16,
            "description": "Get the number of decimal places",
            "itemtype": "method",
            "name": "getDecimalPlaces",
            "params": [
                {
                    "name": "value",
                    "description": "The number to check against",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The number of decimal places",
                "type": "Number"
            },
            "class": "Number",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Object.js",
            "line": 16,
            "description": "Merge the contents of two or more objects together into the first object",
            "itemtype": "method",
            "name": "extend",
            "static": 1,
            "params": [
                {
                    "name": "first",
                    "description": "The object to which other objects are merged",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "others",
                    "description": "The objects to merge with the first one",
                    "type": "Object",
                    "optional": true,
                    "multiple": true
                }
            ],
            "return": {
                "description": "The first object",
                "type": "Object"
            },
            "class": "Object",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Object.js",
            "line": 48,
            "description": "Return a copy of an object",
            "itemtype": "method",
            "name": "copy",
            "static": 1,
            "params": [
                {
                    "name": "obj",
                    "description": "The original object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The object copy",
                "type": "Object"
            },
            "class": "Object",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Object.js",
            "line": 60,
            "description": "Iterate over an object",
            "itemtype": "method",
            "name": "each",
            "static": 1,
            "params": [
                {
                    "name": "obj",
                    "description": "The object to iterate over",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The function that will be executed on every element. The iteration is stopped if the callback return false",
                    "type": "Function",
                    "props": [
                        {
                            "name": "key",
                            "description": "The key of the current element being processed in the object",
                            "type": "String"
                        },
                        {
                            "name": "value",
                            "description": "The element that is currently being processed in the object",
                            "type": "Mixed"
                        }
                    ]
                },
                {
                    "name": "scope",
                    "description": "The value to use as this when executing the callback",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "The object",
                "type": "Object"
            },
            "class": "Object",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Overlay.js",
            "line": 7,
            "description": "Fired when the overlay is shown",
            "itemtype": "event",
            "name": "show",
            "params": [
                {
                    "name": "overlay",
                    "description": "The overlay instance",
                    "type": "Object"
                }
            ],
            "class": "Overlay",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Overlay.js",
            "line": 15,
            "description": "Fired when the overlay is hidden",
            "itemtype": "event",
            "name": "hide",
            "params": [
                {
                    "name": "overlay",
                    "description": "The overlay instance",
                    "type": "Object"
                }
            ],
            "class": "Overlay",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Overlay.js",
            "line": 59,
            "description": "Setup the overlay's UI",
            "itemtype": "method",
            "name": "setupUI",
            "access": "private",
            "tagname": "",
            "class": "Overlay",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Overlay.js",
            "line": 85,
            "description": "Show the overlay",
            "itemtype": "method",
            "name": "show",
            "chainable": 1,
            "class": "Overlay",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Overlay.js",
            "line": 99,
            "description": "Hide the overlay",
            "itemtype": "method",
            "name": "hide",
            "chainable": 1,
            "class": "Overlay",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Overlay.js",
            "line": 113,
            "description": "Get the overlay's toolbar",
            "itemtype": "method",
            "name": "getToolbar",
            "return": {
                "description": "The toolbar",
                "type": "editor.Toolbar"
            },
            "class": "Overlay",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Overlay.js",
            "line": 123,
            "description": "Get the overlay's contents",
            "itemtype": "method",
            "name": "getContents",
            "return": {
                "description": "The contents",
                "type": "Dom"
            },
            "class": "Overlay",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Overlay.js",
            "line": 133,
            "description": "The close button's click handler",
            "itemtype": "method",
            "name": "onCloseClick",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "Overlay",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Resizable.js",
            "line": 7,
            "description": "Fired when a resize started",
            "itemtype": "event",
            "name": "resizestart",
            "class": "Resizable",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Resizable.js",
            "line": 14,
            "description": "Fired when a resize occured",
            "itemtype": "event",
            "name": "resize",
            "class": "Resizable",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Resizable.js",
            "line": 21,
            "description": "Fired when a resize ended",
            "itemtype": "event",
            "name": "resizeend",
            "class": "Resizable",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Resizable.js",
            "line": 76,
            "description": "The mousedown event handler",
            "itemtype": "method",
            "name": "onMouseDown",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "Resizable",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Resizable.js",
            "line": 109,
            "description": "The mousemove event handler",
            "itemtype": "method",
            "name": "onMouseMove",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "Resizable",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Resizable.js",
            "line": 172,
            "description": "The mouseup event handler",
            "itemtype": "method",
            "name": "onMouseUp",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "Resizable",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Resizable.js",
            "line": 191,
            "description": "Get a handle",
            "itemtype": "method",
            "name": "getHandle",
            "params": [
                {
                    "name": "direction",
                    "description": "The direction of the handle to get",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The handle",
                "type": "Dom"
            },
            "class": "Resizable",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Resizable.js",
            "line": 201,
            "description": "Enable the behavior",
            "itemtype": "method",
            "name": "enable",
            "chainable": 1,
            "class": "Resizable",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Resizable.js",
            "line": 215,
            "description": "Disable the behavior",
            "itemtype": "method",
            "name": "disable",
            "chainable": 1,
            "class": "Resizable",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Resizable.js",
            "line": 229,
            "description": "Destroy the behavior",
            "itemtype": "method",
            "name": "destroy",
            "chainable": 1,
            "class": "Resizable",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.String.js",
            "line": 16,
            "description": "Capitalize a string",
            "itemtype": "method",
            "name": "capitalize",
            "params": [
                {
                    "name": "str",
                    "description": "The string to capitalize",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The capitalized string",
                "type": "String"
            },
            "class": "String",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.String.js",
            "line": 27,
            "description": "Generate a random uuid",
            "itemtype": "method",
            "name": "uuid",
            "author": "Broofa <robert@broofa.com> (http://www.broofa.com/2008/09/javascript-uuid-function/)",
            "params": [
                {
                    "name": "len",
                    "description": "The desired number of characters",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "radix",
                    "description": "The number of allowable values for each character",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "return": {
                "description": "The generated uuid",
                "type": "String"
            },
            "exqmple": "var id = metaScore.String.uuid(5, 2);\n   // \"10100\"",
            "class": "String",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.String.js",
            "line": 80,
            "description": "Pad a string with another string",
            "itemtype": "method",
            "name": "pad",
            "params": [
                {
                    "name": "str",
                    "description": "The string to pad",
                    "type": "String"
                },
                {
                    "name": "len",
                    "description": "The desired final string length",
                    "type": "Integer"
                },
                {
                    "name": "pad",
                    "description": "The string to pad with",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\" \""
                },
                {
                    "name": "dir",
                    "description": "The padding direction (\"right\", \"left\" or \"both\")",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"right\""
                }
            ],
            "return": {
                "description": "The padded string",
                "type": "String"
            },
            "exqmple": "var str = \"a\";\n   var padded = metaScore.String.pad(str, 3, \"b\", \"both\");\n   // \"bab\"",
            "class": "String",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.String.js",
            "line": 136,
            "description": "Replace all occurences of a sub-string in a string",
            "itemtype": "method",
            "name": "replaceAll",
            "params": [
                {
                    "name": "str",
                    "description": "The string being searched and replaced on",
                    "type": "String"
                },
                {
                    "name": "search",
                    "description": "The value being searched for",
                    "type": "String"
                },
                {
                    "name": "replacement",
                    "description": "The value that replaces found search values",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The replaced string",
                "type": "String"
            },
            "exqmple": "var str = \"abc test test abc test test test abc test test abc\";\n   var replaced = metaScore.String.replaceAll(str, \"abc\", \"xyz\");\n   // \"xyz test test xyz test test test xyz test test xyz\"",
            "class": "String",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.StyleSheet.js",
            "line": 26,
            "description": "Add a CSS rule to the style sheet",
            "itemtype": "method",
            "name": "addRule",
            "params": [
                {
                    "name": "selector",
                    "description": "The CSS selector for the rule",
                    "type": "String"
                },
                {
                    "name": "rule",
                    "description": "The style definitions for the rule",
                    "type": "String"
                },
                {
                    "name": "index",
                    "description": "The index position of the rule",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "StyleSheet",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.StyleSheet.js",
            "line": 52,
            "description": "Remove a CSS rule from the style sheet",
            "itemtype": "method",
            "name": "removeRule",
            "params": [
                {
                    "name": "The",
                    "description": "index position of the rule to remove",
                    "type": "Integer"
                }
            ],
            "chainable": 1,
            "class": "StyleSheet",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.StyleSheet.js",
            "line": 72,
            "description": "Remove the first CSS rule that matches a selector",
            "itemtype": "method",
            "name": "removeRulesBySelector",
            "params": [
                {
                    "name": "selector",
                    "description": "The CSS selector of the rule to remove",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "StyleSheet",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.StyleSheet.js",
            "line": 95,
            "description": "Remove all CSS rule from the style sheet",
            "itemtype": "method",
            "name": "removeRules",
            "chainable": 1,
            "class": "StyleSheet",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.StyleSheet.js",
            "line": 112,
            "description": "Set the internal text value of the style sheet",
            "itemtype": "method",
            "name": "setInternalValue",
            "params": [
                {
                    "name": "value",
                    "description": "The CSS rules",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "StyleSheet",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Var.js",
            "line": 16,
            "description": "A list of variable type correspondances",
            "itemtype": "property",
            "name": "classes2types",
            "type": "{Object}",
            "static": 1,
            "access": "private",
            "tagname": "",
            "class": "Var",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Var.js",
            "line": 35,
            "description": "Get the type of a variable",
            "itemtype": "method",
            "name": "type",
            "static": 1,
            "params": [
                {
                    "name": "obj",
                    "description": "The variable",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "The type of the variable",
                "type": "String"
            },
            "class": "Var",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Var.js",
            "line": 47,
            "description": "Check if a variable is of a certain type",
            "itemtype": "method",
            "name": "is",
            "static": 1,
            "params": [
                {
                    "name": "obj",
                    "description": "The variable",
                    "type": "Mixed"
                },
                {
                    "name": "type",
                    "description": "The type to check for",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Whether the variable is of the specified type",
                "type": "Boolean"
            },
            "class": "Var",
            "module": "Core"
        },
        {
            "file": "src\\js\\core\\metaScore.Var.js",
            "line": 60,
            "description": "Check if a variable is empty",
            "itemtype": "method",
            "name": "isEmpty",
            "static": 1,
            "params": [
                {
                    "name": "obj",
                    "description": "The variable",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "Whether the variable is empty",
                "type": "Boolean"
            },
            "class": "Var",
            "module": "Core"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.BorderRadius.js",
            "line": 27,
            "description": "Setup the field's UI",
            "itemtype": "method",
            "name": "setupUI",
            "access": "private",
            "tagname": "",
            "class": "editor.field.BorderRadius",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.BorderRadius.js",
            "line": 53,
            "description": "Set the field's value",
            "itemtype": "method",
            "name": "setValue",
            "params": [
                {
                    "name": "value",
                    "description": "The new value",
                    "type": "Mixed"
                },
                {
                    "name": "supressEvent",
                    "description": "Whether to prevent the custom event from firing",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "editor.field.BorderRadius",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.BorderRadius.js",
            "line": 69,
            "description": "The click event handler",
            "itemtype": "method",
            "name": "onClick",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "editor.field.BorderRadius",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.BorderRadius.js",
            "line": 86,
            "description": "The overlay's submit event handler",
            "itemtype": "method",
            "name": "onOverlaySubmit",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "editor.field.BorderRadius",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.BorderRadius.js",
            "line": 100,
            "description": "The clear button's click event handler",
            "itemtype": "method",
            "name": "onClearClick",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "editor.field.BorderRadius",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Buttons.js",
            "line": 7,
            "description": "Fired when a value is selected though a button click",
            "itemtype": "event",
            "name": "valuechange",
            "params": [
                {
                    "name": "field",
                    "description": "The field instance",
                    "type": "Object"
                },
                {
                    "name": "value",
                    "description": "The clicked button's key",
                    "type": "Mixed"
                }
            ],
            "class": "editor.field.ButtonsField",
            "module": "Editor"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Buttons.js",
            "line": 46,
            "description": "Setup the field's UI",
            "itemtype": "method",
            "name": "setupUI",
            "access": "private",
            "tagname": "",
            "class": "editor.field.ButtonsField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Buttons.js",
            "line": 72,
            "description": "Set the field's value",
            "itemtype": "method",
            "name": "setValue",
            "chainable": 1,
            "class": "editor.field.ButtonsField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Buttons.js",
            "line": 82,
            "description": "Get the list of buttons",
            "itemtype": "method",
            "name": "getButtons",
            "return": {
                "description": "The list of buttons as a name/Dom pair",
                "type": "Object"
            },
            "class": "editor.field.ButtonsField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Buttons.js",
            "line": 92,
            "description": "Get a button by name",
            "itemtype": "method",
            "name": "getButton",
            "params": [
                {
                    "name": "name",
                    "description": "The button's name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The button's Dom object",
                "type": "Dom"
            },
            "class": "editor.field.ButtonsField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Checkbox.js",
            "line": 7,
            "description": "Fired when the field's value changes",
            "itemtype": "event",
            "name": "valuechange",
            "params": [
                {
                    "name": "field",
                    "description": "The field instance",
                    "type": "Object"
                },
                {
                    "name": "value",
                    "description": "The new value",
                    "type": "Mixed"
                }
            ],
            "class": "editor.field.Checkbox",
            "module": "Editor"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Checkbox.js",
            "line": 47,
            "description": "Setup the field's UI",
            "itemtype": "method",
            "name": "setupUI",
            "access": "private",
            "tagname": "",
            "class": "editor.field.Checkbox",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Checkbox.js",
            "line": 70,
            "description": "The click event handler",
            "itemtype": "method",
            "name": "onClick",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "editor.field.Checkbox",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Checkbox.js",
            "line": 83,
            "description": "The change event handler",
            "itemtype": "method",
            "name": "onChange",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "editor.field.Checkbox",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Checkbox.js",
            "line": 108,
            "description": "Set the field's value",
            "itemtype": "method",
            "name": "setValue",
            "params": [
                {
                    "name": "value",
                    "description": "The new value",
                    "type": "Mixed"
                },
                {
                    "name": "supressEvent",
                    "description": "Whether to prevent the custom event from firing",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "editor.field.Checkbox",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Checkboxes.js",
            "line": 7,
            "description": "Fired when the field's value changes",
            "itemtype": "event",
            "name": "valuechange",
            "params": [
                {
                    "name": "field",
                    "description": "The field instance",
                    "type": "Object"
                },
                {
                    "name": "value",
                    "description": "The new value",
                    "type": "Mixed"
                }
            ],
            "class": "editor.field.CheckboxesField",
            "module": "Editor"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Checkboxes.js",
            "line": 41,
            "description": "Setup the field's UI",
            "itemtype": "method",
            "name": "setupUI",
            "access": "private",
            "tagname": "",
            "class": "editor.field.CheckboxesField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Checkboxes.js",
            "line": 64,
            "description": "The click event handler",
            "itemtype": "method",
            "name": "onClick",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "editor.field.CheckboxesField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Checkboxes.js",
            "line": 77,
            "description": "The change event handler",
            "itemtype": "method",
            "name": "onChange",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "editor.field.CheckboxesField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Checkboxes.js",
            "line": 103,
            "description": "Set the field's value",
            "itemtype": "method",
            "name": "setValue",
            "params": [
                {
                    "name": "value",
                    "description": "The new value",
                    "type": "Array"
                },
                {
                    "name": "supressEvent",
                    "description": "Whether to prevent the custom event from firing",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "editor.field.CheckboxesField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Checkboxes.js",
            "line": 127,
            "description": "Add a checkbox to the list of checkboxes",
            "itemtype": "method",
            "name": "addCheckbox",
            "params": [
                {
                    "name": "value",
                    "description": "The option's value",
                    "type": "String"
                },
                {
                    "name": "text",
                    "description": "The option's label",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The created Dom object",
                "type": "Dom"
            },
            "class": "editor.field.CheckboxesField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Checkboxes.js",
            "line": 158,
            "description": "Remove a checkbox by value",
            "itemtype": "method",
            "name": "removeCheckbox",
            "params": [
                {
                    "name": "value",
                    "description": "The value of the option to remove",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The checkbox's Dom object",
                "type": "Dom"
            },
            "class": "editor.field.CheckboxesField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Checkboxes.js",
            "line": 173,
            "description": "Remove all groups and options",
            "itemtype": "method",
            "name": "clear",
            "chainable": 1,
            "class": "editor.field.CheckboxesField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Checkboxes.js",
            "line": 185,
            "description": "Disable the field",
            "itemtype": "method",
            "name": "disable",
            "chainable": 1,
            "class": "editor.field.CheckboxesField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Checkboxes.js",
            "line": 201,
            "description": "Enable the field",
            "itemtype": "method",
            "name": "enable",
            "chainable": 1,
            "class": "editor.field.CheckboxesField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Checkboxes.js",
            "line": 217,
            "description": "Toggle the readonly attribute of the field",
            "itemtype": "method",
            "name": "readonly",
            "params": [
                {
                    "name": "readonly",
                    "description": "Whether the field should be readonly, the current state is toggled if not provided",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "editor.field.CheckboxesField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Color.js",
            "line": 7,
            "description": "Fired when the field's value changes",
            "itemtype": "event",
            "name": "valuechange",
            "params": [
                {
                    "name": "field",
                    "description": "The field instance",
                    "type": "Object"
                },
                {
                    "name": "value",
                    "description": "The new value",
                    "type": "Mixed"
                }
            ],
            "class": "editor.field.ColorField",
            "module": "Editor"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Color.js",
            "line": 46,
            "description": "Setup the field's UI",
            "itemtype": "method",
            "name": "setupUI",
            "access": "private",
            "tagname": "",
            "class": "editor.field.ColorField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Color.js",
            "line": 72,
            "description": "Set the field'S value",
            "itemtype": "method",
            "name": "setValue",
            "params": [
                {
                    "name": "value",
                    "description": "The new color's value (see {{#crossLink \"Color/parse:method\"}}Color.parse{{/crossLink}} for valid values)",
                    "type": "Mixed"
                },
                {
                    "name": "supressEvent",
                    "description": "Whether to prevent the custom event from firing",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "editor.field.ColorField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Color.js",
            "line": 99,
            "description": "The click event handler",
            "itemtype": "method",
            "name": "onClick",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "editor.field.ColorField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Color.js",
            "line": 116,
            "description": "The overlay's submit event handler",
            "itemtype": "method",
            "name": "onOverlaySubmit",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "editor.field.ColorField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Color.js",
            "line": 130,
            "description": "The clear button click event handler",
            "itemtype": "method",
            "name": "onClearClick",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "editor.field.ColorField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.File.js",
            "line": 36,
            "description": "Setup the field's UI",
            "itemtype": "method",
            "name": "setupUI",
            "access": "private",
            "tagname": "",
            "class": "editor.field.FileField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.File.js",
            "line": 51,
            "description": "Set the accepted file types",
            "itemtype": "method",
            "name": "setAcceptedTypes",
            "params": [
                {
                    "name": "types",
                    "description": "A comma seperated list of accepted file types (ex: \".gif,.jpg,.png,.doc\" or \"audio/*,video/*,image/*\")",
                    "type": "String"
                }
            ],
            "class": "editor.field.FileField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.File.js",
            "line": 61,
            "description": "Set the field's value",
            "itemtype": "method",
            "name": "setValue",
            "params": [
                {
                    "name": "value",
                    "description": "The new value",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "name",
                            "description": "The file's name",
                            "type": "String"
                        },
                        {
                            "name": "url",
                            "description": "The file's url",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ],
            "chainable": 1,
            "class": "editor.field.FileField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.File.js",
            "line": 95,
            "description": "Helper function to get a selected file from the HTML input field",
            "itemtype": "method",
            "name": "getFile",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "index",
                    "description": "The index of the selected file, all files will be returned if not provided",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "return": {
                "description": "The <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/File\" target=\"_blank\">File</a> or <a href=\"https://developer.mozilla.org/en/docs/Web/API/FileList\" target=\"_blank\">FileList</a>",
                "type": "Mixed"
            },
            "class": "editor.field.FileField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Image.js",
            "line": 7,
            "description": "Fired when the external filebrowser should be opened",
            "itemtype": "event",
            "name": "filebrowser",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to invoke once a file is selected throught the external file browser",
                    "type": "Function"
                }
            ],
            "class": "editor.field.ImageField",
            "module": "Editor"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Image.js",
            "line": 15,
            "description": "Fired when the resize button is clicked",
            "itemtype": "event",
            "name": "resize",
            "params": [
                {
                    "name": "field",
                    "description": "The field instance",
                    "type": "Object"
                },
                {
                    "name": "value",
                    "description": "The field value",
                    "type": "Mixed"
                }
            ],
            "class": "editor.field.ImageField",
            "module": "Editor"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Image.js",
            "line": 53,
            "description": "Setup the field's UI",
            "itemtype": "method",
            "name": "setupUI",
            "access": "private",
            "tagname": "",
            "class": "editor.field.ImageField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Image.js",
            "line": 83,
            "description": "Set the field'S value",
            "itemtype": "method",
            "name": "setValue",
            "params": [
                {
                    "name": "value",
                    "description": "The image file's url",
                    "type": "String"
                },
                {
                    "name": "supressEvent",
                    "description": "Whether to prevent the custom event from firing",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "editor.field.ImageField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Image.js",
            "line": 99,
            "description": "The click event handler",
            "itemtype": "method",
            "name": "onClick",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "editor.field.ImageField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Image.js",
            "line": 114,
            "description": "The resize button click event handler",
            "itemtype": "method",
            "name": "onResizeClick",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "editor.field.ImageField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Image.js",
            "line": 125,
            "description": "The clear button click event handler",
            "itemtype": "method",
            "name": "onClearClick",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "editor.field.ImageField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Image.js",
            "line": 136,
            "description": "The file select event handler",
            "itemtype": "method",
            "name": "onFileSelect",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "url",
                    "description": "The image file's url",
                    "type": "String"
                }
            ],
            "class": "editor.field.ImageField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Number.js",
            "line": 7,
            "description": "Fired when the field's value changes",
            "itemtype": "event",
            "name": "valuechange",
            "params": [
                {
                    "name": "field",
                    "description": "The field instance",
                    "type": "Object"
                },
                {
                    "name": "value",
                    "description": "The new value",
                    "type": "Mixed"
                }
            ],
            "class": "editor.field.NumberField",
            "module": "Editor"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Number.js",
            "line": 58,
            "description": "Setup the field's UI",
            "itemtype": "method",
            "name": "setupUI",
            "access": "private",
            "tagname": "",
            "class": "editor.field.NumberField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Number.js",
            "line": 109,
            "description": "The change event handler",
            "itemtype": "method",
            "name": "onChange",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "editor.field.NumberField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Number.js",
            "line": 120,
            "description": "The input event handler",
            "itemtype": "method",
            "name": "onInput",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "editor.field.NumberField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Number.js",
            "line": 133,
            "description": "The mousewheel event handler",
            "itemtype": "method",
            "name": "onMouseWheel",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "editor.field.NumberField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Number.js",
            "line": 158,
            "description": "The keydown event handler",
            "itemtype": "method",
            "name": "onKeyDown",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "editor.field.NumberField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Number.js",
            "line": 179,
            "description": "The spin button's mousedown event handler",
            "itemtype": "method",
            "name": "onSpinBtnMouseDown",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "editor.field.NumberField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Number.js",
            "line": 207,
            "description": "The spin button's mouseup event handler",
            "itemtype": "method",
            "name": "onSpinBtnMouseUp",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "editor.field.NumberField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Number.js",
            "line": 218,
            "description": "The spin button's mouseout event handler",
            "itemtype": "method",
            "name": "onSpinBtnMouseOut",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "editor.field.NumberField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Number.js",
            "line": 227,
            "description": "Decrement the value by one step",
            "itemtype": "method",
            "name": "spinDown",
            "access": "private",
            "tagname": "",
            "class": "editor.field.NumberField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Number.js",
            "line": 245,
            "description": "Increment the value by one step",
            "itemtype": "method",
            "name": "spinUp",
            "access": "private",
            "tagname": "",
            "class": "editor.field.NumberField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Number.js",
            "line": 263,
            "description": "Set the field's value",
            "itemtype": "method",
            "name": "setValue",
            "params": [
                {
                    "name": "value",
                    "description": "The new value",
                    "type": "Number"
                },
                {
                    "name": "supressEvent",
                    "description": "Whether to prevent the custom event from firing",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "editor.field.NumberField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Number.js",
            "line": 290,
            "description": "Set the minimum allowed value",
            "itemtype": "method",
            "name": "setMin",
            "params": [
                {
                    "name": "value",
                    "description": "The minimum allowed value",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "editor.field.NumberField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Number.js",
            "line": 303,
            "description": "Set the maximum allowed value",
            "itemtype": "method",
            "name": "setMax",
            "params": [
                {
                    "name": "value",
                    "description": "The maximum allowed value",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "editor.field.NumberField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Number.js",
            "line": 316,
            "description": "Reset the field's configs",
            "itemtype": "method",
            "name": "reset",
            "params": [
                {
                    "name": "supressEvent",
                    "description": "Whether to prevent the custom event from firing",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "editor.field.NumberField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Select.js",
            "line": 7,
            "description": "Fired when the field's value changes",
            "itemtype": "event",
            "name": "valuechange",
            "params": [
                {
                    "name": "field",
                    "description": "The field instance",
                    "type": "Object"
                },
                {
                    "name": "value",
                    "description": "The new value",
                    "type": "Mixed"
                }
            ],
            "class": "editor.field.SelectField",
            "module": "Editor"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Select.js",
            "line": 43,
            "description": "Setup the field's UI",
            "itemtype": "method",
            "name": "setupUI",
            "access": "private",
            "tagname": "",
            "class": "editor.field.SelectField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Select.js",
            "line": 73,
            "description": "Adds an option group to the select list",
            "itemtype": "method",
            "name": "addGroup",
            "params": [
                {
                    "name": "label",
                    "description": "The group's text label",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The created Dom object",
                "type": "Dom"
            },
            "class": "editor.field.SelectField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Select.js",
            "line": 88,
            "description": "Add an option to the select list",
            "itemtype": "method",
            "name": "addOption",
            "params": [
                {
                    "name": "value",
                    "description": "The option's value",
                    "type": "String"
                },
                {
                    "name": "text",
                    "description": "The option's label",
                    "type": "String"
                },
                {
                    "name": "group",
                    "description": "The group to append the option to, it will be appended to the root list if not specified",
                    "type": "Dom",
                    "optional": true
                }
            ],
            "return": {
                "description": "The created Dom object",
                "type": "Dom"
            },
            "class": "editor.field.SelectField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Select.js",
            "line": 105,
            "description": "Update an option's label by value",
            "itemtype": "method",
            "name": "updateOption",
            "params": [
                {
                    "name": "value",
                    "description": "The value of the option to update",
                    "type": "String"
                },
                {
                    "name": "text",
                    "description": "The new label's text",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The option's Dom object",
                "type": "Dom"
            },
            "class": "editor.field.SelectField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Select.js",
            "line": 121,
            "description": "Remove an option by value",
            "itemtype": "method",
            "name": "removeOption",
            "params": [
                {
                    "name": "value",
                    "description": "The value of the option to remove",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The option's Dom object",
                "type": "Dom"
            },
            "class": "editor.field.SelectField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Select.js",
            "line": 136,
            "description": "Remove all groups and options",
            "itemtype": "method",
            "name": "clear",
            "chainable": 1,
            "class": "editor.field.SelectField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Select.js",
            "line": 148,
            "description": "Toggle the readonly attribute of the field",
            "itemtype": "method",
            "name": "readonly",
            "params": [
                {
                    "name": "readonly",
                    "description": "Whether the field should be readonly, the current state is toggled if not provided",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "editor.field.SelectField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Text.js",
            "line": 32,
            "description": "Setup the field's UI",
            "itemtype": "method",
            "name": "setupUI",
            "access": "private",
            "tagname": "",
            "class": "editor.field.TextField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Textarea.js",
            "line": 32,
            "description": "Setup the field's UI",
            "itemtype": "method",
            "name": "setupUI",
            "access": "private",
            "tagname": "",
            "class": "editor.field.TextareaField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Time.js",
            "line": 7,
            "description": "Fired when the field's value changes",
            "itemtype": "event",
            "name": "valuechange",
            "params": [
                {
                    "name": "field",
                    "description": "The field instance",
                    "type": "Object"
                },
                {
                    "name": "value",
                    "description": "The new value",
                    "type": "Mixed"
                }
            ],
            "class": "editor.field.TimeField",
            "module": "Editor"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Time.js",
            "line": 16,
            "description": "Fired when the field's checkbox changes",
            "itemtype": "event",
            "name": "checkboxchange",
            "class": "editor.field.TimeField",
            "module": "Editor"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Time.js",
            "line": 23,
            "description": "Fired when the in button is clicked",
            "itemtype": "event",
            "name": "valuein",
            "class": "editor.field.TimeField",
            "module": "Editor"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Time.js",
            "line": 30,
            "description": "Fired when the out button is clicked",
            "itemtype": "event",
            "name": "valueout",
            "class": "editor.field.TimeField",
            "module": "Editor"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Time.js",
            "line": 72,
            "description": "Setup the field's UI",
            "itemtype": "method",
            "name": "setupUI",
            "access": "private",
            "tagname": "",
            "class": "editor.field.TimeField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Time.js",
            "line": 140,
            "description": "The change event handler",
            "itemtype": "method",
            "name": "onChange",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "editor.field.TimeField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Time.js",
            "line": 151,
            "description": "The checkbox change event handler",
            "itemtype": "method",
            "name": "onCheckboxChange",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "editor.field.TimeField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Time.js",
            "line": 164,
            "description": "The sub-field's input event handler",
            "itemtype": "method",
            "name": "onInput",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "editor.field.TimeField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Time.js",
            "line": 190,
            "description": "The in button's click event handler",
            "itemtype": "method",
            "name": "onInClick",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "editor.field.TimeField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Time.js",
            "line": 201,
            "description": "The out button's click event handler",
            "itemtype": "method",
            "name": "onOutClick",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "editor.field.TimeField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Time.js",
            "line": 212,
            "description": "Set the field's value",
            "itemtype": "method",
            "name": "setValue",
            "params": [
                {
                    "name": "centiseconds",
                    "description": "The new value in centiseconds",
                    "type": "Number"
                },
                {
                    "name": "supressEvent",
                    "description": "Whether to prevent the custom event from firing",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "editor.field.TimeField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Time.js",
            "line": 293,
            "description": "Set the minimum allowed value",
            "itemtype": "method",
            "name": "setMin",
            "params": [
                {
                    "name": "value",
                    "description": "The minimum allowed value",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "editor.field.TimeField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Time.js",
            "line": 306,
            "description": "Set the maximum allowed value",
            "itemtype": "method",
            "name": "setMax",
            "params": [
                {
                    "name": "value",
                    "description": "The maximum allowed value",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "editor.field.TimeField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Time.js",
            "line": 319,
            "description": "Check whether the field's checkbox is checked",
            "itemtype": "method",
            "name": "isActive",
            "return": {
                "description": "Whether the field does not have a checkbox or is active",
                "type": "Boolean"
            },
            "class": "editor.field.TimeField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Time.js",
            "line": 329,
            "description": "Activate or deactivate the field by toggling its checkbox if available",
            "itemtype": "method",
            "name": "toggle",
            "params": [
                {
                    "name": "state",
                    "description": "True to activate or false to deactivate the field",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "editor.field.TimeField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Time.js",
            "line": 344,
            "description": "Disable the field",
            "itemtype": "method",
            "name": "disable",
            "chainable": 1,
            "class": "editor.field.TimeField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Time.js",
            "line": 372,
            "description": "Enable the field",
            "itemtype": "method",
            "name": "enable",
            "chainable": 1,
            "class": "editor.field.TimeField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Time.js",
            "line": 405,
            "description": "Toggle the field's readonly state",
            "itemtype": "method",
            "name": "readonly",
            "params": [
                {
                    "name": "readonly",
                    "description": "Whether the field should be readonly, the current state is toggled if not provided",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "editor.field.TimeField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\field\\metaScore.editor.field.Time.js",
            "line": 435,
            "description": "Reset the field's configs",
            "itemtype": "method",
            "name": "reset",
            "params": [
                {
                    "name": "supressEvent",
                    "description": "Whether to prevent the custom event from firing",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "editor.field.TimeField",
            "module": "Editor",
            "namespace": "editor.field"
        },
        {
            "file": "src\\js\\editor\\overlay\\metaScore.editor.overlay.BorderRadius.js",
            "line": 7,
            "description": "Fired when the submit button is clicked",
            "itemtype": "event",
            "name": "submit",
            "params": [
                {
                    "name": "overlay",
                    "description": "The overlay instance",
                    "type": "Object"
                },
                {
                    "name": "value",
                    "description": "The border radius value in CSS format",
                    "type": "String"
                }
            ],
            "class": "editor.overlay.BorderRadius",
            "module": "Editor"
        },
        {
            "file": "src\\js\\editor\\overlay\\metaScore.editor.overlay.BorderRadius.js",
            "line": 45,
            "description": "Setup the overlay's UI",
            "itemtype": "method",
            "name": "setupUI",
            "access": "private",
            "tagname": "",
            "class": "editor.overlay.BorderRadius",
            "module": "Editor",
            "namespace": "editor.overlay"
        },
        {
            "file": "src\\js\\editor\\overlay\\metaScore.editor.overlay.BorderRadius.js",
            "line": 118,
            "description": "The valuechange event handler",
            "itemtype": "method",
            "name": "onValueChange",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "editor.overlay.BorderRadius",
            "module": "Editor",
            "namespace": "editor.overlay"
        },
        {
            "file": "src\\js\\editor\\overlay\\metaScore.editor.overlay.BorderRadius.js",
            "line": 141,
            "description": "Set the current value",
            "itemtype": "method",
            "name": "setValue",
            "params": [
                {
                    "name": "val",
                    "description": "The value in CSS border-radius format",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "editor.overlay.BorderRadius",
            "module": "Editor",
            "namespace": "editor.overlay"
        },
        {
            "file": "src\\js\\editor\\overlay\\metaScore.editor.overlay.BorderRadius.js",
            "line": 206,
            "description": "Get the current value",
            "itemtype": "method",
            "name": "getValue",
            "return": {
                "description": "The value in CSS border-radius format",
                "type": "String"
            },
            "class": "editor.overlay.BorderRadius",
            "module": "Editor",
            "namespace": "editor.overlay"
        },
        {
            "file": "src\\js\\editor\\overlay\\metaScore.editor.overlay.BorderRadius.js",
            "line": 216,
            "description": "The apply button's click event handler",
            "itemtype": "method",
            "name": "onApplyClick",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "editor.overlay.BorderRadius",
            "module": "Editor",
            "namespace": "editor.overlay"
        },
        {
            "file": "src\\js\\editor\\overlay\\metaScore.editor.overlay.BorderRadius.js",
            "line": 228,
            "description": "The cancel button's click event handler",
            "itemtype": "method",
            "name": "onCancelClick",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "editor.overlay.BorderRadius",
            "module": "Editor",
            "namespace": "editor.overlay"
        },
        {
            "file": "src\\js\\editor\\overlay\\metaScore.editor.overlay.ColorSelector.js",
            "line": 7,
            "description": "Fired when the submit button is clicked",
            "itemtype": "event",
            "name": "submit",
            "params": [
                {
                    "name": "overlay",
                    "description": "The overlay instance",
                    "type": "Object"
                },
                {
                    "name": "value",
                    "description": "The color value in rgba format",
                    "type": "Object"
                }
            ],
            "class": "editor.overlay.ColorSelector",
            "module": "Editor"
        },
        {
            "file": "src\\js\\editor\\overlay\\metaScore.editor.overlay.ColorSelector.js",
            "line": 45,
            "description": "Setup the overlay's UI",
            "itemtype": "method",
            "name": "setupUI",
            "access": "private",
            "tagname": "",
            "class": "editor.overlay.ColorSelector",
            "module": "Editor",
            "namespace": "editor.overlay"
        },
        {
            "file": "src\\js\\editor\\overlay\\metaScore.editor.overlay.ColorSelector.js",
            "line": 135,
            "description": "Set the current value",
            "itemtype": "method",
            "name": "setValue",
            "params": [
                {
                    "name": "val",
                    "description": "The value in a format accepted by {{#crossLink \"Color/parse:method\"}}Color.parse{{/crossLink}}",
                    "type": "Mixed"
                }
            ],
            "chainable": 1,
            "class": "editor.overlay.ColorSelector",
            "module": "Editor",
            "namespace": "editor.overlay"
        },
        {
            "file": "src\\js\\editor\\overlay\\metaScore.editor.overlay.ColorSelector.js",
            "line": 152,
            "description": "Update the selected value",
            "itemtype": "method",
            "name": "updateValue",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "val",
                    "description": "The value in a format accepted by {{#crossLink \"Color/parse:method\"}}Color.parse{{/crossLink}}",
                    "type": "Mixed"
                },
                {
                    "name": "refillAlpha",
                    "description": "Whether to refill the alpha indicator canvas",
                    "type": "Boolean"
                },
                {
                    "name": "updatePositions",
                    "description": "Whether to update the cursor positions",
                    "type": "Boolean"
                },
                {
                    "name": "updateInputs",
                    "description": "Whether to update the input values",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "editor.overlay.ColorSelector",
            "module": "Editor",
            "namespace": "editor.overlay"
        },
        {
            "file": "src\\js\\editor\\overlay\\metaScore.editor.overlay.ColorSelector.js",
            "line": 212,
            "description": "Fill the gradient's canvas",
            "itemtype": "method",
            "name": "fillGradient",
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "class": "editor.overlay.ColorSelector",
            "module": "Editor",
            "namespace": "editor.overlay"
        },
        {
            "file": "src\\js\\editor\\overlay\\metaScore.editor.overlay.ColorSelector.js",
            "line": 251,
            "description": "Fill the previous color indicator canvas",
            "itemtype": "method",
            "name": "fillPrevious",
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "class": "editor.overlay.ColorSelector",
            "module": "Editor",
            "namespace": "editor.overlay"
        },
        {
            "file": "src\\js\\editor\\overlay\\metaScore.editor.overlay.ColorSelector.js",
            "line": 268,
            "description": "Fill the current color indicator canvas",
            "itemtype": "method",
            "name": "fillCurrent",
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "class": "editor.overlay.ColorSelector",
            "module": "Editor",
            "namespace": "editor.overlay"
        },
        {
            "file": "src\\js\\editor\\overlay\\metaScore.editor.overlay.ColorSelector.js",
            "line": 285,
            "description": "Fill the alpha indicator canvas",
            "itemtype": "method",
            "name": "fillAlpha",
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "class": "editor.overlay.ColorSelector",
            "module": "Editor",
            "namespace": "editor.overlay"
        },
        {
            "file": "src\\js\\editor\\overlay\\metaScore.editor.overlay.ColorSelector.js",
            "line": 309,
            "description": "The controls input event handler",
            "itemtype": "method",
            "name": "onControlInput",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "editor.overlay.ColorSelector",
            "module": "Editor",
            "namespace": "editor.overlay"
        },
        {
            "file": "src\\js\\editor\\overlay\\metaScore.editor.overlay.ColorSelector.js",
            "line": 327,
            "description": "The gradient mousedown event handler",
            "itemtype": "method",
            "name": "onGradientMousedown",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "editor.overlay.ColorSelector",
            "module": "Editor",
            "namespace": "editor.overlay"
        },
        {
            "file": "src\\js\\editor\\overlay\\metaScore.editor.overlay.ColorSelector.js",
            "line": 340,
            "description": "The gradient mouseup event handler",
            "itemtype": "method",
            "name": "onGradientMouseup",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "editor.overlay.ColorSelector",
            "module": "Editor",
            "namespace": "editor.overlay"
        },
        {
            "file": "src\\js\\editor\\overlay\\metaScore.editor.overlay.ColorSelector.js",
            "line": 353,
            "description": "The gradient click event handler",
            "itemtype": "method",
            "name": "onGradientClick",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "editor.overlay.ColorSelector",
            "module": "Editor",
            "namespace": "editor.overlay"
        },
        {
            "file": "src\\js\\editor\\overlay\\metaScore.editor.overlay.ColorSelector.js",
            "line": 387,
            "description": "The gradient mousemove event handler",
            "itemtype": "method",
            "name": "onGradientMousemove",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "editor.overlay.ColorSelector",
            "module": "Editor",
            "namespace": "editor.overlay"
        },
        {
            "file": "src\\js\\editor\\overlay\\metaScore.editor.overlay.ColorSelector.js",
            "line": 396,
            "description": "The alpha mousedown event handler",
            "itemtype": "method",
            "name": "onAlphaMousedown",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "editor.overlay.ColorSelector",
            "module": "Editor",
            "namespace": "editor.overlay"
        },
        {
            "file": "src\\js\\editor\\overlay\\metaScore.editor.overlay.ColorSelector.js",
            "line": 409,
            "description": "The alpha mouseup event handler",
            "itemtype": "method",
            "name": "onAlphaMouseup",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "editor.overlay.ColorSelector",
            "module": "Editor",
            "namespace": "editor.overlay"
        },
        {
            "file": "src\\js\\editor\\overlay\\metaScore.editor.overlay.ColorSelector.js",
            "line": 422,
            "description": "The alpha click event handler",
            "itemtype": "method",
            "name": "onAlphaClick",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "editor.overlay.ColorSelector",
            "module": "Editor",
            "namespace": "editor.overlay"
        },
        {
            "file": "src\\js\\editor\\overlay\\metaScore.editor.overlay.ColorSelector.js",
            "line": 445,
            "description": "The alpha mousemove event handler",
            "itemtype": "method",
            "name": "onAlphaClick",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "editor.overlay.ColorSelector",
            "module": "Editor",
            "namespace": "editor.overlay"
        },
        {
            "file": "src\\js\\editor\\overlay\\metaScore.editor.overlay.ColorSelector.js",
            "line": 454,
            "description": "The apply button click event handler",
            "itemtype": "method",
            "name": "onApplyClick",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "editor.overlay.ColorSelector",
            "module": "Editor",
            "namespace": "editor.overlay"
        },
        {
            "file": "src\\js\\editor\\overlay\\metaScore.editor.overlay.ColorSelector.js",
            "line": 467,
            "description": "The cancel button click event handler",
            "itemtype": "method",
            "name": "onCancelClick",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "editor.overlay.ColorSelector",
            "module": "Editor",
            "namespace": "editor.overlay"
        },
        {
            "file": "src\\js\\editor\\overlay\\metaScore.editor.overlay.GuideDetails.js",
            "line": 7,
            "description": "Fired when the submit button is clicked",
            "itemtype": "event",
            "name": "submit",
            "params": [
                {
                    "name": "overlay",
                    "description": "The overlay instance",
                    "type": "Object"
                },
                {
                    "name": "values",
                    "description": "The field values",
                    "type": "Object"
                }
            ],
            "class": "editor.overlay.GuideDetails",
            "module": "Editor"
        },
        {
            "file": "src\\js\\editor\\overlay\\metaScore.editor.overlay.GuideDetails.js",
            "line": 52,
            "description": "Setup the overlay's UI",
            "itemtype": "method",
            "name": "setupUI",
            "access": "private",
            "tagname": "",
            "class": "editor.overlay.GuideDetails",
            "module": "Editor",
            "namespace": "editor.overlay"
        },
        {
            "file": "src\\js\\editor\\overlay\\metaScore.editor.overlay.GuideDetails.js",
            "line": 181,
            "description": "Get a field by name",
            "itemtype": "method",
            "name": "getField",
            "params": [
                {
                    "name": "name",
                    "description": "The field's name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The field object",
                "type": "editor.Field"
            },
            "class": "editor.overlay.GuideDetails",
            "module": "Editor",
            "namespace": "editor.overlay"
        },
        {
            "file": "src\\js\\editor\\overlay\\metaScore.editor.overlay.GuideDetails.js",
            "line": 198,
            "description": "Set the field values",
            "itemtype": "method",
            "name": "setValues",
            "params": [
                {
                    "name": "values",
                    "description": "A list of field values in name/value pairs",
                    "type": "Object"
                },
                {
                    "name": "supressEvent",
                    "description": "Whether to prevent the custom event from firing",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "editor.overlay.GuideDetails",
            "module": "Editor",
            "namespace": "editor.overlay"
        },
        {
            "file": "src\\js\\editor\\overlay\\metaScore.editor.overlay.GuideDetails.js",
            "line": 232,
            "description": "Clears all field values",
            "itemtype": "method",
            "name": "clearValues",
            "params": [
                {
                    "name": "supressEvent",
                    "description": "Whether to prevent the custom event from firing",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "editor.overlay.GuideDetails",
            "module": "Editor",
            "namespace": "editor.overlay"
        },
        {
            "file": "src\\js\\editor\\overlay\\metaScore.editor.overlay.GuideDetails.js",
            "line": 247,
            "description": "Get all changed field values",
            "itemtype": "method",
            "name": "getValues",
            "return": {
                "description": "The values of changed fields in name/value pairs",
                "type": "Object"
            },
            "class": "editor.overlay.GuideDetails",
            "module": "Editor",
            "namespace": "editor.overlay"
        },
        {
            "file": "src\\js\\editor\\overlay\\metaScore.editor.overlay.GuideDetails.js",
            "line": 257,
            "description": "The fields change event handler",
            "itemtype": "method",
            "name": "onFieldValueChange",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "editor.overlay.GuideDetails",
            "module": "Editor",
            "namespace": "editor.overlay"
        },
        {
            "file": "src\\js\\editor\\overlay\\metaScore.editor.overlay.GuideDetails.js",
            "line": 288,
            "description": "The form submit event handler",
            "itemtype": "method",
            "name": "onFormSubmit",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "editor.overlay.GuideDetails",
            "module": "Editor",
            "namespace": "editor.overlay"
        },
        {
            "file": "src\\js\\editor\\overlay\\metaScore.editor.overlay.GuideDetails.js",
            "line": 302,
            "description": "The close button click event handler",
            "itemtype": "method",
            "name": "onCloseClick",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "editor.overlay.GuideDetails",
            "module": "Editor",
            "namespace": "editor.overlay"
        },
        {
            "file": "src\\js\\editor\\overlay\\metaScore.editor.overlay.GuideDetails.js",
            "line": 320,
            "description": "The cancel button click event handler",
            "itemtype": "method",
            "name": "onCancelClick",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "editor.overlay.GuideDetails",
            "module": "Editor",
            "namespace": "editor.overlay"
        },
        {
            "file": "src\\js\\editor\\overlay\\metaScore.editor.overlay.GuideSelector.js",
            "line": 7,
            "description": "Fired when a guide's select button is clicked",
            "itemtype": "event",
            "name": "submit",
            "params": [
                {
                    "name": "overlay",
                    "description": "The overlay instance",
                    "type": "Object"
                },
                {
                    "name": "guide",
                    "description": "The guide's data",
                    "type": "Object"
                },
                {
                    "name": "vid",
                    "description": "The selected vid of the guide",
                    "type": "Integer"
                }
            ],
            "class": "editor.overlay.GuideSelector",
            "module": "Editor"
        },
        {
            "file": "src\\js\\editor\\overlay\\metaScore.editor.overlay.GuideSelector.js",
            "line": 50,
            "description": "Setup the overlay's UI",
            "itemtype": "method",
            "name": "setupUI",
            "access": "private",
            "tagname": "",
            "class": "editor.overlay.GuideSelector",
            "module": "Editor",
            "namespace": "editor.overlay"
        },
        {
            "file": "src\\js\\editor\\overlay\\metaScore.editor.overlay.GuideSelector.js",
            "line": 180,
            "description": "Show the overlay",
            "itemtype": "method",
            "name": "show",
            "chainable": 1,
            "class": "editor.overlay.GuideSelector",
            "module": "Editor",
            "namespace": "editor.overlay"
        },
        {
            "file": "src\\js\\editor\\overlay\\metaScore.editor.overlay.GuideSelector.js",
            "line": 194,
            "description": "The onload success event handler",
            "itemtype": "method",
            "name": "onLoadSuccess",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "xhr",
                    "description": "The <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\" target=\"_blank\">XMLHttpRequest</a> object",
                    "type": "XMLHttpRequest"
                }
            ],
            "class": "editor.overlay.GuideSelector",
            "module": "Editor",
            "namespace": "editor.overlay"
        },
        {
            "file": "src\\js\\editor\\overlay\\metaScore.editor.overlay.GuideSelector.js",
            "line": 222,
            "description": "The load error event handler",
            "itemtype": "method",
            "name": "onLoadError",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "xhr",
                    "description": "The <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\" target=\"_blank\">XMLHttpRequest</a> object",
                    "type": "XMLHttpRequest"
                }
            ],
            "class": "editor.overlay.GuideSelector",
            "module": "Editor",
            "namespace": "editor.overlay"
        },
        {
            "file": "src\\js\\editor\\overlay\\metaScore.editor.overlay.GuideSelector.js",
            "line": 232,
            "description": "The filter form submit event handler",
            "itemtype": "method",
            "name": "onFilterFormSubmit",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "editor.overlay.GuideSelector",
            "module": "Editor",
            "namespace": "editor.overlay"
        },
        {
            "file": "src\\js\\editor\\overlay\\metaScore.editor.overlay.GuideSelector.js",
            "line": 252,
            "description": "The filters reset button click event handler",
            "itemtype": "method",
            "name": "onFiltersResetClick",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "editor.overlay.GuideSelector",
            "module": "Editor",
            "namespace": "editor.overlay"
        },
        {
            "file": "src\\js\\editor\\overlay\\metaScore.editor.overlay.GuideSelector.js",
            "line": 265,
            "description": "Setup the results",
            "itemtype": "method",
            "name": "setupResults",
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "class": "editor.overlay.GuideSelector",
            "module": "Editor",
            "namespace": "editor.overlay"
        },
        {
            "file": "src\\js\\editor\\overlay\\metaScore.editor.overlay.GuideSelector.js",
            "line": 371,
            "description": "Load guides",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "data",
                    "description": "The data to send with the request",
                    "type": "FormData"
                }
            ],
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "class": "editor.overlay.GuideSelector",
            "module": "Editor",
            "namespace": "editor.overlay"
        },
        {
            "file": "src\\js\\editor\\overlay\\metaScore.editor.overlay.Share.js",
            "line": 43,
            "description": "Setup the overlay's UI",
            "itemtype": "method",
            "name": "setupUI",
            "access": "private",
            "tagname": "",
            "class": "editor.overlay.Share",
            "module": "Editor",
            "namespace": "editor.overlay"
        },
        {
            "file": "src\\js\\editor\\overlay\\metaScore.editor.overlay.Share.js",
            "line": 132,
            "description": "Get a field by name",
            "itemtype": "method",
            "name": "getField",
            "params": [
                {
                    "name": "name",
                    "description": "The field's name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The field object",
                "type": "editor.Field"
            },
            "class": "editor.overlay.Share",
            "module": "Editor",
            "namespace": "editor.overlay"
        },
        {
            "file": "src\\js\\editor\\overlay\\metaScore.editor.overlay.Share.js",
            "line": 149,
            "description": "The fields change event handler",
            "itemtype": "method",
            "name": "onFieldValueChange",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "editor.overlay.Share",
            "module": "Editor",
            "namespace": "editor.overlay"
        },
        {
            "file": "src\\js\\editor\\overlay\\metaScore.editor.overlay.Share.js",
            "line": 160,
            "description": "Construct and retur the embed code",
            "itemtype": "method",
            "name": "getEmbedCode",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "The embed code",
                "type": "String"
            },
            "class": "editor.overlay.Share",
            "module": "Editor",
            "namespace": "editor.overlay"
        },
        {
            "file": "src\\js\\editor\\panel\\metaScore.editor.panel.Block.js",
            "line": 37,
            "description": "Get the currently associated component's label",
            "itemtype": "method",
            "name": "getSelectorLabel",
            "return": {
                "description": "The component's label for use in the selector",
                "type": "String"
            },
            "class": "editor.panel.Block",
            "module": "Editor",
            "namespace": "editor.panel"
        },
        {
            "file": "src\\js\\editor\\panel\\metaScore.editor.panel.Element.js",
            "line": 7,
            "description": "Fired when a component's text is locked",
            "itemtype": "event",
            "name": "textlock",
            "params": [
                {
                    "name": "component",
                    "description": "The component instance",
                    "type": "Object"
                }
            ],
            "class": "editor.panel.Element",
            "module": "Editor"
        },
        {
            "file": "src\\js\\editor\\panel\\metaScore.editor.panel.Element.js",
            "line": 15,
            "description": "Fired when a component's text is unlocked",
            "itemtype": "event",
            "name": "textunlock",
            "params": [
                {
                    "name": "component",
                    "description": "The component instance",
                    "type": "Object"
                }
            ],
            "class": "editor.panel.Element",
            "module": "Editor"
        },
        {
            "file": "src\\js\\editor\\panel\\metaScore.editor.panel.Element.js",
            "line": 63,
            "description": "Get the currently associated component's label",
            "itemtype": "method",
            "name": "getSelectorLabel",
            "return": {
                "description": "The component's label for use in the selector",
                "type": "String"
            },
            "class": "editor.panel.Element",
            "module": "Editor",
            "namespace": "editor.panel"
        },
        {
            "file": "src\\js\\editor\\panel\\metaScore.editor.panel.Element.js",
            "line": 89,
            "description": "The fields' valuechange event handler",
            "itemtype": "method",
            "name": "onFieldValueChange",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "editor.panel.Element",
            "module": "Editor",
            "namespace": "editor.panel"
        },
        {
            "file": "src\\js\\editor\\panel\\metaScore.editor.panel.Element.js",
            "line": 127,
            "description": "The componentset event handler",
            "itemtype": "method",
            "name": "onComponentSet",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "editor.panel.Element",
            "module": "Editor",
            "namespace": "editor.panel"
        },
        {
            "file": "src\\js\\editor\\panel\\metaScore.editor.panel.Element.js",
            "line": 140,
            "description": "The componentunset event handler",
            "itemtype": "method",
            "name": "onComponentUnset",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "editor.panel.Element",
            "module": "Editor",
            "namespace": "editor.panel"
        },
        {
            "file": "src\\js\\editor\\panel\\metaScore.editor.panel.Element.js",
            "line": 153,
            "description": "The beforeimageset event handler",
            "itemtype": "method",
            "name": "onBeforeImageSet",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "property",
                    "description": "The updated component property's name",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "The new image url",
                    "type": "String"
                }
            ],
            "class": "editor.panel.Element",
            "module": "Editor",
            "namespace": "editor.panel"
        },
        {
            "file": "src\\js\\editor\\panel\\metaScore.editor.panel.Element.js",
            "line": 199,
            "description": "Get an image's metadata (name, width, and height)",
            "itemtype": "method",
            "name": "getImageMetadata",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "url",
                    "description": "The image's url",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback to call with the retreived metadata",
                    "type": "Function"
                }
            ],
            "class": "editor.panel.Element",
            "module": "Editor",
            "namespace": "editor.panel"
        },
        {
            "file": "src\\js\\editor\\panel\\metaScore.editor.panel.Element.js",
            "line": 226,
            "description": "Lock the component's text",
            "itemtype": "method",
            "name": "lockText",
            "params": [
                {
                    "name": "supressEvent",
                    "description": "Whether to prevent the custom event from firing",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "editor.panel.Element",
            "module": "Editor",
            "namespace": "editor.panel"
        },
        {
            "file": "src\\js\\editor\\panel\\metaScore.editor.panel.Element.js",
            "line": 263,
            "description": "Unlock the component's text",
            "itemtype": "method",
            "name": "unlockText",
            "params": [
                {
                    "name": "supressEvent",
                    "description": "Whether to prevent the custom event from firing",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "editor.panel.Element",
            "module": "Editor",
            "namespace": "editor.panel"
        },
        {
            "file": "src\\js\\editor\\panel\\metaScore.editor.panel.Element.js",
            "line": 300,
            "description": "The component dblclick event handler",
            "itemtype": "method",
            "name": "onComponentDblClick",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "editor.panel.Element",
            "module": "Editor",
            "namespace": "editor.panel"
        },
        {
            "file": "src\\js\\editor\\panel\\metaScore.editor.panel.Element.js",
            "line": 311,
            "description": "The component's contents click event handler",
            "itemtype": "method",
            "name": "onComponentContentsClick",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "editor.panel.Element",
            "module": "Editor",
            "namespace": "editor.panel"
        },
        {
            "file": "src\\js\\editor\\panel\\metaScore.editor.panel.Element.js",
            "line": 322,
            "description": "The component's contents key event handler",
            "itemtype": "method",
            "name": "onComponentContentsKey",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "editor.panel.Element",
            "module": "Editor",
            "namespace": "editor.panel"
        },
        {
            "file": "src\\js\\editor\\panel\\metaScore.editor.panel.Toolbar.js",
            "line": 64,
            "description": "Get the title's Dom object",
            "itemtype": "method",
            "name": "getTitle",
            "return": {
                "description": "The Dom object",
                "type": "Dom"
            },
            "class": "editor.panel.Toolbar",
            "module": "Editor",
            "namespace": "editor.panel"
        },
        {
            "file": "src\\js\\editor\\panel\\metaScore.editor.panel.Toolbar.js",
            "line": 74,
            "description": "Get the selector field",
            "itemtype": "method",
            "name": "getSelector",
            "return": {
                "description": "The selector field",
                "type": "editor.field.Select"
            },
            "class": "editor.panel.Toolbar",
            "module": "Editor",
            "namespace": "editor.panel"
        },
        {
            "file": "src\\js\\editor\\panel\\metaScore.editor.panel.Toolbar.js",
            "line": 84,
            "description": "Get the dropdown menu",
            "itemtype": "method",
            "name": "getMenu",
            "return": {
                "description": "The dropdown menu",
                "type": "editor.DropDownMenu"
            },
            "class": "editor.panel.Toolbar",
            "module": "Editor",
            "namespace": "editor.panel"
        },
        {
            "file": "src\\js\\editor\\panel\\metaScore.editor.panel.Toolbar.js",
            "line": 94,
            "description": "Add a button",
            "itemtype": "method",
            "name": "addButton",
            "params": [
                {
                    "name": "action",
                    "description": "The button's associated action",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The created button",
                "type": "Button"
            },
            "class": "editor.panel.Toolbar",
            "module": "Editor",
            "namespace": "editor.panel"
        },
        {
            "file": "src\\js\\editor\\panel\\metaScore.editor.panel.Toolbar.js",
            "line": 108,
            "description": "Get a button by associated action",
            "itemtype": "method",
            "name": "getButton",
            "params": [
                {
                    "name": "action",
                    "description": "The button's associated action",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The button's Dom object",
                "type": "Dom"
            },
            "class": "editor.panel.Toolbar",
            "module": "Editor",
            "namespace": "editor.panel"
        },
        {
            "file": "src\\js\\editor\\panel\\metaScore.editor.panel.Toolbar.js",
            "line": 119,
            "description": "Toggle the enabled state of a menu item",
            "itemtype": "method",
            "name": "toggleMenuItem",
            "params": [
                {
                    "name": "action",
                    "description": "The item's associated action",
                    "type": "String"
                },
                {
                    "name": "state",
                    "description": "The enabled state to set",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "editor.panel.Toolbar",
            "module": "Editor",
            "namespace": "editor.panel"
        },
        {
            "file": "src\\js\\editor\\metaScore.editor.DropDownMenu.js",
            "line": 22,
            "description": "Add an item",
            "itemtype": "method",
            "name": "addItem",
            "params": [
                {
                    "name": "action",
                    "description": "The action associated with the item",
                    "type": "String"
                },
                {
                    "name": "label",
                    "description": "The text to display",
                    "type": "String"
                }
            ],
            "return": {
                "description": "item The added item",
                "type": "Dom"
            },
            "class": "editor.DropDownMenu",
            "module": "Editor",
            "namespace": "editor"
        },
        {
            "file": "src\\js\\editor\\metaScore.editor.DropDownMenu.js",
            "line": 37,
            "description": "Toggle an item's enabled state",
            "itemtype": "method",
            "name": "toggleItem",
            "params": [
                {
                    "name": "action",
                    "description": "The action associated with the item",
                    "type": "String"
                },
                {
                    "name": "state",
                    "description": "The state to set the item to, the current state is toggled if not provided",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "editor.DropDownMenu",
            "module": "Editor",
            "namespace": "editor"
        },
        {
            "file": "src\\js\\editor\\metaScore.editor.Field.js",
            "line": 7,
            "description": "Fired when the field's value changes",
            "itemtype": "event",
            "name": "valuechange",
            "params": [
                {
                    "name": "field",
                    "description": "The field instance",
                    "type": "Object"
                },
                {
                    "name": "value",
                    "description": "The new value",
                    "type": "Mixed"
                }
            ],
            "class": "editor.Field",
            "module": "Editor"
        },
        {
            "file": "src\\js\\editor\\metaScore.editor.Field.js",
            "line": 16,
            "description": "Fired when the field is reset",
            "itemtype": "event",
            "name": "reset",
            "params": [
                {
                    "name": "field",
                    "description": "The field instance",
                    "type": "Object"
                }
            ],
            "class": "editor.Field",
            "module": "Editor"
        },
        {
            "file": "src\\js\\editor\\metaScore.editor.Field.js",
            "line": 77,
            "description": "Setup the field's UI",
            "itemtype": "method",
            "name": "setupUI",
            "access": "private",
            "tagname": "",
            "class": "editor.Field",
            "module": "Editor",
            "namespace": "editor"
        },
        {
            "file": "src\\js\\editor\\metaScore.editor.Field.js",
            "line": 99,
            "description": "Set the description text",
            "itemtype": "method",
            "name": "setDescription",
            "params": [
                {
                    "name": "description",
                    "description": "The description text",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "editor.Field",
            "module": "Editor",
            "namespace": "editor"
        },
        {
            "file": "src\\js\\editor\\metaScore.editor.Field.js",
            "line": 117,
            "description": "The change event handler",
            "itemtype": "method",
            "name": "onChange",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "editor.Field",
            "module": "Editor",
            "namespace": "editor"
        },
        {
            "file": "src\\js\\editor\\metaScore.editor.Field.js",
            "line": 130,
            "description": "Set the field's value",
            "itemtype": "method",
            "name": "setValue",
            "params": [
                {
                    "name": "value",
                    "description": "The new value",
                    "type": "Mixed"
                },
                {
                    "name": "supressEvent",
                    "description": "Whether to prevent the custom event from firing",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "editor.Field",
            "module": "Editor",
            "namespace": "editor"
        },
        {
            "file": "src\\js\\editor\\metaScore.editor.Field.js",
            "line": 149,
            "description": "Get the field's current value",
            "itemtype": "method",
            "name": "getValue",
            "return": {
                "description": "The value",
                "type": "Mixed"
            },
            "class": "editor.Field",
            "module": "Editor",
            "namespace": "editor"
        },
        {
            "file": "src\\js\\editor\\metaScore.editor.Field.js",
            "line": 159,
            "description": "Disable the field",
            "itemtype": "method",
            "name": "disable",
            "chainable": 1,
            "class": "editor.Field",
            "module": "Editor",
            "namespace": "editor"
        },
        {
            "file": "src\\js\\editor\\metaScore.editor.Field.js",
            "line": 177,
            "description": "Enable the field",
            "itemtype": "method",
            "name": "enable",
            "chainable": 1,
            "class": "editor.Field",
            "module": "Editor",
            "namespace": "editor"
        },
        {
            "file": "src\\js\\editor\\metaScore.editor.Field.js",
            "line": 195,
            "description": "Toggle the field's readonly state",
            "itemtype": "method",
            "name": "readonly",
            "params": [
                {
                    "name": "readonly",
                    "description": "Whether the field should be readonly, the current state is toggled if not provided",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "editor.Field",
            "module": "Editor",
            "namespace": "editor"
        },
        {
            "file": "src\\js\\editor\\metaScore.editor.Field.js",
            "line": 214,
            "description": "Reset the field's configs",
            "itemtype": "method",
            "name": "reset",
            "params": [
                {
                    "name": "supressEvent",
                    "description": "Whether to prevent the custom event from firing",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "editor.Field",
            "module": "Editor",
            "namespace": "editor"
        },
        {
            "file": "src\\js\\editor\\metaScore.editor.Fieldset.js",
            "line": 39,
            "description": "Setup the fieldset's UI",
            "itemtype": "method",
            "name": "setupUI",
            "access": "private",
            "tagname": "",
            "class": "editor.Fieldset",
            "module": "Editor",
            "namespace": "editor"
        },
        {
            "file": "src\\js\\editor\\metaScore.editor.Fieldset.js",
            "line": 67,
            "description": "The legend's click handler",
            "itemtype": "method",
            "name": "onLegendClick",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "editor.Fieldset",
            "module": "Editor",
            "namespace": "editor"
        },
        {
            "file": "src\\js\\editor\\metaScore.editor.Fieldset.js",
            "line": 78,
            "description": "Toggle the fieldset's collapsed state",
            "itemtype": "method",
            "name": "toggle",
            "params": [
                {
                    "name": "collapse",
                    "description": "Whether to collapse or expand the fieldset. The state is toggled if not specified",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "editor.Fieldset",
            "module": "Editor",
            "namespace": "editor"
        },
        {
            "file": "src\\js\\editor\\metaScore.editor.Fieldset.js",
            "line": 91,
            "description": "Get the fieldset's contents",
            "itemtype": "method",
            "name": "getContents",
            "return": {
                "description": "The contents",
                "type": "Dom"
            },
            "class": "editor.Fieldset",
            "module": "Editor",
            "namespace": "editor"
        },
        {
            "file": "src\\js\\editor\\metaScore.editor.History.js",
            "line": 7,
            "description": "Fired when a command is added",
            "itemtype": "event",
            "name": "add",
            "params": [
                {
                    "name": "command",
                    "description": "The added command",
                    "type": "Object"
                }
            ],
            "class": "editor.History",
            "module": "Editor"
        },
        {
            "file": "src\\js\\editor\\metaScore.editor.History.js",
            "line": 15,
            "description": "Fired when a command is undone",
            "itemtype": "event",
            "name": "undo",
            "params": [
                {
                    "name": "command",
                    "description": "The added command",
                    "type": "Object"
                }
            ],
            "class": "editor.History",
            "module": "Editor"
        },
        {
            "file": "src\\js\\editor\\metaScore.editor.History.js",
            "line": 23,
            "description": "Fired when a command is redone",
            "itemtype": "event",
            "name": "redo",
            "params": [
                {
                    "name": "command",
                    "description": "The added command",
                    "type": "Object"
                }
            ],
            "class": "editor.History",
            "module": "Editor"
        },
        {
            "file": "src\\js\\editor\\metaScore.editor.History.js",
            "line": 31,
            "description": "Fired when the command history is cleared",
            "itemtype": "event",
            "name": "clear",
            "class": "editor.History",
            "module": "Editor"
        },
        {
            "file": "src\\js\\editor\\metaScore.editor.History.js",
            "line": 65,
            "description": "Execute a command's action",
            "itemtype": "method",
            "name": "execute",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "command",
                    "description": "The command object",
                    "type": "Object"
                },
                {
                    "name": "action",
                    "description": "The action ('undo' or 'redo') to execute",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "editor.History",
            "module": "Editor",
            "namespace": "editor"
        },
        {
            "file": "src\\js\\editor\\metaScore.editor.History.js",
            "line": 84,
            "description": "Add a command",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "command",
                    "description": "The command object. It should contain an 'undo' and a 'redo' function",
                    "type": "Object"
                }
            ],
            "chainable": 1,
            "class": "editor.History",
            "module": "Editor",
            "namespace": "editor"
        },
        {
            "file": "src\\js\\editor\\metaScore.editor.History.js",
            "line": 115,
            "description": "Execute the undo action of the current command",
            "itemtype": "method",
            "name": "undo",
            "chainable": 1,
            "class": "editor.History",
            "module": "Editor",
            "namespace": "editor"
        },
        {
            "file": "src\\js\\editor\\metaScore.editor.History.js",
            "line": 139,
            "description": "Execute the redo action of the previous command",
            "itemtype": "method",
            "name": "redo",
            "chainable": 1,
            "class": "editor.History",
            "module": "Editor",
            "namespace": "editor"
        },
        {
            "file": "src\\js\\editor\\metaScore.editor.History.js",
            "line": 163,
            "description": "Remove all commands",
            "itemtype": "method",
            "name": "clear",
            "chainable": 1,
            "class": "editor.History",
            "module": "Editor",
            "namespace": "editor"
        },
        {
            "file": "src\\js\\editor\\metaScore.editor.History.js",
            "line": 183,
            "description": "Check if an undo action is available",
            "itemtype": "method",
            "name": "hasUndo",
            "return": {
                "description": "Whether an undo action is available",
                "type": "Boolean"
            },
            "class": "editor.History",
            "module": "Editor",
            "namespace": "editor"
        },
        {
            "file": "src\\js\\editor\\metaScore.editor.History.js",
            "line": 193,
            "description": "Check if a redo action is available",
            "itemtype": "method",
            "name": "hasRedo",
            "return": {
                "description": "Whether a redo action is available",
                "type": "Boolean"
            },
            "class": "editor.History",
            "module": "Editor",
            "namespace": "editor"
        },
        {
            "file": "src\\js\\editor\\metaScore.editor.MainMenu.js",
            "line": 24,
            "description": "Setup the menu's UI",
            "itemtype": "method",
            "name": "setupUI",
            "access": "private",
            "tagname": "",
            "class": "editor.MainMenu",
            "module": "Editor",
            "namespace": "editor"
        },
        {
            "file": "src\\js\\editor\\metaScore.editor.MainMenu.js",
            "line": 196,
            "description": "Toogle a button's enabled state",
            "itemtype": "method",
            "name": "toggleButton",
            "params": [
                {
                    "name": "action",
                    "description": "The button's associated action",
                    "type": "String"
                },
                {
                    "name": "state",
                    "description": "The state to set the button to, the current state is toggled if not provided",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "editor.MainMenu",
            "module": "Editor",
            "namespace": "editor"
        },
        {
            "file": "src\\js\\editor\\metaScore.editor.Panel.js",
            "line": 7,
            "description": "Fired before a component is set",
            "itemtype": "event",
            "name": "componentbeforeset",
            "params": [
                {
                    "name": "component",
                    "description": "The component instance",
                    "type": "Object"
                }
            ],
            "class": "editor.Panel",
            "module": "Editor"
        },
        {
            "file": "src\\js\\editor\\metaScore.editor.Panel.js",
            "line": 15,
            "description": "Fired when a component is set",
            "itemtype": "event",
            "name": "componentset",
            "params": [
                {
                    "name": "component",
                    "description": "The component instance",
                    "type": "Object"
                }
            ],
            "class": "editor.Panel",
            "module": "Editor"
        },
        {
            "file": "src\\js\\editor\\metaScore.editor.Panel.js",
            "line": 23,
            "description": "Fired before a component is unset",
            "itemtype": "event",
            "name": "componentbeforeunset",
            "params": [
                {
                    "name": "component",
                    "description": "The component instance",
                    "type": "Object"
                }
            ],
            "class": "editor.Panel",
            "module": "Editor"
        },
        {
            "file": "src\\js\\editor\\metaScore.editor.Panel.js",
            "line": 31,
            "description": "Fired when a component is unset",
            "itemtype": "event",
            "name": "componentunset",
            "params": [
                {
                    "name": "component",
                    "description": "The component instance",
                    "type": "Object"
                }
            ],
            "class": "editor.Panel",
            "module": "Editor"
        },
        {
            "file": "src\\js\\editor\\metaScore.editor.Panel.js",
            "line": 39,
            "description": "Fired when a component's values change",
            "itemtype": "event",
            "name": "valueschange",
            "params": [
                {
                    "name": "component",
                    "description": "The component instance",
                    "type": "Object"
                },
                {
                    "name": "old_values",
                    "description": "The component instance",
                    "type": "Object"
                },
                {
                    "name": "new_values",
                    "description": "The component instance",
                    "type": "Object"
                }
            ],
            "class": "editor.Panel",
            "module": "Editor"
        },
        {
            "file": "src\\js\\editor\\metaScore.editor.Panel.js",
            "line": 96,
            "description": "Setup the panel's fields",
            "itemtype": "method",
            "name": "setupFields",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "properties",
                    "description": "The properties description object",
                    "type": "Object"
                }
            ],
            "chainable": 1,
            "class": "editor.Panel",
            "module": "Editor",
            "namespace": "editor"
        },
        {
            "file": "src\\js\\editor\\metaScore.editor.Panel.js",
            "line": 125,
            "description": "Get the panel's toolbar",
            "itemtype": "method",
            "name": "getToolbar",
            "return": {
                "description": "The toolbar",
                "type": "editor.panel.Toolbar"
            },
            "class": "editor.Panel",
            "module": "Editor",
            "namespace": "editor"
        },
        {
            "file": "src\\js\\editor\\metaScore.editor.Panel.js",
            "line": 135,
            "description": "Get a field by name",
            "itemtype": "method",
            "name": "getField",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the field to get",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The field",
                "type": "editor.Field"
            },
            "class": "editor.Panel",
            "module": "Editor",
            "namespace": "editor"
        },
        {
            "file": "src\\js\\editor\\metaScore.editor.Panel.js",
            "line": 150,
            "description": "Enable all fields",
            "itemtype": "method",
            "name": "enableFields",
            "chainable": 1,
            "class": "editor.Panel",
            "module": "Editor",
            "namespace": "editor"
        },
        {
            "file": "src\\js\\editor\\metaScore.editor.Panel.js",
            "line": 164,
            "description": "Show a field by name",
            "itemtype": "method",
            "name": "showField",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the field to show",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "editor.Panel",
            "module": "Editor",
            "namespace": "editor"
        },
        {
            "file": "src\\js\\editor\\metaScore.editor.Panel.js",
            "line": 177,
            "description": "Hide a field by name",
            "itemtype": "method",
            "name": "hideField",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the field to show",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "editor.Panel",
            "module": "Editor",
            "namespace": "editor"
        },
        {
            "file": "src\\js\\editor\\metaScore.editor.Panel.js",
            "line": 190,
            "description": "Toggle the panel's collapsed state",
            "itemtype": "method",
            "name": "toggleState",
            "chainable": 1,
            "class": "editor.Panel",
            "module": "Editor",
            "namespace": "editor"
        },
        {
            "file": "src\\js\\editor\\metaScore.editor.Panel.js",
            "line": 202,
            "description": "Disable the panel",
            "itemtype": "method",
            "name": "disable",
            "chainable": 1,
            "class": "editor.Panel",
            "module": "Editor",
            "namespace": "editor"
        },
        {
            "file": "src\\js\\editor\\metaScore.editor.Panel.js",
            "line": 214,
            "description": "Enable the panel",
            "itemtype": "method",
            "name": "enable",
            "chainable": 1,
            "class": "editor.Panel",
            "module": "Editor",
            "namespace": "editor"
        },
        {
            "file": "src\\js\\editor\\metaScore.editor.Panel.js",
            "line": 226,
            "description": "Get the currently associated component",
            "itemtype": "method",
            "name": "getComponent",
            "return": {
                "description": "The component",
                "type": "player.Component"
            },
            "class": "editor.Panel",
            "module": "Editor",
            "namespace": "editor"
        },
        {
            "file": "src\\js\\editor\\metaScore.editor.Panel.js",
            "line": 236,
            "description": "Get the currently associated component's label",
            "itemtype": "method",
            "name": "getSelectorLabel",
            "return": {
                "description": "The component's label for use in the selector",
                "type": "String"
            },
            "class": "editor.Panel",
            "module": "Editor",
            "namespace": "editor"
        },
        {
            "file": "src\\js\\editor\\metaScore.editor.Panel.js",
            "line": 246,
            "description": "Set the associated component",
            "itemtype": "method",
            "name": "setComponent",
            "params": [
                {
                    "name": "component",
                    "description": "The component",
                    "type": "player.Component"
                },
                {
                    "name": "supressEvent",
                    "description": "Whether to prevent the custom event from firing",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "editor.Panel",
            "module": "Editor",
            "namespace": "editor"
        },
        {
            "file": "src\\js\\editor\\metaScore.editor.Panel.js",
            "line": 295,
            "description": "Unset the associated component",
            "itemtype": "method",
            "name": "unsetComponent",
            "params": [
                {
                    "name": "supressEvent",
                    "description": "Whether to prevent the custom event from firing",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "editor.Panel",
            "module": "Editor",
            "namespace": "editor"
        },
        {
            "file": "src\\js\\editor\\metaScore.editor.Panel.js",
            "line": 338,
            "description": "Set or unset the draggability of the associated component",
            "itemtype": "method",
            "name": "updateDraggable",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "draggable",
                    "description": "Whether the component should be draggable",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "editor.Panel",
            "module": "Editor",
            "namespace": "editor"
        },
        {
            "file": "src\\js\\editor\\metaScore.editor.Panel.js",
            "line": 356,
            "description": "Set or unset the resizability of the associated component",
            "itemtype": "method",
            "name": "updateResizable",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "resizable",
                    "description": "Whether the component should be resizable",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "editor.Panel",
            "module": "Editor",
            "namespace": "editor"
        },
        {
            "file": "src\\js\\editor\\metaScore.editor.Panel.js",
            "line": 374,
            "description": "The toolbar buttons' click event handler",
            "itemtype": "method",
            "name": "onToolbarButtonClick",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "editor.Panel",
            "module": "Editor",
            "namespace": "editor"
        },
        {
            "file": "src\\js\\editor\\metaScore.editor.Panel.js",
            "line": 424,
            "description": "The component's propchange event handler",
            "itemtype": "method",
            "name": "onComponentPropChange",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "editor.Panel",
            "module": "Editor",
            "namespace": "editor"
        },
        {
            "file": "src\\js\\editor\\metaScore.editor.Panel.js",
            "line": 439,
            "description": "The component's dragstart event handler",
            "itemtype": "method",
            "name": "onComponentDragStart",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "editor.Panel",
            "module": "Editor",
            "namespace": "editor"
        },
        {
            "file": "src\\js\\editor\\metaScore.editor.Panel.js",
            "line": 450,
            "description": "The component's drag event handler",
            "itemtype": "method",
            "name": "onComponentDrag",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "editor.Panel",
            "module": "Editor",
            "namespace": "editor"
        },
        {
            "file": "src\\js\\editor\\metaScore.editor.Panel.js",
            "line": 461,
            "description": "The component's dragend event handler",
            "itemtype": "method",
            "name": "onComponentDragEnd",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "editor.Panel",
            "module": "Editor",
            "namespace": "editor"
        },
        {
            "file": "src\\js\\editor\\metaScore.editor.Panel.js",
            "line": 479,
            "description": "The component's resizestart event handler",
            "itemtype": "method",
            "name": "onComponentResizeStart",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "editor.Panel",
            "module": "Editor",
            "namespace": "editor"
        },
        {
            "file": "src\\js\\editor\\metaScore.editor.Panel.js",
            "line": 492,
            "description": "The component's resize event handler",
            "itemtype": "method",
            "name": "onComponentResize",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "editor.Panel",
            "module": "Editor",
            "namespace": "editor"
        },
        {
            "file": "src\\js\\editor\\metaScore.editor.Panel.js",
            "line": 505,
            "description": "The component's resizeend event handler",
            "itemtype": "method",
            "name": "onComponentResizeEnd",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "editor.Panel",
            "module": "Editor",
            "namespace": "editor"
        },
        {
            "file": "src\\js\\editor\\metaScore.editor.Panel.js",
            "line": 523,
            "description": "The fields' valuechange event handler",
            "itemtype": "method",
            "name": "onFieldValueChange",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "editor.Panel",
            "module": "Editor",
            "namespace": "editor"
        },
        {
            "file": "src\\js\\editor\\metaScore.editor.Panel.js",
            "line": 547,
            "description": "The imagefields' resize event handler",
            "itemtype": "method",
            "name": "onImageFieldResize",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "editor.Panel",
            "module": "Editor",
            "namespace": "editor"
        },
        {
            "file": "src\\js\\editor\\metaScore.editor.Panel.js",
            "line": 574,
            "description": "Update a field's value",
            "itemtype": "method",
            "name": "updateFieldValue",
            "params": [
                {
                    "name": "name",
                    "description": "The field's name",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The new value",
                    "type": "Mixed"
                },
                {
                    "name": "supressEvent",
                    "description": "Whether to prevent the custom event from firing",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "todo": [
                "add the synched/non synched strings to blocks (see Editor.updateBlockSelector)"
            ],
            "class": "editor.Panel",
            "module": "Editor",
            "namespace": "editor"
        },
        {
            "file": "src\\js\\editor\\metaScore.editor.Panel.js",
            "line": 614,
            "description": "Update fields' values",
            "itemtype": "method",
            "name": "updateFieldValues",
            "params": [
                {
                    "name": "values",
                    "description": "A list of values with the field names as keys",
                    "type": "Object"
                },
                {
                    "name": "supressEvent",
                    "description": "Whether to prevent the custom event from firing",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "editor.Panel",
            "module": "Editor",
            "namespace": "editor"
        },
        {
            "file": "src\\js\\editor\\metaScore.editor.Panel.js",
            "line": 637,
            "description": "Update a component's properties",
            "itemtype": "method",
            "name": "updateProperties",
            "params": [
                {
                    "name": "component",
                    "description": "The component to update",
                    "type": "player.Component"
                },
                {
                    "name": "values",
                    "description": "A list of values with the property names as keys",
                    "type": "Object"
                }
            ],
            "chainable": 1,
            "class": "editor.Panel",
            "module": "Editor",
            "namespace": "editor"
        },
        {
            "file": "src\\js\\editor\\metaScore.editor.Panel.js",
            "line": 657,
            "description": "Toggle the enabled state of some fields",
            "itemtype": "method",
            "name": "toggleFields",
            "params": [
                {
                    "name": "names",
                    "description": "The list of field names to toggle",
                    "type": "Array"
                },
                {
                    "name": "toggle",
                    "description": "Whether the fields are to be enabled or disabled",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "editor.Panel",
            "module": "Editor",
            "namespace": "editor"
        },
        {
            "file": "src\\js\\editor\\metaScore.editor.Panel.js",
            "line": 682,
            "description": "Get the associated component's property value",
            "itemtype": "method",
            "name": "getValue",
            "params": [
                {
                    "name": "name",
                    "description": "The propoerty's name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The value",
                "type": "Mixed"
            },
            "class": "editor.Panel",
            "module": "Editor",
            "namespace": "editor"
        },
        {
            "file": "src\\js\\editor\\metaScore.editor.Panel.js",
            "line": 693,
            "description": "Get the associated component's properties values",
            "itemtype": "method",
            "name": "getValues",
            "params": [
                {
                    "name": "names",
                    "description": "The names of properties, if not set, the panel's field names are used",
                    "type": "Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "A list of values keyed by property name",
                "type": "Object"
            },
            "class": "editor.Panel",
            "module": "Editor",
            "namespace": "editor"
        },
        {
            "file": "src\\js\\player\\component\\element\\metaScore.player.component.element.Cursor.js",
            "line": 7,
            "description": "Fired when a cursor is clicked, requesting a time update",
            "itemtype": "event",
            "name": "time",
            "params": [
                {
                    "name": "element",
                    "description": "The element instance",
                    "type": "Object"
                },
                {
                    "name": "time",
                    "description": "The time value according to the click position",
                    "type": "Number"
                }
            ],
            "class": "player.component.element.Cursor",
            "module": "Player"
        },
        {
            "file": "src\\js\\player\\component\\element\\metaScore.player.component.element.Cursor.js",
            "line": 140,
            "description": "Setup the cursor's UI",
            "itemtype": "method",
            "name": "setupUI",
            "access": "private",
            "tagname": "",
            "class": "player.component.element.Cursor",
            "module": "Player",
            "namespace": "player.component.element"
        },
        {
            "file": "src\\js\\player\\component\\element\\metaScore.player.component.element.Cursor.js",
            "line": 158,
            "description": "The click event handler",
            "itemtype": "method",
            "name": "onClick",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "player.component.element.Cursor",
            "module": "Player",
            "namespace": "player.component.element"
        },
        {
            "file": "src\\js\\player\\component\\element\\metaScore.player.component.element.Cursor.js",
            "line": 204,
            "description": "The cuepoint update event handler",
            "itemtype": "method",
            "name": "onCuePointUpdate",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "player.component.element.Cursor",
            "module": "Player",
            "namespace": "player.component.element"
        },
        {
            "file": "src\\js\\player\\component\\element\\metaScore.player.component.element.Image.js",
            "line": 24,
            "description": "Setup the image's UI",
            "itemtype": "method",
            "name": "setupUI",
            "access": "private",
            "tagname": "",
            "class": "player.component.element.Cursor",
            "module": "Player",
            "namespace": "player.component.element"
        },
        {
            "file": "src\\js\\player\\component\\element\\metaScore.player.component.element.Text.js",
            "line": 7,
            "description": "Fired when a page link is clicked",
            "itemtype": "event",
            "name": "page",
            "params": [
                {
                    "name": "element",
                    "description": "The element instance",
                    "type": "Object"
                },
                {
                    "name": "block",
                    "description": "The block instance",
                    "type": "Object"
                },
                {
                    "name": "index",
                    "description": "The page index",
                    "type": "Integer"
                }
            ],
            "class": "player.component.element.Cursor",
            "module": "Player"
        },
        {
            "file": "src\\js\\player\\component\\element\\metaScore.player.component.element.Text.js",
            "line": 17,
            "description": "Fired when a play link is clicked",
            "itemtype": "event",
            "name": "play",
            "params": [
                {
                    "name": "element",
                    "description": "The element instance",
                    "type": "Object"
                },
                {
                    "name": "inTime",
                    "description": "The start time",
                    "type": "Number"
                },
                {
                    "name": "outTime",
                    "description": "The end time",
                    "type": "Number"
                },
                {
                    "name": "rIndex",
                    "description": "The reading index",
                    "type": "Integer"
                }
            ],
            "class": "player.component.element.Cursor",
            "module": "Player"
        },
        {
            "file": "src\\js\\player\\component\\element\\metaScore.player.component.element.Text.js",
            "line": 67,
            "description": "Setup the text's UI",
            "itemtype": "method",
            "name": "setupUI",
            "access": "private",
            "tagname": "",
            "class": "player.component.element.Cursor",
            "module": "Player",
            "namespace": "player.component.element"
        },
        {
            "file": "src\\js\\player\\component\\element\\metaScore.player.component.element.Text.js",
            "line": 80,
            "description": "The link click event handler",
            "itemtype": "method",
            "name": "onLinkClick",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "player.component.element.Cursor",
            "module": "Player",
            "namespace": "player.component.element"
        },
        {
            "file": "src\\js\\player\\component\\metaScore.player.component.Block.js",
            "line": 7,
            "description": "Fired when a page is added",
            "itemtype": "event",
            "name": "pageadd",
            "params": [
                {
                    "name": "block",
                    "description": "The block instance",
                    "type": "Object"
                },
                {
                    "name": "page",
                    "description": "The page instance",
                    "type": "Object"
                }
            ],
            "class": "player.component.Block",
            "module": "Player"
        },
        {
            "file": "src\\js\\player\\component\\metaScore.player.component.Block.js",
            "line": 16,
            "description": "Fired when a page is removed",
            "itemtype": "event",
            "name": "pageremove",
            "params": [
                {
                    "name": "block",
                    "description": "The block instance",
                    "type": "Object"
                },
                {
                    "name": "page",
                    "description": "The page instance",
                    "type": "Object"
                }
            ],
            "class": "player.component.Block",
            "module": "Player"
        },
        {
            "file": "src\\js\\player\\component\\metaScore.player.component.Block.js",
            "line": 25,
            "description": "Fired when the active page is set",
            "itemtype": "event",
            "name": "pageactivate",
            "params": [
                {
                    "name": "block",
                    "description": "The block instance",
                    "type": "Object"
                },
                {
                    "name": "page",
                    "description": "The page instance",
                    "type": "Object"
                },
                {
                    "name": "basis",
                    "description": "The reason behind this action",
                    "type": "String"
                }
            ],
            "class": "player.component.Block",
            "module": "Player"
        },
        {
            "file": "src\\js\\player\\component\\metaScore.player.component.Block.js",
            "line": 246,
            "description": "Setup the block's UI",
            "itemtype": "method",
            "name": "setupUI",
            "access": "private",
            "tagname": "",
            "class": "player.component.Block",
            "module": "Player",
            "namespace": "player.component"
        },
        {
            "file": "src\\js\\player\\component\\metaScore.player.component.Block.js",
            "line": 267,
            "description": "Page cuepointstart event handler",
            "itemtype": "method",
            "name": "onPageCuePointStart",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "player.component.Block",
            "module": "Player",
            "namespace": "player.component"
        },
        {
            "file": "src\\js\\player\\component\\metaScore.player.component.Block.js",
            "line": 278,
            "description": "Pager click event handler",
            "itemtype": "method",
            "name": "onPagerClick",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "player.component.Block",
            "module": "Player",
            "namespace": "player.component"
        },
        {
            "file": "src\\js\\player\\component\\metaScore.player.component.Block.js",
            "line": 308,
            "description": "Get the block's pages",
            "itemtype": "method",
            "name": "getPages",
            "return": {
                "description": "List of pages",
                "type": "Array"
            },
            "class": "player.component.Block",
            "module": "Player",
            "namespace": "player.component"
        },
        {
            "file": "src\\js\\player\\component\\metaScore.player.component.Block.js",
            "line": 324,
            "description": "Add a page",
            "itemtype": "method",
            "name": "addPage",
            "params": [
                {
                    "name": "configs",
                    "description": "Page configs or a player.component.Page instance",
                    "type": "Mixed"
                },
                {
                    "name": "index",
                    "description": "The new page's index",
                    "type": "Integer"
                },
                {
                    "name": "supressEvent",
                    "description": "Whether to supress the pageadd event",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "The added page",
                "type": "player.component.Page"
            },
            "class": "player.component.Block",
            "module": "Player",
            "namespace": "player.component"
        },
        {
            "file": "src\\js\\player\\component\\metaScore.player.component.Block.js",
            "line": 373,
            "description": "Remove a page",
            "itemtype": "method",
            "name": "removePage",
            "params": [
                {
                    "name": "page",
                    "description": "The page to remove",
                    "type": "player.component.Page"
                },
                {
                    "name": "supressEvent",
                    "description": "Whether to supress the pageremove event",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "The removed page",
                "type": "player.component.Page"
            },
            "class": "player.component.Block",
            "module": "Player",
            "namespace": "player.component"
        },
        {
            "file": "src\\js\\player\\component\\metaScore.player.component.Block.js",
            "line": 403,
            "description": "Remove all pages",
            "itemtype": "method",
            "name": "removePages",
            "chainable": 1,
            "class": "player.component.Block",
            "module": "Player",
            "namespace": "player.component"
        },
        {
            "file": "src\\js\\player\\component\\metaScore.player.component.Block.js",
            "line": 415,
            "description": "Get a page by index",
            "itemtype": "method",
            "name": "getPage",
            "params": [
                {
                    "name": "index",
                    "description": "The page's index",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "The page",
                "type": "player.component.Page"
            },
            "class": "player.component.Block",
            "module": "Player",
            "namespace": "player.component"
        },
        {
            "file": "src\\js\\player\\component\\metaScore.player.component.Block.js",
            "line": 428,
            "description": "Get the index of a page",
            "itemtype": "method",
            "name": "getPageIndex",
            "params": [
                {
                    "name": "page",
                    "description": "The page",
                    "type": "player.component.Page"
                }
            ],
            "return": {
                "description": "The page's index",
                "type": "Integer"
            },
            "class": "player.component.Block",
            "module": "Player",
            "namespace": "player.component"
        },
        {
            "file": "src\\js\\player\\component\\metaScore.player.component.Block.js",
            "line": 439,
            "description": "Get the currently active page",
            "itemtype": "method",
            "name": "getActivePage",
            "return": {
                "description": "The page",
                "type": "player.component.Page"
            },
            "class": "player.component.Block",
            "module": "Player",
            "namespace": "player.component"
        },
        {
            "file": "src\\js\\player\\component\\metaScore.player.component.Block.js",
            "line": 449,
            "description": "Get the index of the currently active page",
            "itemtype": "method",
            "name": "getActivePageIndex",
            "return": {
                "description": "The index",
                "type": "Integer"
            },
            "class": "player.component.Block",
            "module": "Player",
            "namespace": "player.component"
        },
        {
            "file": "src\\js\\player\\component\\metaScore.player.component.Block.js",
            "line": 459,
            "description": "Get the page count",
            "itemtype": "method",
            "name": "getPageCount",
            "return": {
                "description": "The number of pages",
                "type": "Integer"
            },
            "class": "player.component.Block",
            "module": "Player",
            "namespace": "player.component"
        },
        {
            "file": "src\\js\\player\\component\\metaScore.player.component.Block.js",
            "line": 469,
            "description": "Set the active page",
            "itemtype": "method",
            "name": "setActivePage",
            "params": [
                {
                    "name": "page",
                    "description": "The page to activate or its index",
                    "type": "Mixed"
                },
                {
                    "name": "supressEvent",
                    "description": "Whether to supress the pageactivate event",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "chainable": 1,
            "class": "player.component.Block",
            "module": "Player",
            "namespace": "player.component"
        },
        {
            "file": "src\\js\\player\\component\\metaScore.player.component.Block.js",
            "line": 499,
            "description": "Update the pager",
            "itemtype": "method",
            "name": "updatePager",
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "class": "player.component.Block",
            "module": "Player",
            "namespace": "player.component"
        },
        {
            "file": "src\\js\\player\\component\\metaScore.player.component.Block.js",
            "line": 517,
            "description": "Set/Unset the draggable behaviour",
            "itemtype": "method",
            "name": "setDraggable",
            "params": [
                {
                    "name": "draggable",
                    "description": "Whether to activate or deactivate the draggable",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "The draggable behaviour",
                "type": "Draggable"
            },
            "class": "player.component.Block",
            "module": "Player",
            "namespace": "player.component"
        },
        {
            "file": "src\\js\\player\\component\\metaScore.player.component.Block.js",
            "line": 551,
            "description": "Set/Unset the resizable behaviour",
            "itemtype": "method",
            "name": "setDraggable",
            "params": [
                {
                    "name": "resizable",
                    "description": "Whether to activate or deactivate the resizable",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "The resizable behaviour",
                "type": "Resizable"
            },
            "class": "player.component.Block",
            "module": "Player",
            "namespace": "player.component"
        },
        {
            "file": "src\\js\\player\\component\\metaScore.player.component.Controller.js",
            "line": 92,
            "description": "Setup the controller's UI",
            "itemtype": "method",
            "name": "setupUI",
            "access": "private",
            "tagname": "",
            "class": "player.component.Controller",
            "module": "Player",
            "namespace": "player.component"
        },
        {
            "file": "src\\js\\player\\component\\metaScore.player.component.Controller.js",
            "line": 119,
            "description": "Get the value of the controller's name property",
            "itemtype": "method",
            "name": "getName",
            "return": {
                "description": "The name",
                "type": "String"
            },
            "class": "player.component.Controller",
            "module": "Player",
            "namespace": "player.component"
        },
        {
            "file": "src\\js\\player\\component\\metaScore.player.component.Controller.js",
            "line": 129,
            "description": "Update the displayed time",
            "itemtype": "method",
            "name": "updateTime",
            "params": [
                {
                    "name": "time",
                    "description": "The time value in centiseconds",
                    "type": "Integer"
                }
            ],
            "chainable": 1,
            "class": "player.component.Controller",
            "module": "Player",
            "namespace": "player.component"
        },
        {
            "file": "src\\js\\player\\component\\metaScore.player.component.Controller.js",
            "line": 146,
            "description": "Set/Unset the draggable behaviour",
            "itemtype": "method",
            "name": "setDraggable",
            "params": [
                {
                    "name": "draggable",
                    "description": "Whether to activate or deactivate the draggable",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "The draggable behaviour",
                "type": "Draggable"
            },
            "class": "player.component.Controller",
            "module": "Player",
            "namespace": "player.component"
        },
        {
            "file": "src\\js\\player\\component\\metaScore.player.component.Element.js",
            "line": 258,
            "description": "Setup the element's UI",
            "itemtype": "method",
            "name": "setupUI",
            "access": "private",
            "tagname": "",
            "class": "player.component.Controller",
            "module": "Player",
            "namespace": "player.component"
        },
        {
            "file": "src\\js\\player\\component\\metaScore.player.component.Element.js",
            "line": 274,
            "description": "Get the page component this element belongs to",
            "itemtype": "method",
            "name": "getPage",
            "return": {
                "description": "The page",
                "type": "player.component.Page"
            },
            "class": "player.component.Controller",
            "module": "Player",
            "namespace": "player.component"
        },
        {
            "file": "src\\js\\player\\component\\metaScore.player.component.Element.js",
            "line": 291,
            "description": "The cuepoint start event handler",
            "itemtype": "method",
            "name": "onCuePointStart",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "player.component.Controller",
            "module": "Player",
            "namespace": "player.component"
        },
        {
            "file": "src\\js\\player\\component\\metaScore.player.component.Element.js",
            "line": 302,
            "description": "The cuepoint stop event handler",
            "itemtype": "method",
            "name": "onCuePointStop",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "player.component.Controller",
            "module": "Player",
            "namespace": "player.component"
        },
        {
            "file": "src\\js\\player\\component\\metaScore.player.component.Element.js",
            "line": 313,
            "description": "Set/Unset the draggable behaviour",
            "itemtype": "method",
            "name": "setDraggable",
            "params": [
                {
                    "name": "draggable",
                    "description": "Whether to activate or deactivate the draggable",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "The draggable behaviour",
                "type": "Draggable"
            },
            "class": "player.component.Controller",
            "module": "Player",
            "namespace": "player.component"
        },
        {
            "file": "src\\js\\player\\component\\metaScore.player.component.Element.js",
            "line": 343,
            "description": "Set/Unset the resizable behaviour",
            "itemtype": "method",
            "name": "setDraggable",
            "params": [
                {
                    "name": "resizable",
                    "description": "Whether to activate or deactivate the resizable",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "The resizable behaviour",
                "type": "Resizable"
            },
            "class": "player.component.Controller",
            "module": "Player",
            "namespace": "player.component"
        },
        {
            "file": "src\\js\\player\\component\\metaScore.player.component.Media.js",
            "line": 7,
            "description": "Fired when the media source is set",
            "itemtype": "event",
            "name": "sourcesset",
            "params": [
                {
                    "name": "media",
                    "description": "The media instance",
                    "type": "Object"
                }
            ],
            "class": "player.component.Controller",
            "module": "Player"
        },
        {
            "file": "src\\js\\player\\component\\metaScore.player.component.Media.js",
            "line": 15,
            "description": "Fired when the metadata has loaded",
            "itemtype": "event",
            "name": "loadedmetadata",
            "params": [
                {
                    "name": "media",
                    "description": "The media instance",
                    "type": "Object"
                }
            ],
            "class": "player.component.Controller",
            "module": "Player"
        },
        {
            "file": "src\\js\\player\\component\\metaScore.player.component.Media.js",
            "line": 23,
            "description": "Fired when the media starts playing",
            "itemtype": "event",
            "name": "play",
            "params": [
                {
                    "name": "media",
                    "description": "The media instance",
                    "type": "Object"
                }
            ],
            "class": "player.component.Controller",
            "module": "Player"
        },
        {
            "file": "src\\js\\player\\component\\metaScore.player.component.Media.js",
            "line": 31,
            "description": "Fired when the media is paused",
            "itemtype": "event",
            "name": "pause",
            "params": [
                {
                    "name": "media",
                    "description": "The media instance",
                    "type": "Object"
                }
            ],
            "class": "player.component.Controller",
            "module": "Player"
        },
        {
            "file": "src\\js\\player\\component\\metaScore.player.component.Media.js",
            "line": 39,
            "description": "Fired when a seek operation begins",
            "itemtype": "event",
            "name": "seeking",
            "params": [
                {
                    "name": "media",
                    "description": "The media instance",
                    "type": "Object"
                }
            ],
            "class": "player.component.Controller",
            "module": "Player"
        },
        {
            "file": "src\\js\\player\\component\\metaScore.player.component.Media.js",
            "line": 47,
            "description": "Fired when a seek operation completes",
            "itemtype": "event",
            "name": "seeked",
            "params": [
                {
                    "name": "media",
                    "description": "The media instance",
                    "type": "Object"
                }
            ],
            "class": "player.component.Controller",
            "module": "Player"
        },
        {
            "file": "src\\js\\player\\component\\metaScore.player.component.Media.js",
            "line": 55,
            "description": "Fired when the media's time changed",
            "itemtype": "event",
            "name": "timeupdate",
            "params": [
                {
                    "name": "media",
                    "description": "The media instance",
                    "type": "Object"
                }
            ],
            "class": "player.component.Controller",
            "module": "Player"
        },
        {
            "file": "src\\js\\player\\component\\metaScore.player.component.Media.js",
            "line": 229,
            "description": "Set the media sources",
            "itemtype": "method",
            "name": "setSources",
            "params": [
                {
                    "name": "sources",
                    "description": "The list of sources as objects with 'url' and 'mime' keys",
                    "type": "Array"
                },
                {
                    "name": "supressEvent",
                    "description": "Whether to supress the sourcesset event",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "chainable": 1,
            "class": "player.component.Controller",
            "module": "Player",
            "namespace": "player.component"
        },
        {
            "file": "src\\js\\player\\component\\metaScore.player.component.Media.js",
            "line": 256,
            "description": "Get the value of the media's name property",
            "itemtype": "method",
            "name": "getName",
            "return": {
                "description": "The name",
                "type": "String"
            },
            "class": "player.component.Controller",
            "module": "Player",
            "namespace": "player.component"
        },
        {
            "file": "src\\js\\player\\component\\metaScore.player.component.Media.js",
            "line": 266,
            "description": "The loadedmetadata event handler",
            "itemtype": "method",
            "name": "onLoadedMetadata",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "player.component.Controller",
            "module": "Player",
            "namespace": "player.component"
        },
        {
            "file": "src\\js\\player\\component\\metaScore.player.component.Media.js",
            "line": 277,
            "description": "The play event handler",
            "itemtype": "method",
            "name": "onPlay",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "player.component.Controller",
            "module": "Player",
            "namespace": "player.component"
        },
        {
            "file": "src\\js\\player\\component\\metaScore.player.component.Media.js",
            "line": 294,
            "description": "The pause event handler",
            "itemtype": "method",
            "name": "onPause",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "player.component.Controller",
            "module": "Player",
            "namespace": "player.component"
        },
        {
            "file": "src\\js\\player\\component\\metaScore.player.component.Media.js",
            "line": 307,
            "description": "The timeupdate event handler",
            "itemtype": "method",
            "name": "onTimeUpdate",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "player.component.Controller",
            "module": "Player",
            "namespace": "player.component"
        },
        {
            "file": "src\\js\\player\\component\\metaScore.player.component.Media.js",
            "line": 320,
            "description": "The seeking event handler",
            "itemtype": "method",
            "name": "onSeeking",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "player.component.Controller",
            "module": "Player",
            "namespace": "player.component"
        },
        {
            "file": "src\\js\\player\\component\\metaScore.player.component.Media.js",
            "line": 331,
            "description": "The seeked event handler",
            "itemtype": "method",
            "name": "onSeeked",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "player.component.Controller",
            "module": "Player",
            "namespace": "player.component"
        },
        {
            "file": "src\\js\\player\\component\\metaScore.player.component.Media.js",
            "line": 342,
            "description": "Check whether the media is playing",
            "itemtype": "method",
            "name": "isPlaying",
            "return": {
                "description": "Whether the media is playing",
                "type": "Boolean"
            },
            "class": "player.component.Controller",
            "module": "Player",
            "namespace": "player.component"
        },
        {
            "file": "src\\js\\player\\component\\metaScore.player.component.Media.js",
            "line": 352,
            "description": "Reset the media time",
            "itemtype": "method",
            "name": "reset",
            "chainable": 1,
            "class": "player.component.Controller",
            "module": "Player",
            "namespace": "player.component"
        },
        {
            "file": "src\\js\\player\\component\\metaScore.player.component.Media.js",
            "line": 364,
            "description": "Play the media",
            "itemtype": "method",
            "name": "play",
            "chainable": 1,
            "class": "player.component.Controller",
            "module": "Player",
            "namespace": "player.component"
        },
        {
            "file": "src\\js\\player\\component\\metaScore.player.component.Media.js",
            "line": 376,
            "description": "Pause the media",
            "itemtype": "method",
            "name": "pause",
            "chainable": 1,
            "class": "player.component.Controller",
            "module": "Player",
            "namespace": "player.component"
        },
        {
            "file": "src\\js\\player\\component\\metaScore.player.component.Media.js",
            "line": 388,
            "description": "Trigger the timeupdate event",
            "itemtype": "method",
            "name": "triggerTimeUpdate",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "loop",
                    "description": "Whether to use requestAnimationFrame to trigger this method again",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "chainable": 1,
            "class": "player.component.Controller",
            "module": "Player",
            "namespace": "player.component"
        },
        {
            "file": "src\\js\\player\\component\\metaScore.player.component.Media.js",
            "line": 406,
            "description": "Set the media time",
            "itemtype": "method",
            "name": "setTime",
            "params": [
                {
                    "name": "time",
                    "description": "The time in centiseconds",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "player.component.Controller",
            "module": "Player",
            "namespace": "player.component"
        },
        {
            "file": "src\\js\\player\\component\\metaScore.player.component.Media.js",
            "line": 421,
            "description": "Get the current media time",
            "itemtype": "method",
            "name": "getTime",
            "return": {
                "description": "The time in centiseconds",
                "type": "Number"
            },
            "class": "player.component.Controller",
            "module": "Player",
            "namespace": "player.component"
        },
        {
            "file": "src\\js\\player\\component\\metaScore.player.component.Media.js",
            "line": 431,
            "description": "Get the media's duration",
            "itemtype": "method",
            "name": "getDuration",
            "return": {
                "description": "The duration in centiseconds",
                "type": "Number"
            },
            "class": "player.component.Controller",
            "module": "Player",
            "namespace": "player.component"
        },
        {
            "file": "src\\js\\player\\component\\metaScore.player.component.Media.js",
            "line": 441,
            "description": "Set/Unset the draggable behaviour",
            "itemtype": "method",
            "name": "setDraggable",
            "params": [
                {
                    "name": "draggable",
                    "description": "Whether to activate or deactivate the draggable",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "The draggable behaviour",
                "type": "Draggable"
            },
            "class": "player.component.Controller",
            "module": "Player",
            "namespace": "player.component"
        },
        {
            "file": "src\\js\\player\\component\\metaScore.player.component.Media.js",
            "line": 475,
            "description": "Set/Unset the resizable behaviour",
            "itemtype": "method",
            "name": "setDraggable",
            "params": [
                {
                    "name": "resizable",
                    "description": "Whether to activate or deactivate the resizable",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "The resizable behaviour",
                "type": "Resizable"
            },
            "class": "player.component.Controller",
            "module": "Player",
            "namespace": "player.component"
        },
        {
            "file": "src\\js\\player\\component\\metaScore.player.component.Page.js",
            "line": 7,
            "description": "Fired when an element is added",
            "itemtype": "event",
            "name": "elementadd",
            "params": [
                {
                    "name": "page",
                    "description": "The page instance",
                    "type": "Object"
                },
                {
                    "name": "element",
                    "description": "The element instance",
                    "type": "Object"
                }
            ],
            "class": "player.component.Controller",
            "module": "Player"
        },
        {
            "file": "src\\js\\player\\component\\metaScore.player.component.Page.js",
            "line": 16,
            "description": "Fired when a cuepoint started",
            "itemtype": "event",
            "name": "cuepointstart",
            "class": "player.component.Controller",
            "module": "Player"
        },
        {
            "file": "src\\js\\player\\component\\metaScore.player.component.Page.js",
            "line": 23,
            "description": "Fired when a cuepoint stops",
            "itemtype": "event",
            "name": "cuepointstop",
            "class": "player.component.Controller",
            "module": "Player"
        },
        {
            "file": "src\\js\\player\\component\\metaScore.player.component.Page.js",
            "line": 132,
            "description": "Setup the page's UI",
            "itemtype": "method",
            "name": "setupUI",
            "access": "private",
            "tagname": "",
            "class": "player.component.Controller",
            "module": "Player",
            "namespace": "player.component"
        },
        {
            "file": "src\\js\\player\\component\\metaScore.player.component.Page.js",
            "line": 145,
            "description": "Add an new element component to this page",
            "itemtype": "method",
            "name": "addElement",
            "params": [
                {
                    "name": "configs",
                    "description": "Configs to use for the element (see {{#crossLink \"player.component.Element}\"}}{{/crossLink}})",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The element",
                "type": "player.component.Element"
            },
            "class": "player.component.Controller",
            "module": "Player",
            "namespace": "player.component"
        },
        {
            "file": "src\\js\\player\\component\\metaScore.player.component.Page.js",
            "line": 173,
            "description": "Get the block component this page belongs to",
            "itemtype": "method",
            "name": "getBlock",
            "return": {
                "description": "",
                "type": "player.component.Block"
            },
            "class": "player.component.Controller",
            "module": "Player",
            "namespace": "player.component"
        },
        {
            "file": "src\\js\\player\\component\\metaScore.player.component.Page.js",
            "line": 190,
            "description": "Get the element components that belong to this page",
            "itemtype": "method",
            "name": "getElements",
            "return": {
                "description": "The list of elements",
                "type": "Array"
            },
            "class": "player.component.Controller",
            "module": "Player",
            "namespace": "player.component"
        },
        {
            "file": "src\\js\\player\\component\\metaScore.player.component.Page.js",
            "line": 206,
            "description": "The cuepoint start event handler",
            "itemtype": "method",
            "name": "onCuePointStart",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "player.component.Controller",
            "module": "Player",
            "namespace": "player.component"
        },
        {
            "file": "src\\js\\player\\component\\metaScore.player.component.Page.js",
            "line": 217,
            "description": "The cuepoint stop event handler",
            "itemtype": "method",
            "name": "onCuePointStop",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "player.component.Controller",
            "module": "Player",
            "namespace": "player.component"
        },
        {
            "file": "src\\js\\player\\metaScore.player.Component.js",
            "line": 7,
            "description": "Fired when a property changed",
            "itemtype": "event",
            "name": "propchange",
            "params": [
                {
                    "name": "component",
                    "description": "The component instance",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "The name of the property",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The new value of the property",
                    "type": "Mixed"
                }
            ],
            "class": "player.Component",
            "module": "Player"
        },
        {
            "file": "src\\js\\player\\metaScore.player.Component.js",
            "line": 64,
            "description": "Setup the component's UI",
            "itemtype": "method",
            "name": "setupUI",
            "access": "private",
            "tagname": "",
            "class": "player.Component",
            "module": "Player",
            "namespace": "player"
        },
        {
            "file": "src\\js\\player\\metaScore.player.Component.js",
            "line": 72,
            "description": "Get the component's id",
            "itemtype": "method",
            "name": "getId",
            "return": {
                "description": "The id",
                "type": "String"
            },
            "class": "player.Component",
            "module": "Player",
            "namespace": "player"
        },
        {
            "file": "src\\js\\player\\metaScore.player.Component.js",
            "line": 82,
            "description": "Get the value of the component's name property",
            "itemtype": "method",
            "name": "getName",
            "return": {
                "description": "The name",
                "type": "String"
            },
            "class": "player.Component",
            "module": "Player",
            "namespace": "player"
        },
        {
            "file": "src\\js\\player\\metaScore.player.Component.js",
            "line": 92,
            "description": "Check if the component is of a given type",
            "itemtype": "method",
            "name": "instanceOf",
            "params": [
                {
                    "name": "type",
                    "description": "The type to check for",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Whether the component is of the given type",
                "type": "Boolean"
            },
            "class": "player.Component",
            "module": "Player",
            "namespace": "player"
        },
        {
            "file": "src\\js\\player\\metaScore.player.Component.js",
            "line": 103,
            "description": "Check if the component has a given property",
            "itemtype": "method",
            "name": "hasProperty",
            "params": [
                {
                    "name": "name",
                    "description": "The property's name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Whether the component has the given property",
                "type": "Boolean"
            },
            "class": "player.Component",
            "module": "Player",
            "namespace": "player"
        },
        {
            "file": "src\\js\\player\\metaScore.player.Component.js",
            "line": 114,
            "description": "Get the value of a given property",
            "itemtype": "method",
            "name": "getProperty",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the property",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The value of the property",
                "type": "Mixed"
            },
            "class": "player.Component",
            "module": "Player",
            "namespace": "player"
        },
        {
            "file": "src\\js\\player\\metaScore.player.Component.js",
            "line": 127,
            "description": "Get the values of all properties",
            "itemtype": "method",
            "name": "getProperties",
            "params": [
                {
                    "name": "skipDefaults",
                    "description": "Whether to skip properties that have the default value",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "The values of the properties as name/value pairs",
                "type": "Object"
            },
            "class": "player.Component",
            "module": "Player",
            "namespace": "player"
        },
        {
            "file": "src\\js\\player\\metaScore.player.Component.js",
            "line": 153,
            "description": "Set the value of a given property",
            "itemtype": "method",
            "name": "setProperty",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the property",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value to set",
                    "type": "Mixed"
                },
                {
                    "name": "supressEvent",
                    "description": "Whether to supress the propchange event",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "chainable": 1,
            "class": "player.Component",
            "module": "Player",
            "namespace": "player"
        },
        {
            "file": "src\\js\\player\\metaScore.player.Component.js",
            "line": 174,
            "description": "Set property values",
            "itemtype": "method",
            "name": "setProperties",
            "params": [
                {
                    "name": "properties",
                    "description": "The list of properties to set as name/value pairs",
                    "type": "Object"
                },
                {
                    "name": "supressEvent",
                    "description": "Whether to supress the propchange event",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "chainable": 1,
            "class": "player.Component",
            "module": "Player",
            "namespace": "player"
        },
        {
            "file": "src\\js\\player\\metaScore.player.Component.js",
            "line": 190,
            "description": "Set a cuepoint on the component",
            "itemtype": "method",
            "name": "setCuePoint",
            "params": [
                {
                    "name": "configs",
                    "description": "Custom configs to override defaults",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The created cuepoint",
                "type": "player.CuePoint"
            },
            "class": "player.Component",
            "module": "Player",
            "namespace": "player"
        },
        {
            "file": "src\\js\\player\\metaScore.player.Component.js",
            "line": 229,
            "description": "Get the cuepoint of the component",
            "itemtype": "method",
            "name": "getCuePoint",
            "return": {
                "description": "The cuepoint",
                "type": "player.CuePoint"
            },
            "class": "player.Component",
            "module": "Player",
            "namespace": "player"
        },
        {
            "file": "src\\js\\player\\metaScore.player.CuePoint.js",
            "line": 7,
            "description": "Fired when the cuepoint starts",
            "itemtype": "event",
            "name": "start",
            "class": "CuePoint",
            "module": "Player"
        },
        {
            "file": "src\\js\\player\\metaScore.player.CuePoint.js",
            "line": 14,
            "description": "Fired when the cuepoint is active (between the start and end times) and the media time is updated",
            "itemtype": "event",
            "name": "update",
            "class": "CuePoint",
            "module": "Player"
        },
        {
            "file": "src\\js\\player\\metaScore.player.CuePoint.js",
            "line": 21,
            "description": "Fired when the cuepoint stops",
            "itemtype": "event",
            "name": "stop",
            "class": "CuePoint",
            "module": "Player"
        },
        {
            "file": "src\\js\\player\\metaScore.player.CuePoint.js",
            "line": 28,
            "description": "Fired when the media is seeked outside of the cuepoint's time",
            "itemtype": "event",
            "name": "seekout",
            "class": "CuePoint",
            "module": "Player"
        },
        {
            "file": "src\\js\\player\\metaScore.player.CuePoint.js",
            "line": 74,
            "description": "The media's timeupdate event handler",
            "itemtype": "method",
            "name": "onMediaTimeUpdate",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "CuePoint",
            "module": "Player"
        },
        {
            "file": "src\\js\\player\\metaScore.player.CuePoint.js",
            "line": 85,
            "description": "The media's seek event handler",
            "itemtype": "method",
            "name": "onMediaSeeked",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "CuePoint",
            "module": "Player"
        },
        {
            "file": "src\\js\\player\\metaScore.player.CuePoint.js",
            "line": 107,
            "description": "Get the media component on which this cuepoint is attached",
            "itemtype": "method",
            "name": "getMedia",
            "return": {
                "description": "The media component",
                "type": "player.component.Media"
            },
            "class": "CuePoint",
            "module": "Player"
        },
        {
            "file": "src\\js\\player\\metaScore.player.CuePoint.js",
            "line": 117,
            "description": "Init the cuepoint",
            "itemtype": "method",
            "name": "init",
            "chainable": 1,
            "class": "CuePoint",
            "module": "Player"
        },
        {
            "file": "src\\js\\player\\metaScore.player.CuePoint.js",
            "line": 133,
            "description": "Start executing the cuepoint",
            "itemtype": "method",
            "name": "start",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "supressEvent",
                    "description": "Whether to prevent the custom event from firing",
                    "type": "Boolean"
                }
            ],
            "class": "CuePoint",
            "module": "Player"
        },
        {
            "file": "src\\js\\player\\metaScore.player.CuePoint.js",
            "line": 155,
            "description": "Update the cuepoint",
            "itemtype": "method",
            "name": "update",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "supressEvent",
                    "description": "Whether to prevent the custom event from firing",
                    "type": "Boolean"
                }
            ],
            "class": "CuePoint",
            "module": "Player"
        },
        {
            "file": "src\\js\\player\\metaScore.player.CuePoint.js",
            "line": 189,
            "description": "Stop executing the cuepoint",
            "itemtype": "method",
            "name": "stop",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "supressEvent",
                    "description": "Whether to prevent the custom event from firing",
                    "type": "Boolean"
                }
            ],
            "class": "CuePoint",
            "module": "Player"
        },
        {
            "file": "src\\js\\player\\metaScore.player.CuePoint.js",
            "line": 214,
            "description": "Destroy the cuepoint",
            "itemtype": "method",
            "name": "destroy",
            "class": "CuePoint",
            "module": "Player"
        },
        {
            "file": "src\\js\\player\\metaScore.player.Pager.js",
            "line": 38,
            "description": "Update the page counter",
            "itemtype": "method",
            "name": "updateCount",
            "params": [
                {
                    "name": "index",
                    "description": "The index of the block's active page",
                    "type": "Integer"
                },
                {
                    "name": "count",
                    "description": "The number of pages",
                    "type": "Integer"
                }
            ],
            "chainable": 1,
            "class": "player.Pager",
            "module": "Player",
            "namespace": "player"
        },
        {
            "file": "src\\js\\metaScore.API.js",
            "line": 7,
            "description": "A regular expression used to test incoming messages origin",
            "itemtype": "property",
            "name": "_origin_regex",
            "access": "private",
            "tagname": "",
            "type": "Object",
            "class": "API",
            "module": "Player"
        },
        {
            "file": "src\\js\\metaScore.API.js",
            "line": 58,
            "description": "Send a message to the player to invoke a desired method",
            "itemtype": "method",
            "name": "postMessage",
            "params": [
                {
                    "name": "method",
                    "description": "The API method to invoke",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "The parameter(s) to send along",
                    "type": "Mixed"
                }
            ],
            "chainable": 1,
            "class": "API",
            "module": "Player"
        },
        {
            "file": "src\\js\\metaScore.API.js",
            "line": 83,
            "description": "Callback called when the player finished loading",
            "itemtype": "method",
            "name": "onLoad",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "callback",
                    "description": "A callback called once the player finished loading",
                    "type": "Function",
                    "props": [
                        {
                            "name": "api",
                            "description": "The API instance",
                            "type": "API"
                        }
                    ]
                }
            ],
            "class": "API",
            "module": "Player"
        },
        {
            "file": "src\\js\\metaScore.API.js",
            "line": 97,
            "description": "Callback called when a message is received from the player\nIf the received message contains a callback id, it will be invoked with any passed parameters",
            "itemtype": "method",
            "name": "onMessage",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object containing the message details",
                    "type": "MessageEvent"
                }
            ],
            "class": "API",
            "module": "Player"
        },
        {
            "file": "src\\js\\metaScore.API.js",
            "line": 128,
            "description": "Add a listener for player messages",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "type",
                    "description": "The type of message to listen to",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "A callback to invoke when a matched message is received",
                    "type": "Function"
                }
            ],
            "chainable": 1,
            "class": "API",
            "module": "Player"
        },
        {
            "file": "src\\js\\metaScore.API.js",
            "line": 146,
            "description": "Sends a 'play' message to the player\nUsed to start playing the player's media, or play a specific extract",
            "itemtype": "method",
            "name": "play",
            "params": [
                {
                    "name": "inTime",
                    "description": "The time at which the player should start playing",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "outTime",
                    "description": "The time at which the player should stop playing",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "rIndex",
                    "description": "A reading index to go to while playing",
                    "type": "String",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "API",
            "module": "Player"
        },
        {
            "file": "src\\js\\metaScore.API.js",
            "line": 162,
            "description": "Sends a 'pause' message to the player\nUsed to pause the player's media playback",
            "itemtype": "method",
            "name": "pause",
            "chainable": 1,
            "class": "API",
            "module": "Player"
        },
        {
            "file": "src\\js\\metaScore.API.js",
            "line": 175,
            "description": "Sends a 'seek' message to the player\nUsed to seek the player's media to a specific time",
            "itemtype": "method",
            "name": "seek",
            "params": [
                {
                    "name": "seconds",
                    "description": "The time in seconds to seek to",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "API",
            "module": "Player"
        },
        {
            "file": "src\\js\\metaScore.API.js",
            "line": 189,
            "description": "Sends a 'page' message to the player\nUsed to set a block's active page",
            "itemtype": "method",
            "name": "page",
            "params": [
                {
                    "name": "block",
                    "description": "The page's block name",
                    "type": "String"
                },
                {
                    "name": "index",
                    "description": "The page's index",
                    "type": "Integer"
                }
            ],
            "chainable": 1,
            "class": "API",
            "module": "Player"
        },
        {
            "file": "src\\js\\metaScore.API.js",
            "line": 204,
            "description": "Sends a 'rIndex' message to the player\nUsed to set the reading index of the player",
            "itemtype": "method",
            "name": "rIndex",
            "params": [
                {
                    "name": "index",
                    "description": "The reading index to set",
                    "type": "Integer"
                }
            ],
            "chainable": 1,
            "class": "API",
            "module": "Player"
        },
        {
            "file": "src\\js\\metaScore.API.js",
            "line": 218,
            "description": "Sends a 'playing' message to the player\nUsed to check the state of the player",
            "itemtype": "method",
            "name": "playing",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback called when the response is received",
                    "type": "Function",
                    "props": [
                        {
                            "name": "value",
                            "description": "The state of the player (true if playing, false otherwise)",
                            "type": "Boolean"
                        }
                    ]
                }
            ],
            "chainable": 1,
            "class": "API",
            "module": "Player"
        },
        {
            "file": "src\\js\\metaScore.API.js",
            "line": 237,
            "description": "Sends a 'time' message to the player\nUsed to get the current time of the player's media",
            "itemtype": "method",
            "name": "time",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback called when the response is received",
                    "type": "Function",
                    "props": [
                        {
                            "name": "value",
                            "description": "The current time of the media in seconds",
                            "type": "Number"
                        }
                    ]
                }
            ],
            "chainable": 1,
            "class": "API",
            "module": "Player"
        },
        {
            "file": "src\\js\\metaScore.API.js",
            "line": 256,
            "description": "Automatically process API links in the current HTML document",
            "class": "API",
            "module": "Player"
        },
        {
            "file": "src\\js\\metaScore.Class.js",
            "line": 17,
            "description": "Default config values",
            "itemtype": "property",
            "name": "defaults",
            "type": "Object",
            "default": "{}",
            "class": "Class",
            "module": "Core"
        },
        {
            "file": "src\\js\\metaScore.Class.js",
            "line": 26,
            "description": "Extends a class using the current one",
            "itemtype": "method",
            "name": "extend",
            "params": [
                {
                    "name": "child",
                    "description": "The child class to extend",
                    "type": "Class"
                }
            ],
            "class": "Class",
            "module": "Core"
        },
        {
            "file": "src\\js\\metaScore.Class.js",
            "line": 53,
            "description": "Returns a configs object by overriding the defaults with custom ones",
            "itemtype": "method",
            "name": "getConfigs",
            "params": [
                {
                    "name": "configs",
                    "description": "The custom configs",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The extended configs",
                "type": "Object"
            },
            "class": "Class",
            "module": "Core"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 371,
            "description": "Guide creation success callback",
            "itemtype": "method",
            "name": "onGuideCreateSuccess",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "overlay",
                    "description": "The GuideDetails overlay that was used to create the guide",
                    "type": "GuideDetails"
                },
                {
                    "name": "xhr",
                    "description": "The XHR request",
                    "type": "XMLHttpRequest"
                }
            ],
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 390,
            "description": "Guide creation error callback",
            "itemtype": "method",
            "name": "onGuideCreateError",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "xhr",
                    "description": "The XHR request",
                    "type": "XMLHttpRequest"
                }
            ],
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 411,
            "description": "Guide saving success callback",
            "itemtype": "method",
            "name": "onGuideSaveSuccess",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "xhr",
                    "description": "The XHR request",
                    "type": "XMLHttpRequest"
                }
            ],
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 440,
            "description": "Guide saving error callback",
            "itemtype": "method",
            "name": "onGuideSaveError",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "xhr",
                    "description": "The XHR request",
                    "type": "XMLHttpRequest"
                }
            ],
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 461,
            "description": "Guide deletion confirm callback",
            "itemtype": "method",
            "name": "onGuideDeleteConfirm",
            "access": "private",
            "tagname": "",
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 486,
            "description": "Guide deletion success callback",
            "itemtype": "method",
            "name": "onGuideDeleteSuccess",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "xhr",
                    "description": "The XHR request",
                    "type": "XMLHttpRequest"
                }
            ],
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 500,
            "description": "Guide deletion error callback",
            "itemtype": "method",
            "name": "onGuideDeleteError",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "xhr",
                    "description": "The XHR request",
                    "type": "XMLHttpRequest"
                }
            ],
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 521,
            "description": "Guide revert confirm callback",
            "itemtype": "method",
            "name": "onGuideRevertConfirm",
            "access": "private",
            "tagname": "",
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 533,
            "description": "GuideSelector submit callback",
            "itemtype": "method",
            "name": "onGuideSelectorSubmit",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object. See {{#crossLink \"GuideSelector/submit:event\"}}GuideSelector.submit{{/crossLink}}",
                    "type": "CustomEvent"
                }
            ],
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 543,
            "description": "Keydown event callback",
            "itemtype": "method",
            "name": "onKeydown",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "KeyboardEvent"
                }
            ],
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 587,
            "description": "Keyup event callback",
            "itemtype": "method",
            "name": "onKeyup",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "KeyboardEvent"
                }
            ],
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 615,
            "description": "Mousedown event callback",
            "itemtype": "method",
            "name": "onMousedown",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "CustomEvent"
                }
            ],
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 628,
            "description": "Mainmenu click event callback",
            "itemtype": "method",
            "name": "onMainmenuClick",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "MouseEvent"
                }
            ],
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 801,
            "description": "Mainmenu time field valuechange event callback",
            "itemtype": "method",
            "name": "onMainmenuTimeFieldChange",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object. See {{#crossLink \"Time/valuechange:event\"}}Time.valuechange{{/crossLink}}",
                    "type": "CustomEvent"
                }
            ],
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 815,
            "description": "Mainmenu reading index field valuechange event callback",
            "itemtype": "method",
            "name": "onMainmenuRindexFieldChange",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object. See {{#crossLink \"Number/valuechange:event\"}}Number.valuechange{{/crossLink}}",
                    "type": "CustomEvent"
                }
            ],
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 829,
            "description": "Time field valuein event callback",
            "itemtype": "method",
            "name": "onTimeFieldIn",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object. See {{#crossLink \"Time/valuein:event\"}}Time.valuein{{/crossLink}}",
                    "type": "CustomEvent"
                }
            ],
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 843,
            "description": "Time field valueout event callback",
            "itemtype": "method",
            "name": "onTimeFieldOut",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object. See {{#crossLink \"Time/valueout:event\"}}Time.valueout{{/crossLink}}",
                    "type": "CustomEvent"
                }
            ],
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 856,
            "description": "Sidebar resizestart event callback",
            "itemtype": "method",
            "name": "onSidebarResizeStart",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object. See {{#crossLink \"Resizable/resizestart:event\"}}Resizable.resizestart{{/crossLink}}",
                    "type": "CustomEvent"
                }
            ],
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 867,
            "description": "Sidebar resize event callback",
            "itemtype": "method",
            "name": "onSidebarResize",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object. See {{#crossLink \"Resizable/resize:event\"}}Resizable.resize{{/crossLink}}",
                    "type": "CustomEvent"
                }
            ],
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 880,
            "description": "Sidebar resizeend event callback",
            "itemtype": "method",
            "name": "onSidebarResizeEnd",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object. See {{#crossLink \"Resizable/resizeend:event\"}}Resizable.resizeend{{/crossLink}}",
                    "type": "CustomEvent"
                }
            ],
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 891,
            "description": "Sidebar resize handle dblclick event callback",
            "itemtype": "method",
            "name": "onSidebarResizeDblclick",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "MouseEvent"
                }
            ],
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 904,
            "description": "Block panel componentbeforeset event callback",
            "itemtype": "method",
            "name": "onBlockBeforeSet",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object. See {{#crossLink \"Panel/componentbeforeset:event\"}}Panel.componentbeforeset{{/crossLink}}",
                    "type": "CustomEvent"
                }
            ],
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 918,
            "description": "Block panel componentset event callback",
            "itemtype": "method",
            "name": "onBlockSet",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object. See {{#crossLink \"Panel/componentset:event\"}}Panel.componentset{{/crossLink}}",
                    "type": "CustomEvent"
                }
            ],
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 945,
            "description": "Block panel componentunset event callback",
            "itemtype": "method",
            "name": "onBlockUnset",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object. See {{#crossLink \"Panel/componentunset:event\"}}Panel.componentunset{{/crossLink}}",
                    "type": "CustomEvent"
                }
            ],
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 957,
            "description": "Block panel valuechange event callback",
            "itemtype": "method",
            "name": "onBlockPanelValueChange",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object. See {{#crossLink \"Panel/valueschange:event\"}}Panel.valueschange{{/crossLink}}",
                    "type": "CustomEvent"
                }
            ],
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 980,
            "description": "Block panel toolbar click event callback",
            "itemtype": "method",
            "name": "onBlockPanelToolbarClick",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "MouseEvent"
                }
            ],
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 1006,
            "description": "Block panel toolbar selector valuechange event callback",
            "itemtype": "method",
            "name": "onBlockPanelSelectorChange",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object. See {{#crossLink \"Select/valueschange:event\"}}Select.valueschange{{/crossLink}}",
                    "type": "CustomEvent"
                }
            ],
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 1029,
            "description": "Page panel componentbeforeset event callback",
            "itemtype": "method",
            "name": "onPageBeforeSet",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object. See {{#crossLink \"Panel/componentbeforeset:event\"}}Panel.componentbeforeset{{/crossLink}}",
                    "type": "CustomEvent"
                }
            ],
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 1044,
            "description": "Page panel componentset event callback",
            "itemtype": "method",
            "name": "onPageSet",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object. See {{#crossLink \"Panel/componentset:event\"}}Panel.componentset{{/crossLink}}",
                    "type": "CustomEvent"
                }
            ],
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 1096,
            "description": "Page panel componentunset event callback",
            "itemtype": "method",
            "name": "onPageUnset",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object. See {{#crossLink \"Panel/componentunset:event\"}}Panel.componentunset{{/crossLink}}",
                    "type": "CustomEvent"
                }
            ],
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 1112,
            "description": "Page panel valuechange event callback",
            "itemtype": "method",
            "name": "onPagePanelValueChange",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object. See {{#crossLink \"Panel/valueschange:event\"}}Panel.valueschange{{/crossLink}}",
                    "type": "CustomEvent"
                }
            ],
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 1179,
            "description": "Page panel toolbar click event callback",
            "itemtype": "method",
            "name": "onPagePanelToolbarClick",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "MouseEvent"
                }
            ],
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 1205,
            "description": "Page panel toolbar selector valuechange event callback",
            "itemtype": "method",
            "name": "onPagePanelSelectorChange",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object. See {{#crossLink \"Select/valueschange:event\"}}Select.valueschange{{/crossLink}}",
                    "type": "CustomEvent"
                }
            ],
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 1226,
            "description": "Element panel componentbeforeset event callback",
            "itemtype": "method",
            "name": "onElementBeforeSet",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object. See {{#crossLink \"Panel/componentbeforeset:event\"}}Panel.componentbeforeset{{/crossLink}}",
                    "type": "CustomEvent"
                }
            ],
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 1240,
            "description": "Element panel componentset event callback",
            "itemtype": "method",
            "name": "onElementSet",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object. See {{#crossLink \"Panel/componentset:event\"}}Panel.componentset{{/crossLink}}",
                    "type": "CustomEvent"
                }
            ],
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 1256,
            "description": "Element panel valuechange event callback",
            "itemtype": "method",
            "name": "onElementPanelValueChange",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object. See {{#crossLink \"Panel/valueschange:event\"}}Panel.valueschange{{/crossLink}}",
                    "type": "CustomEvent"
                }
            ],
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 1292,
            "description": "Element panel toolbar click event callback",
            "itemtype": "method",
            "name": "onElementPanelStartTimeFieldToggled",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "MouseEvent"
                }
            ],
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 1306,
            "description": "Element panel toolbar click event callback",
            "itemtype": "method",
            "name": "onElementPanelEndTimeFieldToggled",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "MouseEvent"
                }
            ],
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 1325,
            "description": "Element panel toolbar click event callback",
            "itemtype": "method",
            "name": "onElementPanelToolbarClick",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "MouseEvent"
                }
            ],
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 1351,
            "description": "Element panel toolbar selector valuechange event callback",
            "itemtype": "method",
            "name": "onPagePanelSelectorChange",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object. See {{#crossLink \"Select/valueschange:event\"}}Select.valueschange{{/crossLink}}",
                    "type": "CustomEvent"
                }
            ],
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 1374,
            "description": "Player idset event callback",
            "itemtype": "method",
            "name": "onPlayerIdSet",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object. See {{#crossLink \"Player/idset:event\"}}Player.idset{{/crossLink}}",
                    "type": "CustomEvent"
                }
            ],
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 1387,
            "description": "Player revisionset event callback",
            "itemtype": "method",
            "name": "onPlayerRevisionSet",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object. See {{#crossLink \"Player/revisionset:event\"}}Player.revisionset{{/crossLink}}",
                    "type": "CustomEvent"
                }
            ],
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 1400,
            "description": "Media timeupdate event callback",
            "itemtype": "method",
            "name": "onPlayerTimeUpdate",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object. See {{#crossLink \"Media/timeupdate:event\"}}Media.timeupdate{{/crossLink}}",
                    "type": "CustomEvent"
                }
            ],
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 1413,
            "description": "Player rindex event callback",
            "itemtype": "method",
            "name": "onPlayerReadingIndex",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object. See {{#crossLink \"Player/rindex:event\"}}Player.rindex{{/crossLink}}",
                    "type": "CustomEvent"
                }
            ],
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 1426,
            "description": "Player mousedown event callback",
            "itemtype": "method",
            "name": "onPlayerMousedown",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "CustomEvent"
                }
            ],
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 1437,
            "description": "Player blockadd event callback",
            "itemtype": "method",
            "name": "onPlayerBlockAdd",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object. See {{#crossLink \"Player/blockadd:event\"}}Player.blockadd{{/crossLink}}",
                    "type": "CustomEvent"
                }
            ],
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 1448,
            "description": "Player childremove event callback",
            "itemtype": "method",
            "name": "onPlayerChildRemove",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object. See {{#crossLink \"Dom/childremove:event\"}}Dom.childremove{{/crossLink}}",
                    "type": "CustomEvent"
                }
            ],
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 1472,
            "description": "Player frame load event callback",
            "itemtype": "method",
            "name": "onPlayerFrameLoadSuccess",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "UIEvent"
                }
            ],
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 1491,
            "description": "Player frame error event callback",
            "itemtype": "method",
            "name": "onPlayerFrameLoadError",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "UIEvent"
                }
            ],
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 1512,
            "description": "Player load event callback",
            "itemtype": "method",
            "name": "onPlayerLoadSuccess",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object. See {{#crossLink \"Player/load:event\"}}Player.load{{/crossLink}}",
                    "type": "CustomEvent"
                }
            ],
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 1572,
            "description": "Player error event callback",
            "itemtype": "method",
            "name": "onPlayerLoadError",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object. See {{#crossLink \"Player/error:event\"}}Player.error{{/crossLink}}",
                    "type": "CustomEvent"
                }
            ],
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 1593,
            "description": "Player click event callback",
            "itemtype": "method",
            "name": "onPlayerClick",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "MouseEvent"
                }
            ],
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 1610,
            "description": "Component beforedrag event callback",
            "itemtype": "method",
            "name": "onComponentBeforeDrag",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 1623,
            "description": "Component click event callback",
            "itemtype": "method",
            "name": "onComponentClick",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "MouseEvent"
                }
            ],
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 1652,
            "description": "Block pageadd event callback",
            "itemtype": "method",
            "name": "onBlockPageAdd",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object. See {{#crossLink \"Block/pageadd:event\"}}Block.pageadd{{/crossLink}}",
                    "type": "CustomEvent"
                }
            ],
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 1669,
            "description": "Block pageactivate event callback",
            "itemtype": "method",
            "name": "onBlockPageActivate",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object. See {{#crossLink \"Block/pageactivate:event\"}}Block.pageactivate{{/crossLink}}",
                    "type": "CustomEvent"
                }
            ],
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 1691,
            "description": "Page elementadd event callback",
            "itemtype": "method",
            "name": "onPageElementAdd",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object. See {{#crossLink \"Page/elementadd:event\"}}Page.elementadd{{/crossLink}}",
                    "type": "CustomEvent"
                }
            ],
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 1718,
            "description": "History add event callback",
            "itemtype": "method",
            "name": "onHistoryAdd",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object. See {{#crossLink \"History/add:event\"}}History.add{{/crossLink}}",
                    "type": "CustomEvent"
                }
            ],
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 1729,
            "description": "History undo event callback",
            "itemtype": "method",
            "name": "onHistoryUndo",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object. See {{#crossLink \"History/undo:event\"}}History.undo{{/crossLink}}",
                    "type": "CustomEvent"
                }
            ],
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 1740,
            "description": "History redo event callback",
            "itemtype": "method",
            "name": "onHistoryRedo",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object. See {{#crossLink \"History/redo:event\"}}History.redo{{/crossLink}}",
                    "type": "CustomEvent"
                }
            ],
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 1751,
            "description": "GuideDetails show event callback",
            "itemtype": "method",
            "name": "onDetailsOverlayShow",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object. See {{#crossLink \"Overlay/show:event\"}}Overlay.show{{/crossLink}}",
                    "type": "CustomEvent"
                }
            ],
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 1766,
            "description": "GuideDetails submit event callback",
            "itemtype": "method",
            "name": "onDetailsOverlaySubmit",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object. See {{#crossLink \"GuideDetails/submit:event\"}}GuideDetails.submit{{/crossLink}}",
                    "type": "CustomEvent"
                }
            ],
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 1889,
            "description": "Window hashchange event callback",
            "itemtype": "method",
            "name": "onWindowHashChange",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "HashChangeEvent"
                }
            ],
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 1926,
            "description": "Window beforeunload event callback",
            "itemtype": "method",
            "name": "onWindowBeforeUnload",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 1939,
            "description": "Updates the editing state",
            "itemtype": "method",
            "name": "setEditing",
            "params": [
                {
                    "name": "editing",
                    "description": "The new state",
                    "type": "Boolean"
                },
                {
                    "name": "sticky",
                    "description": "Whether the new state is persistent or temporary",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 1977,
            "description": "Toggles the activation of the sidebar resizer",
            "itemtype": "method",
            "name": "toggleSidebarResizer",
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 1995,
            "description": "Loads a player from the location hash",
            "itemtype": "method",
            "name": "loadPlayerFromHash",
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 2014,
            "description": "Updates the states of the mainmenu buttons",
            "itemtype": "method",
            "name": "updateMainmenu",
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 2040,
            "description": "Updates the selector of the block panel",
            "itemtype": "method",
            "name": "updateBlockSelector",
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 2070,
            "description": "Updates the selector of the page panel",
            "itemtype": "method",
            "name": "updatePageSelector",
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 2096,
            "description": "Updates the selector of the element panel",
            "itemtype": "method",
            "name": "updateElementSelector",
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 2153,
            "description": "Set whether the guide is dirty",
            "itemtype": "method",
            "name": "setDirty",
            "params": [
                {
                    "name": "dirty",
                    "description": "Whether the guide is dirty",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 2166,
            "description": "Check whether the guide is dirty",
            "itemtype": "method",
            "name": "isDirty",
            "return": {
                "description": "Whether the guide is dirty",
                "type": "Boolean"
            },
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 2176,
            "description": "Get the player instance if any",
            "itemtype": "method",
            "name": "getPlayer",
            "return": {
                "description": "The player instance",
                "type": "Player"
            },
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 2186,
            "description": "Loads a player by guide id and vid",
            "itemtype": "method",
            "name": "loadPlayer",
            "params": [
                {
                    "name": "id",
                    "description": "The guide's id",
                    "type": "String"
                },
                {
                    "name": "vid",
                    "description": "The guide's revision id",
                    "type": "Integer"
                }
            ],
            "chainable": 1,
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 2215,
            "description": "Unload the player",
            "itemtype": "method",
            "name": "unloadPlayer",
            "chainable": 1,
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 2238,
            "description": "Add a component to the player",
            "itemtype": "method",
            "name": "addPlayerComponent",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "type",
                    "description": "The component's type",
                    "type": "String"
                },
                {
                    "name": "configs",
                    "description": "Configs to pass to the component",
                    "type": "Object"
                },
                {
                    "name": "parent",
                    "description": "The component's parent",
                    "type": "Mixed"
                }
            ],
            "chainable": 1,
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 2335,
            "description": "Remove a component from the player",
            "itemtype": "method",
            "name": "deletePlayerComponent",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "component",
                    "description": "The component",
                    "type": "player.Component"
                }
            ],
            "chainable": 1,
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 2438,
            "description": "Opens the guide selector",
            "itemtype": "method",
            "name": "openGuideSelector",
            "chainable": 1,
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 2454,
            "description": "Creates a new guide",
            "itemtype": "method",
            "name": "createGuide",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "details",
                    "description": "The guide's data",
                    "type": "Object"
                },
                {
                    "name": "overlay",
                    "description": "The overlay instance used to create the guide",
                    "type": "GuideDetails"
                }
            ],
            "chainable": 1,
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 2497,
            "description": "Saves the loaded guide",
            "itemtype": "method",
            "name": "saveGuide",
            "params": [
                {
                    "name": "action",
                    "description": "The action to perform when saving ('update' or 'clone')",
                    "type": "String"
                },
                {
                    "name": "publish",
                    "description": "Whether to published the new revision",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Editor.js",
            "line": 2570,
            "description": "Get a media file's duration in centiseconds",
            "itemtype": "method",
            "name": "getMediaFileDuration",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "url",
                    "description": "The file's url",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "A callback function to call with the duration",
                    "type": "Function"
                }
            ],
            "class": "Editor",
            "module": "Editor"
        },
        {
            "file": "src\\js\\metaScore.Evented.js",
            "line": 23,
            "description": "Add an event listener",
            "itemtype": "method",
            "name": "addListener",
            "params": [
                {
                    "name": "type",
                    "description": "The event type to listen to",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "The callback function to associate to this listener",
                    "type": "Function"
                }
            ],
            "chainable": 1,
            "class": "Evented",
            "module": "Core"
        },
        {
            "file": "src\\js\\metaScore.Evented.js",
            "line": 41,
            "description": "Remove an event listener",
            "itemtype": "method",
            "name": "removeListener",
            "params": [
                {
                    "name": "type",
                    "description": "The event type to stop listen to",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "The callback function associated to this listener",
                    "type": "Function"
                }
            ],
            "chainable": 1,
            "class": "Evented",
            "module": "Core"
        },
        {
            "file": "src\\js\\metaScore.Evented.js",
            "line": 63,
            "description": "Check if a listener is attached to a given event type",
            "itemtype": "method",
            "name": "hasListener",
            "params": [
                {
                    "name": "type",
                    "description": "The event type",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Whether a listener is attached",
                "type": "Boolean"
            },
            "class": "Evented",
            "module": "Core"
        },
        {
            "file": "src\\js\\metaScore.Evented.js",
            "line": 78,
            "description": "Trigger an event",
            "itemtype": "method",
            "name": "triggerEvent",
            "params": [
                {
                    "name": "type",
                    "description": "The event type",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Data to attach to the event via the detail propoerty",
                    "type": "Mixed"
                },
                {
                    "name": "bubbling",
                    "description": "Whether the event bubbles up through the DOM or not",
                    "type": "Boolean"
                },
                {
                    "name": "cancelable",
                    "description": "Whether the event is cancelable or not",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "Evented",
            "module": "Core"
        },
        {
            "file": "src\\js\\metaScore.Player.js",
            "line": 10,
            "description": "Fired when the guide's loading finished successfully",
            "itemtype": "event",
            "name": "load",
            "params": [
                {
                    "name": "player",
                    "description": "The player instance",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "The json data loaded",
                    "type": "Object"
                }
            ],
            "class": "Player",
            "module": "Player"
        },
        {
            "file": "src\\js\\metaScore.Player.js",
            "line": 19,
            "description": "Fired when the guide's loading failed",
            "itemtype": "event",
            "name": "loaderror",
            "params": [
                {
                    "name": "player",
                    "description": "The player instance",
                    "type": "Object"
                }
            ],
            "class": "Player",
            "module": "Player"
        },
        {
            "file": "src\\js\\metaScore.Player.js",
            "line": 27,
            "description": "Fired when the id is set",
            "itemtype": "event",
            "name": "idset",
            "params": [
                {
                    "name": "player",
                    "description": "The player instance",
                    "type": "Object"
                },
                {
                    "name": "id",
                    "description": "The guide's id",
                    "type": "String"
                }
            ],
            "class": "Player",
            "module": "Player"
        },
        {
            "file": "src\\js\\metaScore.Player.js",
            "line": 36,
            "description": "Fired when the vid is set",
            "itemtype": "event",
            "name": "revisionset",
            "params": [
                {
                    "name": "player",
                    "description": "The player instance",
                    "type": "Object"
                },
                {
                    "name": "vid",
                    "description": "The guide's vid",
                    "type": "Integer"
                }
            ],
            "class": "Player",
            "module": "Player"
        },
        {
            "file": "src\\js\\metaScore.Player.js",
            "line": 45,
            "description": "Fired when the media is added",
            "itemtype": "event",
            "name": "mediaadd",
            "params": [
                {
                    "name": "player",
                    "description": "The player instance",
                    "type": "Object"
                },
                {
                    "name": "media",
                    "description": "The media instance",
                    "type": "Object"
                }
            ],
            "class": "Player",
            "module": "Player"
        },
        {
            "file": "src\\js\\metaScore.Player.js",
            "line": 54,
            "description": "Fired when the controller is added",
            "itemtype": "event",
            "name": "controlleradd",
            "params": [
                {
                    "name": "player",
                    "description": "The player instance",
                    "type": "Object"
                },
                {
                    "name": "controller",
                    "description": "The controller instance",
                    "type": "Object"
                }
            ],
            "class": "Player",
            "module": "Player"
        },
        {
            "file": "src\\js\\metaScore.Player.js",
            "line": 63,
            "description": "Fired when a block is added",
            "itemtype": "event",
            "name": "blockadd",
            "params": [
                {
                    "name": "player",
                    "description": "The player instance",
                    "type": "Object"
                },
                {
                    "name": "block",
                    "description": "The block instance",
                    "type": "Object"
                }
            ],
            "class": "Player",
            "module": "Player"
        },
        {
            "file": "src\\js\\metaScore.Player.js",
            "line": 72,
            "description": "Fired when the reading index is set",
            "itemtype": "event",
            "name": "rindex",
            "params": [
                {
                    "name": "player",
                    "description": "The player instance",
                    "type": "Object"
                },
                {
                    "name": "value",
                    "description": "The reading index value",
                    "type": "Object"
                }
            ],
            "class": "Player",
            "module": "Player"
        },
        {
            "file": "src\\js\\metaScore.Player.js",
            "line": 129,
            "description": "Keydown event callback",
            "itemtype": "method",
            "name": "onKeydown",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "KeyboardEvent"
                }
            ],
            "class": "Player",
            "module": "Player"
        },
        {
            "file": "src\\js\\metaScore.Player.js",
            "line": 155,
            "description": "API message event callback",
            "itemtype": "method",
            "name": "onAPIMessage",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "MessageEvent"
                }
            ],
            "class": "Player",
            "module": "Player"
        },
        {
            "file": "src\\js\\metaScore.Player.js",
            "line": 255,
            "description": "Controller button click event callback",
            "itemtype": "method",
            "name": "onControllerButtonClick",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "MouseEvent"
                }
            ],
            "class": "Player",
            "module": "Player"
        },
        {
            "file": "src\\js\\metaScore.Player.js",
            "line": 278,
            "description": "Media loadedmetadata event callback",
            "itemtype": "method",
            "name": "onMediaLoadedMetadata",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "Player",
            "module": "Player"
        },
        {
            "file": "src\\js\\metaScore.Player.js",
            "line": 289,
            "description": "Media waiting event callback",
            "itemtype": "method",
            "name": "onMediaWaiting",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "Player",
            "module": "Player"
        },
        {
            "file": "src\\js\\metaScore.Player.js",
            "line": 300,
            "description": "Media seeking event callback",
            "itemtype": "method",
            "name": "onMediaSeeking",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "Player",
            "module": "Player"
        },
        {
            "file": "src\\js\\metaScore.Player.js",
            "line": 311,
            "description": "Media seeked event callback",
            "itemtype": "method",
            "name": "onMediaSeeked",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "Player",
            "module": "Player"
        },
        {
            "file": "src\\js\\metaScore.Player.js",
            "line": 322,
            "description": "Media playing event callback",
            "itemtype": "method",
            "name": "onMediaPlaying",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "Player",
            "module": "Player"
        },
        {
            "file": "src\\js\\metaScore.Player.js",
            "line": 335,
            "description": "Media play event callback",
            "itemtype": "method",
            "name": "onMediaPlay",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "Player",
            "module": "Player"
        },
        {
            "file": "src\\js\\metaScore.Player.js",
            "line": 348,
            "description": "Media pause event callback",
            "itemtype": "method",
            "name": "onMediaPause",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "Player",
            "module": "Player"
        },
        {
            "file": "src\\js\\metaScore.Player.js",
            "line": 361,
            "description": "Media timeupdate event callback",
            "itemtype": "method",
            "name": "onMediaTimeUpdate",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "Player",
            "module": "Player"
        },
        {
            "file": "src\\js\\metaScore.Player.js",
            "line": 374,
            "description": "Media suspend event callback",
            "itemtype": "method",
            "name": "onMediaSuspend",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "Player",
            "module": "Player"
        },
        {
            "file": "src\\js\\metaScore.Player.js",
            "line": 385,
            "description": "Media suspend event callback",
            "itemtype": "method",
            "name": "onMediaStalled",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "Player",
            "module": "Player"
        },
        {
            "file": "src\\js\\metaScore.Player.js",
            "line": 396,
            "description": "Media error event callback",
            "itemtype": "method",
            "name": "onMediaError",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "Player",
            "module": "Player"
        },
        {
            "file": "src\\js\\metaScore.Player.js",
            "line": 441,
            "description": "Block pageactivate event callback",
            "itemtype": "method",
            "name": "onPageActivate",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "CustomEvent"
                }
            ],
            "class": "Player",
            "module": "Player"
        },
        {
            "file": "src\\js\\metaScore.Player.js",
            "line": 458,
            "description": "Element of type Cursor time event callback",
            "itemtype": "method",
            "name": "onCursorElementTime",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "CustomEvent"
                }
            ],
            "class": "Player",
            "module": "Player"
        },
        {
            "file": "src\\js\\metaScore.Player.js",
            "line": 471,
            "description": "Element of type Text play event callback",
            "itemtype": "method",
            "name": "onTextElementPlay",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "CustomEvent"
                }
            ],
            "class": "Player",
            "module": "Player"
        },
        {
            "file": "src\\js\\metaScore.Player.js",
            "line": 482,
            "description": "Element of type Text page event callback",
            "itemtype": "method",
            "name": "onTextElementPage",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "CustomEvent"
                }
            ],
            "class": "Player",
            "module": "Player"
        },
        {
            "file": "src\\js\\metaScore.Player.js",
            "line": 498,
            "description": "Componenet propchange event callback",
            "itemtype": "method",
            "name": "onComponenetPropChange",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "The event object",
                    "type": "CustomEvent"
                }
            ],
            "class": "Player",
            "module": "Player"
        },
        {
            "file": "src\\js\\metaScore.Player.js",
            "line": 527,
            "description": "loadsuccess event callback",
            "itemtype": "method",
            "name": "onLoadSuccess",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "xhr",
                    "description": "The XHR request",
                    "type": "XMLHttpRequest"
                }
            ],
            "class": "Player",
            "module": "Player"
        },
        {
            "file": "src\\js\\metaScore.Player.js",
            "line": 572,
            "description": "loaderror event callback",
            "itemtype": "method",
            "name": "onLoadError",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "xhr",
                    "description": "The XHR request",
                    "type": "XMLHttpRequest"
                }
            ],
            "class": "Player",
            "module": "Player"
        },
        {
            "file": "src\\js\\metaScore.Player.js",
            "line": 585,
            "description": "Load the guide",
            "itemtype": "method",
            "name": "load",
            "access": "private",
            "tagname": "",
            "class": "Player",
            "module": "Player"
        },
        {
            "file": "src\\js\\metaScore.Player.js",
            "line": 605,
            "description": "Get the id of the loaded guide",
            "itemtype": "method",
            "name": "getId",
            "return": {
                "description": "The id",
                "type": "String"
            },
            "class": "Player",
            "module": "Player"
        },
        {
            "file": "src\\js\\metaScore.Player.js",
            "line": 615,
            "description": "Set the id of the loaded guide in a data attribute",
            "itemtype": "method",
            "name": "setId",
            "params": [
                {
                    "name": "id",
                    "description": "The id",
                    "type": "String"
                },
                {
                    "name": "supressEvent",
                    "description": "Whether to supress the idset event",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "chainable": 1,
            "class": "Player",
            "module": "Player"
        },
        {
            "file": "src\\js\\metaScore.Player.js",
            "line": 633,
            "description": "Get the revision id of the loaded guide",
            "itemtype": "method",
            "name": "getRevision",
            "return": {
                "description": "The revision id",
                "type": "String"
            },
            "class": "Player",
            "module": "Player"
        },
        {
            "file": "src\\js\\metaScore.Player.js",
            "line": 643,
            "description": "Set the revision id of the loaded guide in a data attribute",
            "itemtype": "method",
            "name": "setRevision",
            "params": [
                {
                    "name": "id",
                    "description": "The id",
                    "type": "String"
                },
                {
                    "name": "supressEvent",
                    "description": "Whether to supress the revisionset event",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "chainable": 1,
            "class": "Player",
            "module": "Player"
        },
        {
            "file": "src\\js\\metaScore.Player.js",
            "line": 661,
            "description": "Get the loaded JSON data",
            "itemtype": "method",
            "name": "getData",
            "params": [
                {
                    "name": "key",
                    "description": "An optional data key",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "The value corresponding to the key, or the entire JSON data",
                "type": "Object"
            },
            "class": "Player",
            "module": "Player"
        },
        {
            "file": "src\\js\\metaScore.Player.js",
            "line": 676,
            "description": "Get the media instance",
            "itemtype": "method",
            "name": "getMedia",
            "return": {
                "description": "The media instance",
                "type": "Media"
            },
            "class": "Player",
            "module": "Player"
        },
        {
            "file": "src\\js\\metaScore.Player.js",
            "line": 686,
            "description": "Update the loaded JSON data",
            "itemtype": "method",
            "name": "updateData",
            "params": [
                {
                    "name": "data",
                    "description": "The data key, value pairs to update",
                    "type": "Object"
                },
                {
                    "name": "skipInternalUpdates",
                    "description": "Whether to skip internal update methods for CSS, media sources, etc",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "Player",
            "module": "Player"
        },
        {
            "file": "src\\js\\metaScore.Player.js",
            "line": 711,
            "description": "Get a component by CSS selector",
            "itemtype": "method",
            "name": "getComponent",
            "params": [
                {
                    "name": "selector",
                    "description": "The CSS selector",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The component",
                "type": "Component"
            },
            "class": "Player",
            "module": "Player"
        },
        {
            "file": "src\\js\\metaScore.Player.js",
            "line": 722,
            "description": "Get components by CSS selector",
            "itemtype": "method",
            "name": "getComponents",
            "params": [
                {
                    "name": "selector",
                    "description": "The CSS selector",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A Dom instance containing the selected components",
                "type": "Dom"
            },
            "class": "Player",
            "module": "Player"
        },
        {
            "file": "src\\js\\metaScore.Player.js",
            "line": 741,
            "description": "Create and add a Media instance",
            "itemtype": "method",
            "name": "addMedia",
            "params": [
                {
                    "name": "configs",
                    "description": "The configurations to send to the Media class",
                    "type": "Object"
                },
                {
                    "name": "supressEvent",
                    "description": "Whether to supress the mediadd event or not",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "The Media instance",
                "type": "Media"
            },
            "class": "Player",
            "module": "Player"
        },
        {
            "file": "src\\js\\metaScore.Player.js",
            "line": 771,
            "description": "Create and add a Controller instance",
            "itemtype": "method",
            "name": "addController",
            "params": [
                {
                    "name": "configs",
                    "description": "The configurations to send to the Controller class",
                    "type": "Object"
                },
                {
                    "name": "supressEvent",
                    "description": "Whether to supress the controlleradd event or not",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "The Controller instance",
                "type": "Controller"
            },
            "class": "Player",
            "module": "Player"
        },
        {
            "file": "src\\js\\metaScore.Player.js",
            "line": 791,
            "description": "Create and add a Block instance",
            "itemtype": "method",
            "name": "addBlock",
            "params": [
                {
                    "name": "configs",
                    "description": "The configurations to send to the Block class",
                    "type": "Object"
                },
                {
                    "name": "supressEvent",
                    "description": "Whether to supress the blockadd event or not",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "The Block instance",
                "type": "Block"
            },
            "class": "Player",
            "module": "Player"
        },
        {
            "file": "src\\js\\metaScore.Player.js",
            "line": 826,
            "description": "Update the custom CSS",
            "itemtype": "method",
            "name": "updateCSS",
            "params": [
                {
                    "name": "value",
                    "description": "The custom CSS value",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Player",
            "module": "Player"
        },
        {
            "file": "src\\js\\metaScore.Player.js",
            "line": 839,
            "description": "Toggles the media playing state",
            "itemtype": "method",
            "name": "togglePlay",
            "chainable": 1,
            "class": "Player",
            "module": "Player"
        },
        {
            "file": "src\\js\\metaScore.Player.js",
            "line": 858,
            "description": "Start playing the media at the current position, or plays a specific extract",
            "itemtype": "method",
            "name": "play",
            "params": [
                {
                    "name": "inTime",
                    "description": "The time at which the media should start playing",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "outTime",
                    "description": "The time at which the media should stop playing",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "rIndex",
                    "description": "A reading index to go to while playing",
                    "type": "String",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "Player",
            "module": "Player"
        },
        {
            "file": "src\\js\\metaScore.Player.js",
            "line": 909,
            "description": "Set the current reading index",
            "itemtype": "method",
            "name": "setReadingIndex",
            "params": [
                {
                    "name": "index",
                    "description": "The reading index",
                    "type": "Integer"
                },
                {
                    "name": "supressEvent",
                    "description": "Whether to supress the blockadd event or not",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "chainable": 1,
            "class": "Player",
            "module": "Player"
        },
        {
            "file": "src\\js\\metaScore.core.js",
            "line": 16,
            "description": "Returns the current version identifier",
            "itemtype": "method",
            "name": "getVersion",
            "static": 1,
            "return": {
                "description": "The version identifier",
                "type": "String"
            },
            "class": "metaScore",
            "module": "Core"
        },
        {
            "file": "src\\js\\metaScore.core.js",
            "line": 27,
            "description": "Returns the current revision identifier",
            "itemtype": "method",
            "name": "getRevision",
            "static": 1,
            "return": {
                "description": "The revision identifier",
                "type": "String"
            },
            "class": "metaScore",
            "module": "Core"
        },
        {
            "file": "src\\js\\metaScore.core.js",
            "line": 38,
            "description": "Returns a sub-namespace, creating it if it doesn't already exist",
            "itemtype": "method",
            "name": "namespace",
            "static": 1,
            "params": [
                {
                    "name": "The",
                    "description": "sub-namespace to create",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The sub-namespace",
                "type": "Object"
            },
            "class": "metaScore",
            "module": "Core"
        },
        {
            "file": "src\\js\\metaScore.polyfill.js",
            "line": 1,
            "description": "Polyfills",
            "class": "",
            "module": "Core"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: exqmple",
            "line": " src\\js\\core\\metaScore.String.js:27"
        },
        {
            "message": "unknown tag: exqmple",
            "line": " src\\js\\core\\metaScore.String.js:27"
        },
        {
            "message": "unknown tag: exqmple",
            "line": " src\\js\\core\\metaScore.String.js:27"
        },
        {
            "message": "unknown tag: exqmple",
            "line": " src\\js\\core\\metaScore.String.js:80"
        },
        {
            "message": "unknown tag: exqmple",
            "line": " src\\js\\core\\metaScore.String.js:80"
        },
        {
            "message": "unknown tag: exqmple",
            "line": " src\\js\\core\\metaScore.String.js:80"
        },
        {
            "message": "unknown tag: exqmple",
            "line": " src\\js\\core\\metaScore.String.js:136"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src\\js\\player\\component\\metaScore.player.component.Block.js:324"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src\\js\\player\\component\\metaScore.player.component.Block.js:324"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src\\js\\player\\component\\metaScore.player.component.Block.js:373"
        },
        {
            "message": "unknown tag: namepsace",
            "line": " src\\js\\player\\metaScore.player.CuePoint.js:35"
        },
        {
            "message": "Missing item type\nAutomatically process API links in the current HTML document",
            "line": " src\\js\\metaScore.API.js:256"
        },
        {
            "message": "Missing item type\nPolyfills",
            "line": " src\\js\\metaScore.polyfill.js:1"
        }
    ]
}